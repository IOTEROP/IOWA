{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>2023-XX.develop</p> <p>BY</p> <p></p>"},{"location":"content/AbstractionLayer.html","title":"System Abstraction Layer","text":"<p>The functions explained below are defined inside the file include/iowa_platform.h.</p>"},{"location":"content/AbstractionLayer.html#presentation","title":"Presentation","text":"<p>To port IOWA to your platform, you have to implement the following functions.</p> <pre><code>void * iowa_system_malloc(size_t size);\n\nvoid iowa_system_free(void * pointer);\n\nint32_t iowa_system_gettime(void);\n\nint iowa_system_connection_send(void * connP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n\nint iowa_system_connection_recv(void * connP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n\nint iowa_system_connection_select(void ** connArray,\nsize_t connCount,\nint32_t timeout,\nvoid * userData);\n\nvoid iowa_system_connection_close(void * connP,\nvoid * userData);\n</code></pre> <p>If you are implementing a LwM2M Client, you also have to implement these functions:</p> <pre><code>void iowa_system_reboot(void *userData);\n\nvoid * iowa_system_connection_open(iowa_connection_type_t type,\nchar * hostname,\nchar * port,\nvoid * userData);\n</code></pre> <p>These other functions are optional to implement. See Below.</p> <pre><code>void iowa_system_trace(const char * format,\nva_list varArgs);\n\nvoid * iowa_system_queue_create(void * userData);\n\nvoid iowa_system_queue_delete(void * queueP,\nvoid * userData);\n\nint iowa_system_queue_enqueue(void * queueP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n\nsize_t iowa_system_queue_dequeue(void * queueP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n\nsize_t iowa_system_queue_peek(void * queueP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n\nvoid iowa_system_queue_remove(void * queueP,\nvoid * userData);\n\nsize_t iowa_system_queue_backup(void *queueP,\nuint8_t *buffer,\nsize_t length,\nvoid *userData);\n\nvoid *iowa_system_queue_restore(uint8_t *buffer,\nsize_t length,\nvoid *userData);\n\nsize_t iowa_system_store_context(uint8_t *bufferP,\nsize_t length,\nvoid *userData);\n\nsize_t iowa_system_retrieve_context(uint8_t **bufferP,\nvoid *userData);\n\nvoid iowa_system_connection_interrupt_select(void * userData);\n\nvoid iowa_system_mutex_lock(void * userData);\n\nvoid iowa_system_mutex_unlock(void * userData);\n\nsize_t iowa_system_connection_get_peer_identifier(void * connP,\nuint8_t *addrP,\nsize_t length,\nvoid * userData);\n\nint iowa_system_random_vector_generator(uint8_t *randomBuffer,\nsize_t size,\nvoid *userData);\n\niowa_status_t iowa_system_security_data(const uint8_t *peerIdentity,\nsize_t peerIdentityLen,\niowa_security_operation_t securityOp,\niowa_security_data_t *securityDataP,\nvoid *userDataP);\n</code></pre>"},{"location":"content/AbstractionLayer.html#data-types","title":"Data types","text":""},{"location":"content/AbstractionLayer.html#iowa_connection_type_t","title":"iowa_connection_type_t","text":"<pre><code>typedef enum\n{\nIOWA_CONN_UNDEFINED = 0,\nIOWA_CONN_DATAGRAM,\nIOWA_CONN_STREAM,\nIOWA_CONN_LORAWAN,\nIOWA_CONN_SMS,\nIOWA_CONN_WEBSOCKET\n} iowa_connection_type_t;\n</code></pre> <p>This is an enumeration of the following values:</p> IOWA_CONN_UNDEFINED Connection type is unknown. IOWA_CONN_DATAGRAM UDP connection. IOWA_CONN_STREAM TCP connection. IOWA_CONN_LORAWAN LoRaWAN transport. IOWA_CONN_SMS SMS transport. IOWA_CONN_WEBSOCKET WebSocket transport."},{"location":"content/AbstractionLayer.html#iowa_security_operation_t","title":"iowa_security_operation_t","text":"<pre><code>typedef enum\n{\nIOWA_SEC_READ,\nIOWA_SEC_FREE,\nIOWA_SEC_CREATE,\nIOWA_SEC_DELETE,\nIOWA_SEC_CHECK\n} iowa_security_operation_t;\n</code></pre> <p>The <code>iowa_security_operation_t</code> enumeration is used to tell which security operation is requested when the function <code>iowa_system_security_data</code> is called.</p> IOWA_SEC_READ Read security keys from the Application. IOWA_SEC_FREE Free the data allocated if any in the security structure. Always call after IOWA_SEC_READ. IOWA_SEC_CREATE Add security keys to the Application. IOWA_SEC_DELETE Remove security keys from the Application. IOWA_SEC_CHECK Check if the security keys are present on the Application."},{"location":"content/AbstractionLayer.html#iowa_psk_data_t","title":"iowa_psk_data_t","text":"<pre><code>typedef struct\n{\nuint8_t *identity;\nsize_t   identityLen;\nuint8_t *privateKey;\nsize_t   privateKeyLen;\n} iowa_psk_data_t;\n</code></pre> <p>The <code>iowa_psk_data_t</code> structure is used to store the identity / private key pair information.</p> identity Identity associated with the private key. identityLen Length of the identity. privateKey Private key associated with the identity. privateKeyLen Length of the private key."},{"location":"content/AbstractionLayer.html#iowa_certificate_data_t","title":"iowa_certificate_data_t","text":"<pre><code>typedef struct\n{\nuint8_t *caCertificate;\nsize_t   caCertificateLen;\nuint8_t *certificate;\nsize_t   certificateLen;\nuint8_t *privateKey;\nsize_t   privateKeyLen;\n} iowa_certificate_data_t;\n</code></pre> <p>The <code>iowa_certificate_data_t</code> structure is used to store information related to a certificate.</p> caCertificate Certificate authority used to generate the certificate. Must respect the DER (Distinguished Encoding Rules) format. caCertificateLen Length of the certificate authority. certificate Certificate. Must respect the DER (Distinguished Encoding Rules) format. certificateLen Length of the certificate. privateKey Private key used to generate the certificate. Must respect the DER (Distinguished Encoding Rules) format. privateKeyLen Length of the private key."},{"location":"content/AbstractionLayer.html#iowa_rpk_data_t","title":"iowa_rpk_data_t","text":"<pre><code>typedef struct\n{\nuint8_t *publicKeyX;\nsize_t   publicKeyXLen;\nuint8_t *publicKeyY;\nsize_t   publicKeyYLen;\nuint8_t *privateKey;\nsize_t   privateKeyLen;\n} iowa_rpk_data_t;\n</code></pre> <p>The <code>iowa_rpk_data_t</code> structure is used to store information related to raw public key information. Supported public keys must use the fixed curve secp256r1.</p> publicKeyX Public key X coordinate. publicKeyXLen Length of the public key X coordinate. publicKeyY Public key Y coordinate. publicKeyYLen Length of the public key Y coordinate. privateKey Private key used to generate the public key. privateKeyLen Length of the private key."},{"location":"content/AbstractionLayer.html#iowa_oscore_data_t","title":"iowa_oscore_data_t","text":"<pre><code>typedef struct\n{\nuint8_t *senderId;\nsize_t   senderIdLen;\nuint8_t *recipientId;\nsize_t   recipientIdLen;\nuint8_t *masterSecret;\nsize_t   masterSecretLen;\n} iowa_oscore_data_t;\n</code></pre> <p>The <code>iowa_oscore_data_t</code> structure is used to store information related to OSCORE key information.</p> senderId ID to use to protect sent CoAP messages. senderIdLen Length of the Sender ID. recipientId ID to use to verify received CoAP messages.. recipientIdLen Length of the Recipient ID. masterSecret Private key associated to the Sender ID and Recipient ID. masterSecretLen Length of the Master Secret."},{"location":"content/AbstractionLayer.html#iowa_security_data_t","title":"iowa_security_data_t","text":"<pre><code>typedef struct\n{\niowa_security_mode_t securityMode;\nunion\n{\niowa_psk_data_t         pskData;\niowa_certificate_data_t certData;\niowa_rpk_data_t         rpkData;\niowa_oscore_data_t      oscoreData;\n} protocol;\n} iowa_security_data_t;\n</code></pre> <p>The <code>iowa_security_data_t</code> structure is used to create, delete, read and free security data.</p> securityMode Security mode to determine the data in the union structure. protocol.pskData Pre-shared key data. protocol.certData Certificate data. protocol.rpkData Raw public key data. protocol.oscoreData Object Security for CORE key data."},{"location":"content/AbstractionLayer.html#api","title":"API","text":""},{"location":"content/AbstractionLayer.html#iowa_system_malloc","title":"iowa_system_malloc","text":"<p>Prototype</p> <pre><code>void * iowa_system_malloc(size_t size);\n</code></pre> <p>Description</p> <p><code>iowa_system_malloc()</code> could map directly to C standard library <code>malloc()</code>. It allocates a memory block.</p> <p>Arguments</p> size The size in bytes of the requested memory block. <p>Return Value</p> <p>A pointer to the allocated memory or NULL in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Note</p> <p>This function is required by IOWA.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_free","title":"iowa_system_free","text":"<p>Prototype</p> <pre><code>void iowa_system_free(void * pointer);\n</code></pre> <p>Description</p> <p><code>iowa_system_free()</code> could map directly to C standard library <code>free()</code>. It releases a memory block previously allocated by <code>iowa_system_malloc()</code>.</p> <p>Arguments</p> pointer A pointer to the memory block to release. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required by IOWA.</p> <p>From C standard, no action should occur if pointer argument is a null pointer. This is how the function <code>free()</code> from C standard library behaves. However, some compilers or implementations do not respect this standard. So it can be necessary when implementing <code>iowa_system_free()</code> to check if the argument pointer is nil.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_gettime","title":"iowa_system_gettime","text":"<p>Prototype</p> <pre><code>int32_t iowa_system_gettime(void);\n</code></pre> <p>Description</p> <p><code>iowa_system_gettime()</code> is used by IOWA to determine the time elapsed.</p> <p>Return Value</p> <p>The number of seconds elapsed since a point of origin or a negative number in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required by IOWA.</p> <p>If you are using the GPS or the Location object, this function will be used to timestamp the measure. In this case, the point of origin must be Epoch.</p> <p>Else, the point of origin (Epoch, system boot, etc...) does not matter as this function is used only to determine the elapsed time between consecutive calls.</p> <p>There is no safeguard if <code>iowa_system_gettime()</code> returns a value inferior to the one returned in a previous call.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_reboot","title":"iowa_system_reboot","text":"<p>Prototype</p> <pre><code>void iowa_system_reboot(void *userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_reboot()</code> starts a system reboot.</p> <p>Arguments</p> userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only for LwM2M Clients.</p> <p>This feature is required by the Lightweight M2M protocol. However, a LwM2M device can be functional without it and this function can be a stub.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_trace","title":"iowa_system_trace","text":"<p>Prototype</p> <pre><code>void iowa_system_trace(const char * format,\nva_list varArgs);\n</code></pre> <p>Description</p> <p><code>iowa_system_trace()</code> outputs the logs when the stack is built with IOWA_WITH_LOGS.</p> <p>It can be mapped directly to <code>vprintf()</code>.</p> <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required by IOWA only when logs are activated. See IOWA_LOG_LEVEL and IOWA_LOG_PART.</p> <p>IOWA takes care of freeing varArgs after this call returns.</p> <p>To print a single line on the output, this function can be called multiple times. This has an impact when the flag IOWA_THREAD_SUPPORT is enabled. Several calls of <code>iowa_system_trace()</code> can occur from different threads at the same time. And thus, the output can be ruined. The implementation of this function must be thread safe.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_connection_open","title":"iowa_system_connection_open","text":"<p>Prototype</p> <pre><code>void * iowa_system_connection_open(iowa_connection_type_t type,\nchar * hostname,\nchar * port,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_connection_open()</code> opens a connection to a host.</p> <p>Arguments</p> type The type of connection to open. hostname The hostname of the peer to connect to. port The port to connect to. It may be NULL depending on the provided server URL. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>A pointer to a user-defined type or NULL in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only for LwM2M Clients.</p> <p>When IOWA is used as a LwM2M Client, it calls this function to connect to the LwM2M Servers. See the <code>iowa_client_add_server()</code> API.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_connection_open_server","title":"iowa_system_connection_open_server","text":"<p>Prototype</p> <pre><code>void * iowa_system_connection_open_server(iowa_connection_type_t type,\nchar * hostname,\nchar * port,\nuint16_t ssid,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_connection_open_server()</code> opens a connection to a host.</p> <p>Arguments</p> type The type of connection to open. hostname The hostname of the peer to connect to. port The port to connect to. It may be NULL depending on the provided server URL. ssid The Short Server ID of the LwM2M Server to connect to, <code>0</code> if the connection is to the LwM2M Bootstrap-Server, or IOWA_LWM2M_ID_ALL if the connection is not to a LwM2M Server. userData The argument passed to [<code>iowa_init()</code>][iowa_init]. <p>Return Value</p> <p>A pointer to a user-defined type or NULL in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only for LwM2M Clients when IOWA_ABSTRACTION_EXTENSION is defined.</p> <p>When IOWA is used as a LwM2M Client, it calls this function to connect to the LwM2M Servers. See the [<code>iowa_client_add_server()</code>][iowa_client_add_server] API.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_connection_send","title":"iowa_system_connection_send","text":"<p>Prototype</p> <pre><code>int iowa_system_connection_send(void * connP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_connection_send()</code> sends a buffer on a connection.</p> <p>Arguments</p> connP The connection as returned by <code>iowa_system_connection_open()</code>. buffer The data to send. length The length of the data in bytes. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>The number of bytes sent or a negative number in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required by IOWA.</p> <p>On packet switched networks (eg. UDP), if length is bigger than the MTU, it is advised to not try to send the buffer and return the MTU.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_connection_get_peer_identifier","title":"iowa_system_connection_get_peer_identifier","text":"<p>Prototype</p> <pre><code>size_t iowa_system_connection_get_peer_identifier(void *connP,\nuint8_t *addrP,\nsize_t length,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_connection_get_peer_identifier()</code> returns a unique identifier for the peer of a connection (e.g. IP address, LoRaWAN DevEUI, SMS MSISDN).</p> <p>Arguments</p> connP The connection as returned by <code>iowa_system_connection_open()</code>. addrP A pre-allocated buffer to store the identifier. length The length of addrP in bytes. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>The number of bytes of the identifier or 0 in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the IOWA_SECURITY_LAYER_SUPPORT flag.</p> <p>This is used when the endpoint name has not been found in the registration payload.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_connection_recv","title":"iowa_system_connection_recv","text":"<p>Prototype</p> <pre><code>int iowa_system_connection_recv(void * connP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_connection_recv()</code> reads data from a connection in a non-blocking way.</p> <p>Arguments</p> connP The connection as returned by <code>iowa_system_connection_open()</code>. buffer A buffer to store the received data. length The length of the buffer in bytes. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>The number of received bytes or a negative number in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Note</p> <p>This function is required by IOWA.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_connection_select","title":"iowa_system_connection_select","text":"<p>Prototype</p> <pre><code>int iowa_system_connection_select(void ** connArray,\nsize_t connCount,\nint32_t timeout,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_connection_select()</code> monitors a list of connections for incoming data during the specified time.</p> <p>Arguments</p> connArray An array of connections as returned by <code>iowa_system_connection_open()</code>. connCount The number of elements of connArray. This may be zero. timeout The time to wait for data in seconds. This may be zero. userData The argument passed to <code>iowa_init()</code>. Return Value <p>either:</p> <ul> <li>a positive number if data are available.</li> </ul> <ul> <li>zero if the time elapsed.</li> </ul> <ul> <li>a negative number in case of error.</li> </ul> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required by IOWA.</p> <p>If data are available on one or more connections, <code>iowa_system_connection_select()</code> must modify the connArray elements :</p> <ul> <li>If data are available on a connection the matching element in connArray is left untouched.</li> <li>If no data are available, the matching element is set to NULL.   If the timeout is reached (or in case of error), there is no need to modify the connArray elements.</li> </ul> <p>When the application needs to be very responsive, this function is a good place to monitor application specific events without using a very short timeout in <code>iowa_step()</code>. For instance, the sample server waits for keyboard events here.</p> <p>It is possible that IOWA calls <code>iowa_system_connection_select()</code> with a timeout of zero. In this case, <code>iowa_system_connection_select()</code> must not return an error, and should check if some data are already available on one of the connections.</p> <p>It is also possible that IOWA calls <code>iowa_system_connection_select()</code> with no connections. In this case, <code>iowa_system_connection_select()</code> must not return an error, and should return after the timeout, which may also be zero, expires. This can occur when opening a connection to a LwM2M Server failed and IOWA is configured to wait a specific time before retrying to connect to the LwM2M Server.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_connection_interrupt_select","title":"iowa_system_connection_interrupt_select","text":"<p>Prototype</p> <pre><code>void iowa_system_connection_interrupt_select(void * userData);\n</code></pre> <p>Description</p> <p>A call to <code>iowa_system_connection_interrupt_select()</code> makes <code>iowa_system_connection_select()</code> return immediately if it is currently running.</p> <p>Arguments</p> userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the IOWA_MULTITHREAD_SUPPORT flag.</p> <p>The value returned by <code>iowa_system_connection_select()</code> is zero. Calling <code>iowa_system_connection_interrupt_select()</code> is considered as a preemptive timeout for <code>iowa_system_connection_select()</code>.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_connection_close","title":"iowa_system_connection_close","text":"<p>Prototype</p> <pre><code>void iowa_system_connection_close(void * connP,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_connection_close()</code> closes a connection.</p> <p>Arguments</p> connP The connection as returned by <code>iowa_system_connection_open()</code>. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Note</p> <p>This function is required by IOWA.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_queue_create","title":"iowa_system_queue_create","text":"<p>Prototype</p> <pre><code>void * iowa_system_queue_create(void * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_queue_create()</code> creates a storage queue to offload data from the memory.</p> <p>Arguments</p> userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>A pointer to a user-defined type or NULL in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the LWM2M_STORAGE_QUEUE_SUPPORT or LWM2M_STORAGE_QUEUE_PEEK_SUPPORT flags.</p> <p>The storage queue must store data as separate entities and not as a stream. Ideally, this is a FIFO.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_queue_delete","title":"iowa_system_queue_delete","text":"<p>Prototype</p> <pre><code>void iowa_system_queue_delete(void * queueP,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_queue_delete()</code> closes a storage queue.</p> <p>Arguments</p> queueP A storage queue as returned by <code>iowa_system_queue_create()</code>. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the LWM2M_STORAGE_QUEUE_SUPPORT or LWM2M_STORAGE_QUEUE_PEEK_SUPPORT flags.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_queue_enqueue","title":"iowa_system_queue_enqueue","text":"<p>Prototype</p> <pre><code>int iowa_system_queue_enqueue(void * queueP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_queue_enqueue()</code> stores data in a storage queue.</p> <p>Arguments</p> queueP A storage queue as returned by <code>iowa_system_queue_create()</code>. buffer The data to store. length The length of the data in bytes. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>The number of stored bytes or a negative number in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the LWM2M_STORAGE_QUEUE_SUPPORT or LWM2M_STORAGE_QUEUE_PEEK_SUPPORT flags.</p> <p>The data must be stored as a single entity.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_queue_dequeue","title":"iowa_system_queue_dequeue","text":"<p>Prototype</p> <pre><code>size_t iowa_system_queue_dequeue(void * queueP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_queue_dequeue()</code> retrieves an entity from a storage queue or, the provided buffer is too small, it returns the size of the next entity to retrieve.</p> <p>Arguments</p> queueP A storage queue as returned by <code>iowa_system_queue_create()</code>. buffer A buffer to store the retrieved data. This can be nil. length The length of the buffer in bytes. This can be zero. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>The size in bytes of retrieved entity or zero if the queue is empty or in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the LWM2M_STORAGE_QUEUE_SUPPORT flag.</p> <p>If the provided buffer is nil or too small to contain the entity to retrieve, the entity is not removed from the queue.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_queue_peek","title":"iowa_system_queue_peek","text":"<p>Prototype</p> <pre><code>size_t iowa_system_queue_peek(void * queueP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_queue_peek()</code> peeks an entity from a storage queue or, if the provided buffer is too small, it returns the size of the next entity to peek.</p> <p>Arguments</p> queueP A storage queue as returned by <code>iowa_system_queue_create()</code>. buffer A buffer to store the retrieved data. This can be nil. length The length of the buffer in bytes. This can be zero. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>The size in bytes of peeked entity or zero if the queue is empty or in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the LWM2M_STORAGE_QUEUE_PEEK_SUPPORT flag.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_queue_remove","title":"iowa_system_queue_remove","text":"<p>Prototype</p> <pre><code>void iowa_system_queue_remove(void * queueP,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_queue_remove()</code> removes the first entity of a storage queue.</p> <p>Arguments</p> queueP A storage queue as returned by <code>iowa_system_queue_create()</code>. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the LWM2M_STORAGE_QUEUE_PEEK_SUPPORT flag.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_queue_backup","title":"iowa_system_queue_backup","text":"<p>Prototype</p> <pre><code>size_t iowa_system_queue_backup(void *queueP,\nuint8_t *buffer,\nsize_t length,\nvoid *userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_queue_backup()</code> returns a blob of data necessary to recreate a storage queue, or if the provided buffer is too small, the size of this blob of data.</p> <p>Arguments</p> queueP A storage queue as returned by <code>iowa_system_queue_create()</code>. buffer A buffer to store the blob of data. This can be nil. length The length of buffer in bytes. This can be zero. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>The size in bytes of the blob of data to save or zero in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the IOWA_STORAGE_CONTEXT_SUPPORT flag and with the LWM2M_STORAGE_QUEUE_SUPPORT or LWM2M_STORAGE_QUEUE_PEEK_SUPPORT flags.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_queue_restore","title":"iowa_system_queue_restore","text":"<p>Prototype</p> <pre><code>void *iowa_system_queue_restore(uint8_t *buffer,\nsize_t length,\nvoid *userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_queue_restore()</code> recreates a storage queue from a blob of data.</p> <p>Arguments</p> buffer A buffer containing the blob of data returned by <code>iowa_system_queue_backup()</code>. length The length of buffer in bytes. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>A pointer to a user-defined type or NULL in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the IOWA_STORAGE_CONTEXT_SUPPORT flag and with the LWM2M_STORAGE_QUEUE_SUPPORT or LWM2M_STORAGE_QUEUE_PEEK_SUPPORT flags.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_store_context","title":"iowa_system_store_context","text":"<p>Prototype</p> <pre><code>size_t iowa_system_store_context(uint8_t *bufferP,\nsize_t length,\nvoid *userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_store_context()</code> stores the IOWA context.</p> <p>Arguments</p> bufferP The destination buffer. length Length of the buffer. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>The number of stored bytes or a zero in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the IOWA_STORAGE_CONTEXT_SUPPORT flag.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_retrieve_context","title":"iowa_system_retrieve_context","text":"<p>Prototype</p> <pre><code>size_t iowa_system_retrieve_context(uint8_t **bufferP,\nvoid *userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_retrieve_context()</code> retrieves an IOWA context.</p> <p>Arguments</p> bufferP The buffer containing the retrieved data. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>The size in bytes of retrieved data or zero if there is nothing or in case of error.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <ul> <li>This function is required only if IOWA is built with the IOWA_STORAGE_CONTEXT_SUPPORT flag.</li> <li>bufferP must be allocated by the function. The buffer will next be freed by IOWA internally.</li> </ul>"},{"location":"content/AbstractionLayer.html#iowa_system_mutex_lock","title":"iowa_system_mutex_lock","text":"<p>Prototype</p> <pre><code>void iowa_system_mutex_lock(void * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_mutex_lock()</code> locks a mutex for the current thread.</p> <p>Arguments</p> userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the IOWA_MULTITHREAD_SUPPORT flag.</p> <p>IOWA uses only one mutex.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_mutex_unlock","title":"iowa_system_mutex_unlock","text":"<p>Prototype</p> <pre><code>void iowa_system_mutex_unlock(void * userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_mutex_unlock()</code> releases a mutex.</p> <p>Arguments</p> userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the IOWA_MULTITHREAD_SUPPORT flag.</p> <p>IOWA uses only one mutex.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_random_vector_generator","title":"iowa_system_random_vector_generator","text":"<p>Prototype</p> <pre><code>int iowa_system_random_vector_generator(uint8_t *randomBuffer,\nsize_t size,\nvoid *userData);\n</code></pre> <p>Description</p> <p><code>iowa_system_random_vector_generator()</code> stores random values to a preallocated vector.</p> <p>Arguments</p> randomBuffer The generated random vector. size The size of the vector. userData The argument passed to <code>iowa_init()</code>. <p>Return Value</p> <p>A code indicating if the vector has been generated:</p> <ul> <li>0 if the vector has been generated successfully.</li> <li>Another value if an error occurred.</li> </ul> <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the IOWA_SECURITY_LAYER_SUPPORT flag.</p>"},{"location":"content/AbstractionLayer.html#iowa_system_security_data","title":"iowa_system_security_data","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_system_security_data(const uint8_t *peerIdentity,\nsize_t peerIdentityLen,\niowa_security_operation_t securityOp,\niowa_security_data_t *securityDataP,\nvoid *userDataP);\n</code></pre> <p>Description</p> <p><code>iowa_system_security_data()</code> is a function used by the security layer to CREATE, DELETE or READ the security data.</p> <p>Arguments</p> peerIdentity The identity associating to the peer (can be a URI on client side, or the PSK identity on server side, etc). peerIdentitySize Size of the identity. securityOp The security operation. securityDataP The security data. userDataP The argument passed to <code>iowa_init()</code>. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_404_NOT_FOUND the security data based on peerIdentity has not been found (only when the security operation is not <code>IOWA_SEC_CREATE</code>). IOWA_COAP_406_NOT_ACCEPTABLE the security data based on peerIdentity already exists (only when the security operation is <code>IOWA_SEC_CREATE</code>). IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. <p>Header File</p> <p>iowa_platform.h</p> <p>Notes</p> <p>This function is required only if IOWA is built with the IOWA_SECURITY_LAYER_SUPPORT flag or the IOWA_COAP_OSCORE_SUPPORT flag.</p> <p>The IOWA_SEC_DELETE operation is only used if a IOWA_SEC_CREATE operation happened. The IOWA_SEC_CREATE operation is only used on bootstrapping.</p> <p>Regarding the memory allocation:</p> <ul> <li>On a IOWA_SEC_CREATE operation, the data is allocated by the stack. So the deallocation MUST not be done by the application.</li> <li>On a IOWA_SEC_READ operation, the data if needed is allocated by the application. The stack does not deallocate it. That's why after a IOWA_SEC_READ operation, the function <code>iowa_system_security_data</code> is called with IOWA_SEC_FREE to allow the application to deallocate the memory if needed.</li> </ul> <p>peerIdentity is always a character string encoded in UTF-8 without the Null-terminated string:</p> <ul> <li>On a LwM2M Client, this is the LwM2M Server URI or the Bootstrap Server URI.</li> <li>On Server, this is Client Hint Identity.</li> </ul>"},{"location":"content/ApplicationStorage.html","title":"Application storage","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/Bootstrap.html","title":"Bootstrap","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/BootstrapServerAPI.html","title":"Bootstrap Server Mode API Reference","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/Building.html","title":"Samples Compilation","text":""},{"location":"content/Building.html#on-linux","title":"On Linux","text":"<p>Prerequisites: An x86-64 computer with a Linux distribution installed, the <code>cmake</code> utility, the <code>make</code> utility and a C compiler.</p> <ol> <li>Create a build folder</li> </ol> <p><code>mkdir build</code></p> <ol> <li>Go to this folder</li> </ol> <p><code>cd build</code></p> <ol> <li>Launch cmake in debug mode</li> </ol> <p><code>cmake -DCMAKE_BUILD_TYPE=Debug ..</code></p> <p>(the last parameter point to the folder containing the CMakeLists.txt file of your target. In this case the one at the root of the repo including all the samples)</p> <ol> <li>Build the client and the server</li> </ol> <p><code>make -j 4</code></p> <p>( the <code>-j 4</code> parameter enables four parallel compilations)</p> <p>After making some modifications to the code, only the step 4 is required.</p>"},{"location":"content/Building.html#on-windows","title":"On Windows","text":""},{"location":"content/Building.html#using-visual-studio-code","title":"Using Visual Studio Code","text":"<ol> <li>Install the Microsoft C++ compiler as explained here: https://docs.microsoft.com/en-us/cpp/build/building-on-the-command-line?view=vs-2019</li> <li>Select the \"Build Tools for Visual Studio 2019\".</li> <li>In the Installer, make sure the following optional features are checked:<ul> <li>MSVC v142 - VS 2019 C++ x64/x86 build tools (Note that the version may differ)</li> <li>Windows 10 SDK</li> <li>C++ CMake tools for Windows</li> </ul> </li> <li>Install Visual Studio Code from https://code.visualstudio.com/</li> <li>Launch Visual Studio Code.</li> <li>Go to the \"Extensions\" panel (Ctrl+Shift+X) on the left side.</li> <li>Install the \"C/C++\", \"CMake\", and \"CMake Tools\" extensions</li> <li>Open the folder containing the IOWA Samples (\"File\" menu -&gt; \"Open Folder...\" or \"Ctrl+K Ctrl+O\")</li> <li>Open the CMake panel on the left side.</li> <li>On the top bar of the CMake panel, click on the icon \"Configure All Projects\".</li> <li>When prompted to select a kit, choose one of the Visual Studio Build Tools.</li> <li>On the top bar of the CMake panel, click on the icon \"Build All Projects\".</li> <li>Click on the sample of your choice.</li> <li>Right-click on the application and select \"Run in terminal\"</li> </ol>"},{"location":"content/Building.html#using-visual-studio-with-c-support","title":"Using Visual Studio with C++ support.","text":"<p>Visual Studio version must be at least 2017 for the CMake support.</p> <ol> <li>In the Visual Studio menu bar, go to \"File\", \"Open\", \"Folder\". Select the IOWA Samples folder.</li> <li>In the \"Solution Explorer\" windows, right-click on \"CMakeList.txt\" and choose \"Set as Startup Item\".</li> <li>In the Visual Studio menu bar, go to \"Build\", \"Build All\"</li> </ol>"},{"location":"content/Changelog.html","title":"Changelog","text":""},{"location":"content/Changelog.html#2023-xxpreview1","title":"2023-XX.preview1","text":"<p>This is a preview release for prototyping purpose only. This changelog is subject to change.</p> <p>New Features</p> <ul> <li>When the last block of a response is sent to a LwM2M Server, IOWA now emits an event IOWA_EVENT_RESPONSE_LAST_BLOCK_SENT.</li> <li>IOWA now features the Virtual Observe Notify Object (ID: 22) by enabling the flag IOWA_SUPPORT_VIRTUAL_OBSERVE_NOTIFY_OBJECT.</li> <li>IOWA now supports the version 1.2 of the LightweightM2M protocol by setting the configuration flag LWM2M_VERSION_1_2_SUPPORT.</li> <li>The LwM2M Registration may contain the list of supported data encoding formats by setting the configuration flag LWM2M_REGISTRATION_CONTENT_TYPE_SUPPORT.</li> </ul> <p>Behaviour Changes</p> <ul> <li>In the registration payload, the Object version is now indicated in a less optimized way to improve compatibility with legacy LwM2M Servers.</li> </ul> <p>Samples Changes</p> <ul> <li>New sample: Context Storage Client illustrating how to save and store the IOWA context for hibernating devices.</li> <li>New sample: Virtual Observe Client illustrating how to support the Virtual Observe Notify Object.</li> <li>Samples using Mbed TLS are now using versions 3.3.0 and 2.28.2.</li> <li>All samples are now using cmake version 3.16. </li> <li>In the sample Baseline Server, the <code>iowa_monitor_callback_t</code> callback displays more details.</li> </ul> <p>SDK Changes</p> <ul> <li>The deprecated API <code>iowa_server_configuration_set()</code> was removed.</li> <li>The deprecated define INVALID_SENSOR_ID was removed.</li> </ul>"},{"location":"content/Changelog.html#2022-055","title":"2022-05.5","text":"<p>This is a Long-Term Support release.</p> <p>Bug Fixes</p> <ul> <li>Fix a bug where <code>iowa_client_send_data()</code> and <code>iowa_client_send_sensor_data()</code> were returning an error if a Registration Update was in progress.</li> <li>When a Registration Update is required, fix a bug where the connection to the LwM2M Server was not always automatically re-opened if previously closed.</li> <li>Fix a bug where required notifications were not immediately sent in a multhreaded environment after calling <code>iowa_client_notification_lock()</code> with the enter argument set to false.</li> <li>Fix a bug where <code>iowa_clock_reset()</code> could terminate the registration to the LwM2M Servers.</li> <li>Fix a bug where IOWA would return an error if the response payload to a Discover operation is larger than 1024 bytes.</li> </ul> <p>Behavior Changes</p> <ul> <li>In the Registration and Registration Update payload, remove some LwM2M Object version indications which were redundant with the LwM2M protocol version indication. </li> </ul>"},{"location":"content/Changelog.html#2022-054","title":"2022-05.4","text":"<p>This is a Long-Term Support release.</p> <p>Bug Fixes</p> <ul> <li>When the configuration flag IOWA_STORAGE_CONTEXT_MANUAL_HEARTBEAT_ON_LOAD is set, fix a possible null pointer dereference when calling some IOWA APIs after calling <code>iowa_load_context()</code> but before calling <code>iowa_client_send_heartbeat()</code> or <code>iowa_clock_reset()</code>.</li> <li>Fix a possible invalid memory access during Software Activation if the targeted Software Management Object Instance is not linked to at least one Software Component Object Instance.</li> <li>Fix a bug where the Software Management activation was not impacting all linked Software Components.</li> </ul>"},{"location":"content/Changelog.html#2022-053","title":"2022-05.3","text":"<p>This is a Long-Term Support release.</p> <p>Bug Fixes</p> <ul> <li>When IOWA is used in Client mode, fix the saving and loading of the CoAP retransmission parameters of a LwM2M Server when using <code>iowa_save_context()</code> and <code>iowa_load_context()</code>.</li> <li>When IOWA is used in Client mode, when loading a LwM2M Server using <code>iowa_load_context()</code>, use the default values of the CoAP retransmission parameters if they are not present in the context.</li> <li>The behaviour change in <code>iowa_load_context()</code> from release 2022-05.2 is now under the configuration flag IOWA_STORAGE_CONTEXT_MANUAL_HEARTBEAT_ON_LOAD.</li> </ul> <p>SDK Changes</p> <ul> <li>Add a new sample illustrating how to save and load the IOWA context: Context Storage Client.</li> </ul>"},{"location":"content/Changelog.html#2022-052","title":"2022-05.2","text":"<p>This is a Long-Term Support release.</p> <p>Bug Fixes</p> <ul> <li>Fix a bug where the error code was not set in the event details for events IOWA_EVENT_REG_FAILED and IOWA_EVENT_REG_UPDATE_FAILED.</li> <li>Fix a bug where <code>iowa_clock_reset()</code> was not always considering current registrations.</li> <li>When IOWA is used in Server mode with OSCORE, fix an interoperability issue during the Security Context Derivation (aka \"Appendix B.2\").</li> <li>Fix a bug where <code>iowa_client_disable_server()</code> was not working as intended when the configuration flags IOWA_SERVER_SUPPORT_RSC_DISABLE_TIMEOUT or IOWA_SERVER_RSC_DISABLE_TIMEOUT_REMOVE are defined.</li> <li>Fix a possible memory leak when accessing timestamped values from the IPSO Objects. </li> <li>When IOWA is used in Server mode, fix a bug where the data received from a Send operation was not always having the correct type.</li> <li>Fix a possible invalid memory access when receiving a Bootstrap-Discover command on an Object.</li> </ul> <p>Behavior Changes</p> <ul> <li><code>iowa_load_context()</code> no longer automatically sends a Registration Update to loaded LwM2M Servers, leaving the control to the application which can call either <code>iowa_client_send_heartbeat()</code> or <code>iowa_clock_reset()</code>.</li> </ul> <p>SDK Changes</p> <ul> <li>IOWA SDK now provides an Object Skeleton Generator to ease the development of custom LwM2M Objects.  </li> </ul>"},{"location":"content/Changelog.html#2022-051","title":"2022-05.1","text":"<p>This is a Long-Term Support release.</p> <p>Bug Fixes</p> <ul> <li>Fix some interoperability issues on OSCORE when the partial IV is greater than 255.</li> <li>In the case of a decryption failure of an OSCORE protected request, fix a bug where IOWA was trying to protect a response.</li> <li>Fix a bug where IOWA was trying to decrypt a truncated OSCORE protected message.</li> <li>Fix a bug where some LwM2M Servers configured by a LwM2M Bootstrap Server were not using the right default CoAP timer values.</li> <li>Fix a possible out of bound access during a Read operation when the configuration flag LWM2M_CLIENT_ASYNCHRONOUS_OPERATION_SUPPORT is set.</li> <li>IOWA now correctly emits registration related events when <code>iowa_system_connection_open()</code> returns an error.</li> </ul> <p>Behavior Changes</p> <ul> <li>The API <code>iowa_client_disable_server()</code> can now be used to reset the state of LwM2M Server IOWA failed to register to. In such a case, IOWA will try to register again when the timeout expires. </li> </ul> <p>SDK Changes</p> <ul> <li>Simplify the retrieval of external libraries in the samples by using a direct download instead of a git clone.</li> </ul>"},{"location":"content/Changelog.html#2022-05","title":"2022-05","text":"<p>This is a Long-Term Support release.</p> <p>Upcoming Breaking Change</p> <p>With the next release of IOWA, the configuration flags IOWA_SECURITY_LAYER_TINYDTLS, IOWA_SECURITY_LAYER_MBEDTLS, IOWA_SECURITY_LAYER_MBEDTLS_PSK_ONLY, IOWA_SECURITY_LAYER_MBEDTLS_OSCORE_ONLY will be deprecated. The configuration flag IOWA_SECURITY_LAYER_USER will be the default.</p> <p>The samples secure_client_mbedtls3, secure_client_mbedtls2, and secure_client_tinydtls provides a feature equivalent integration with Mbed TLS and tinydtls. They also serve as a basis for integration with other TLS/DTLS libraries.</p> <p>New Features</p> <ul> <li>It is now possible to set the access rights of a LwM2M Server to all known Objects at once by calling <code>iowa_client_acl_rights_server_set()</code> with IOWA_LWM2M_ID_ALL as the Object ID.</li> <li>Add a new API <code>iowa_client_get_server_configuration()</code> to retrieve a LwM2M Server setting.</li> <li>More LwM2M Server settings are accessible, including the CoAP retransmission parameters. See <code>iowa_server_setting_id_t</code>.</li> <li>IOWA generates new events of type IOWA_EVENT_SERVER_SETTING_CHANGED when a LwM2M Server setting is modified by a LwM2M operation on the LwM2M Server Object. See <code>iowa_event_t</code>.</li> <li>The provided implementations of the Location Object (ID: 6) and the IPSO Location Object (ID: 3336) have new APIs <code>iowa_client_location_update_with_time()</code>, <code>iowa_client_location_update_full_with_time()</code>, <code>iowa_client_gps_update_location_with_time()</code>, and <code>iowa_client_gps_update_location_full_with_time()</code> allowing the caller to specify the measurement timestamp.</li> <li>Add a new API `iowa_coap_peer_proxied_get() to perform a GET through a forward-proxy.</li> </ul> <p>Breaking Change</p> <ul> <li>The value IOWA_IPSO_LEVEL_CONTROL is no longer part of the enumeration <code>iowa_IPSO_ID_t</code>. To manipulate an IPSO level sensor, please use the IPSO Dimmer Object APIs. Note that the IPSO Level Control Object was renamed \"Dimmer\" in the LwM2M Registry.</li> </ul> <p>Behavior Changes</p> <ul> <li>When a Response is bigger than the connection MTU, and IOWA_COAP_BLOCK_SUPPORT is defined, IOWA will now return the first block of the response instead of returning a 4.13 (Request Entity Too Large) code.</li> <li>The <code>iowa_server_info_t</code> structure now contains the LwM2M protocol version used by the LwM2M Server.</li> </ul> <p>SDK Changes</p> <ul> <li>Some internal functions were renamed to avoid conflicts.</li> <li>Add three new samples illustrating how to integrate with a DTLS/TLS security library, one using Mbed TLS 3.1, one using Mbed TLS 2.28, and one using tinydtls.</li> <li>The sample custom_object_multiple_instances, illustrating how to manage multiple instances of a custom LwM2M Object, was simplified and documented. </li> </ul> <p>Bug Fixes</p> <ul> <li>Fix a bug where corrupted data retrieved from the notification storage queues may lead to out-of-range memory accesses or value underflows.</li> <li>Fix a bug where a Notification bigger than the connection MTU was not correctly sent as the first block of a CoAP Block-Transfer.</li> <li>Fix a potential crash when handling an Observation on a multiple resource with no instance in Clients with no support of the Observe-Composite operation.</li> <li>Fix a bug where IOWA was returning an error to the LwM2M Server cancelling the Firmware Update process. The Firmware Update process was however cancelled correctly.</li> <li>Fix a bug where a Server lifetime or binding modified by calling <code>iowa_client_set_server_configuration()</code> was not automatically saved when IOWA_STORAGE_CONTEXT_AUTOMATIC_BACKUP is defined.</li> <li>Fix a bug where the Access Control List Object Instances where not correctly restored when loading a context. The saved access control rights were however still enforced.</li> </ul>"},{"location":"content/Changelog.html#2022-01","title":"2022-01","text":"<p>New Features</p> <ul> <li>The <code>iowa_device_info_t</code> structure now allows to set the \"Memory Total\" Resource (ID: 22) and \"Memory Free\" Resource (ID: 10) of the Device Object.</li> <li>The <code>iowa_device_info_t</code> structure now supports a new optional flag IOWA_DEVICE_RSC_EXTERNAL_INFO enabling the \"ExtDevInfo\" Resource (ID: 22) the Device Object. The content of this Resource can be modified by using the API <code>iowa_client_update_device_external_information()</code>.</li> <li>The application can disable or enable a LwM2M Server using the APIs <code>iowa_client_disable_server()</code> and  <code>iowa_client_enable_server()</code>.</li> <li>IOWA implements non-standard features required to interact with the Verizon LwM2M Servers. To enable these features, the compilation flag IOWA_VERIZON_OPERATOR_SUPPORT must be set.</li> <li>Add a new API <code>iowa_coap_message_get_content_total_size()</code> to retrieve the content total size during a CoAP block-wise transfer.</li> <li><code>iowa_client_firmware_update_set_status()</code> now accepts custom status codes.</li> <li>When using reliable notifications, IOWA now emits events IOWA_EVENT_OBSERVATION_NOTIFICATION_ACKED and IOWA_EVENT_OBSERVATION_NOTIFICATION_FAILED to inform of the success or failure of the notification delivery.</li> <li>The IOWA_EVENT_REG_FAILED and IOWA_EVENT_REG_UPDATE_FAILED events now contain details on the reason of the failure.</li> <li>Add new APIs <code>iowa_client_object_get_values()</code> and <code>iowa_client_object_release_values()</code> allowing the client application to retrieve the values of readable Resources.</li> <li>Add support of CoAP over WebSocket transport, enabled by IOWA_WEBSOCKET_SUPPORT. Note that this transport is not part of the LwM2M standard and may work only with IoTerop's ALASKA device management platform.</li> </ul> <p>Behavior Changes</p> <ul> <li>The <code>iowa_server_info_t</code> structure now contains the Security, Server, and OSCORE Object Instances used by the LwM2M Server account.</li> <li>For streamable Resources, the <code>iowa_lwm2m_data_t</code> structure now has a <code>value::asBlock::totalSize</code> field.</li> <li>When called with the IOWA_FW_PACKAGE_RESET command, the <code>iowa_fw_write_callback_t</code>  now indicates the total length in bytes of the Firmware Package if known.</li> <li>When called with the IOWA_SW_PKG_COMMAND_RESET command, the <code>iowa_sw_pkg_write_callback_t</code>  now indicates the total length in bytes of the Software Package if known.</li> <li>When a LwM2M-Bootstrap Server or LwM2M Server's URI contains a path and/or a query part, these parts are included in the Bootstrap and Registration requests.</li> <li>The LwM2M Bootstrap-Request will now fail if the transmission was successful but no response was received after a delay set to EXCHANGE_LIFETIME from RFC7252.</li> <li>When receiving an Observation request with the same token and targets as an existing Observation, IOWA no longer emits an IOWA_EVENT_OBSERVATION_NOTIFICATION event.</li> </ul> <p>SDK Changes</p> <ul> <li>Add a new compilation setting IOWA_LOG_BUFFER_LIMIT to limit the number of bytes logged for memory buffers.</li> <li>Add a new sample device_info_client illustrating how to modify the information exposed in the Device Object.</li> <li>Add a new sample fw_update_push_client illustrating how to enable the Firmware Update Object and support its \"push\" method.</li> <li>Add a new sample fw_update_pull_client illustrating how to enable the Firmware Update Object and support its \"pull\" method.</li> <li>Add a new sample fw_coap_download_client illustrating how to perform a CoAP GET using the IOWA CoAP APIs.</li> <li>Add a new sample fw_coap_block_client illustrating how to handle CoAP block-wise transfers when receiving the response to a CoAP GET.</li> <li>Add a new sample websockets_client illustrating the usage of the WebSocket transport.</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix a bug where the event IOWA_EVENT_BS_PENDING was not always received when a Bootstrap HoldOff time was set.</li> <li>Fix a bug where the event IOWA_EVENT_REG_FAILED was not always received after a failed registration attempt.</li> <li>Fix a bug where the Resource Error Code (ID: 11) in the Device Object (ID: 3) was missing the user-defined error codes set by <code>iowa_client_set_device_error_code()</code>.</li> <li>When TCP as a transport, fix a bug where the notification storage queue was not always fully flushed if Notification storage is enabled by LWM2M_STORAGE_QUEUE_PEEK_SUPPORT.</li> </ul>"},{"location":"content/Changelog.html#2021-062","title":"2021-06.2","text":"<p>This is a Long-Term Support release.</p> <p>Bug Fixes</p> <ul> <li>Fix a bug where an Observation loaded from a saved context was not correct if it was on a URI containing an ID greater than 256.</li> <li>Fix a bug where decoding a LwM2M CBOR payload containing an unknown Resource could be considered as a parsing error.</li> </ul>"},{"location":"content/Changelog.html#2021-061","title":"2021-06.1","text":"<p>This is a Long-Term Support release.</p> <p>Behavior Changes</p> <ul> <li>The <code>iowa_server_info_t</code> structure now contains the LwM2M Server status.</li> <li>During a Bootstrap, the event IOWA_EVENT_BS_FINISHED is now generated after updating the LwM2M Servers list accessible throught <code>iowa_client_get_server_array()</code>.</li> </ul> <p>SDK Changes</p> <ul> <li>Adding a new Security helper function <code>iowa_security_session_get_connection()</code>.</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix a bug where a CoAP RESET message received for a CoAP CONFIRMABLE Notification was not always interpreted as a Cancel Observation operation.</li> <li>Fix a bug in the Firmware Update Object \"push\" method where the last block of a package could be wrongly discarded. </li> </ul>"},{"location":"content/Changelog.html#2021-06","title":"2021-06","text":"<p>This is a Long-Term Support release.</p> <p>New Features</p> <ul> <li>Add support of the LwM2M CBOR data format defined in the LwM2M 1.2 Technical Specification. This data format can be used with any version of the LwM2M protocol. See LWM2M_SUPPORT_LWM2M_CBOR.</li> <li>Add support of the Bootstrap-Pack operation defined in the LwM2M 1.2 Technical Specification. See LWM2M_BOOTSTRAP_PACK_SUPPORT.</li> <li>Add a new system abstraction function <code>iowa_system_connection_open_server()</code>.</li> </ul> <p>Behavior Changes</p> <ul> <li>The memory used by stored CoAP Acknowledgements can now be limited by defining the compilation flag IOWA_COAP_ACK_MEMORY_LIMIT.</li> <li>Better handling of an empty Package URI in the Firmware Update Object.</li> </ul> <p>SDK Changes</p> <ul> <li>New compilation flags related to optional Resources in IOWA-implemented LwM2M Object: IOWA_REMOVE_ALL_OPTIONAL_RESOURCES enables only the mandatory Resources. Then new compilation flags enable the optional Resources. This change is backward-compatible and previous flags, removing unwanted optional Resources, are still usable. See Object Resources.</li> <li>The IOWA documentation is now in HTML format.</li> <li>Provide new samples which are simpler and focused on a particular use-case. The previous ones are still present in the <code>samples/legacy</code> folder.</li> </ul> <p>Bug Fixes</p> <ul> <li>Multiple fixes and improvements in the OSCORE feature following the OMA LwM2M testfest.</li> <li>Fix a bug where a COAP_EVENT_DISCONNECTED was generated when failing to receive data on a UDP connection.</li> <li>In mbedtls adaptation layer for the server-side, handle peer reconnecting with the same source IP address and port.</li> <li>In mbedtls adaptation layer, return the correct error code if no data is available on the connection.</li> <li>Fix a possible ghost socket on the server side when the security handshake failed.</li> <li>Fix a possible invalid memory access on the Bootstrap Server side when a Client aborts the bootstrap sequence then reconnects.</li> <li>Fix a possible wrong payload size when sending a CoAP request containing a Block2 option.</li> <li>Fix a bug where the version of an Object may appear twice in a Discover reply.</li> <li>Fix a bug related to the enabling of the Timeout Resource (ID: 3) of the AT Command Object (ID: 10251).</li> <li>Fix a bug where duplicated fields in a SenML JSON or SenML CBOR payload were not always detected.</li> <li>Fix a Server side bug where the expected type of the data values received from a Send operation was not checked correctly.</li> <li>Fix a bug in the IPSO Dimmer Object (ID: 3343) where the list of enabled optional Resources was not always correct.</li> </ul>"},{"location":"content/Changelog.html#2021-01","title":"2021-01","text":"<p>New Features</p> <ul> <li>Add a new API <code>iowa_client_firmware_update_change_state()</code> to set the Firmware Update state machine state after a reboot of the device.</li> <li>\"Streamable\" Resources are now writable. See  Custom Object Streaming APIs section.</li> <li>Add the possibility to set LwM2M custom Object version with <code>iowa_client_object_set_configuration()</code>.</li> <li>It is now possible to declare an alternate path in the Client by setting the field <code>altPath</code> in the <code>iowa_device_info_t</code>structure.</li> </ul> <p>Behavior Changes</p> <ul> <li>When the value of a Resource under Observation changes before the \"Minimal Period\" elapsed, a notification is no longer sent at the end of the \"Minimal Period\" delay.</li> <li>Before calling the data callback of a custom Object for an IOWA_DM_READ, all values in the <code>iowa_lwm2m_data_t</code> are initialized to zero.</li> <li>Log output of buffer values (e.g. CoAP payload) is now done by 16-byte blocks instead of byte by byte.</li> <li>Better handling of the Replace and Partial Update variants of the Write operation on a custom Object Resource Instances.  See notes in the <code>iowa_RWE_callback_t()</code> description.</li> <li>When starting to send a large payload using CoAP block-transfer, IOWA now includes the Size1 or Size2 option.</li> <li>IOWA returns the correct error code when a LwM2M 1.1 Server performs the Write-Attributes operation on a non-existing Resource Instance.</li> <li>For LwM2M Client applications, when receiving a request using CoAP block-transfer not targeting a \"streamable\" resource, IOWA now takes care of the reassembly.</li> </ul> <p>SDK Changes</p> <ul> <li>Improved support of compilation on 8-bit architectures.</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix a potential deadlock in <code>iowa_client_send_data()</code>.</li> <li>Fix IOWA build when both MBEDTLS_SSL_DTLS_CONNECTION_ID and IOWA_THREAD_SUPPORT are enabled.</li> <li>Fix a bug where IOWA was not always complying with the Block2 CoAP option in a READ operation (i.e. CoAP GET).</li> <li>Fix a bug where IOWA could potentially send a SZX of 7, a reserved value, during a CoAP block-transfer.</li> <li>Fix a possible null pointer dereference when calling <code>iowa_security_get_server_session()</code> on a disconnected LwM2M Server.</li> <li>Fix a possible memory corruption during an Observe-Composite operation on Resources with incompatible attributes.</li> <li>Fix a bug where receiving an Observe operation with the same token as an existing Observation was creating a new Observation instead of replacing the existing one.</li> <li>Fix a possible buffer overflow during the data encoding in the legacy LwM2M 1.0 JSON format.</li> <li>Fix writing on the eDRX parameters Resources of the Cellular Connectivity Object.</li> </ul>"},{"location":"content/Changelog.html#2020-091","title":"2020-09.1","text":"<p>Behavior Changes</p> <ul> <li>When an Observation is set on asynchronous resources, the Client event callback is called with an IOWA_EVENT_READ event.</li> <li>When using mbed TLS, the MTU is declared during the DTLS/TLS handshake.</li> </ul> <p>SDK Changes</p> <ul> <li><code>iowa_server_configuration_set()</code> is deprecated and renamed <code>iowa_client_set_server_configuration()</code>.</li> <li><code>iowa_dimmer.h</code> can now be imported without importing first <code>iowa_ipso.h</code>.</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix a possible core dump when IOWA reconnects a disconnected CoAP peer.</li> <li>Fix a bug where the Client was rejecting an Object Instance creation using TLV if the payload was not containing the new Object Instance ID.</li> <li>Fix a possible memory leak if the registration reply from the Server does not contain a location path.</li> <li>Avoid a compilation error when IOWA_DEVICE_RSC_FACTORY_RESET_REMOVE is defined.</li> <li>When using mbed TLS, fix a bug preventing to send a payload larger than 16384 bytes over TLS.</li> </ul>"},{"location":"content/Changelog.html#2020-09","title":"2020-09","text":"<p>New Features</p> <ul> <li>Add two APIs <code>iowa_client_get_server_count()</code> and <code>iowa_client_get_server_array()</code> to retrieve the bootstrapped and declared LwM2M Servers.</li> <li>Add an API <code>iowa_server_configuration_set()</code> to update the lifetime and the queue mode of a LwM2M Server.</li> <li>Add an API <code>iowa_client_update_device_information()</code> to update the device information at runtime.</li> <li>Add a new API <code>iowa_clock_reset()</code> to inform IOWA of clock issues.</li> <li>The API <code>iowa_client_set_device_error_code()</code> now allow user-defined error codes.</li> </ul> <p>Behavior Changes</p> <ul> <li>For LwM2M Server applications, IOWA now takes care of the reassembly of CoAP block transfers.</li> <li> <p>Events IOWA_EVENT_OBSERVATION_STARTED and IOWA_EVENT_OBSERVATION_CANCELED are now emitted after having updated the internal IOWA context.</p> </li> <li> <p>CoAP block-wise transfers use the negotiated block size during all the block-wise transfer.</p> </li> <li>In the AT Command Object, the strings passed to <code>iowa_client_at_command_set_response()</code> are appended to the existing ones instead of replacing them.</li> <li>In CoAP messages, URI-Path option is not included when URI is \"/\".</li> <li>In the LwM2M layer, MAX_TRANSMIT_WAIT has a duration of 20 seconds for TCP peers and 120 seconds for LoRaWAN peers.</li> <li>The return value of <code>iowa_system_security_data()</code> is no longer checked when IOWA calls it for an IOWA_SEC_FREE operation.</li> <li>Add multiple parameters checks in Objects APIs.</li> <li>In <code>iowa_client_light_control_set_state()</code>, <code>iowa_system_gettime()</code> is called only if the resource \"On Time\" is enabled.</li> <li>The LwM2M Client now ignores unexpected CoAP responses.</li> </ul> <p>SDK Changes</p> <ul> <li>Remove Dimmer object from IPSO objects and add its own API.</li> <li>All <code>iowa_apn_connection_profile_details_t</code> integer members are now unsigned.</li> <li><code>iowa_device_time_info_t::currentTime</code> was changed from <code>uint32_t</code> to <code>int32_t</code>.</li> <li>Included mbed TLS was updated to version 2.24.0.</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix a bug when calling <code>iowa_flush_before_pause()</code> on TCP connections.</li> <li>Fix a possible deadlock when calling <code>iowa_system_random_vector_generator()</code>.</li> <li>Fix a possible core dump when reading a Resource Instance containing a nil value.</li> <li>Fix a buffer overflow in serialization of integer CoAP option with a number greater than 269.</li> <li>Fix a bug when parsing large RFC8323 COAP headers.</li> <li>For Bootstrap Server applications, fix a bug where the unexpected disconnection of a TCP Client may lead to an invalid read.</li> <li>Fix a potential invalid read if the Client fails to send its registration message.</li> <li>Fix a possible bug when generating a new token.</li> <li>Fix several bugs when the Client uses CoAP block transfers for the registration message.</li> <li>For LwM2M Server applications, fix a potential stack corruption when the connection type is one of UDP, SMS, or LoRaWAN, and when iowa_system_random_vector_generator() fails.</li> <li>Fix a possible memory leak when creating a new CoAP peer.</li> <li>Fix a possible bug when generating a new token.</li> <li>In several Objects, fix a potential invalid read when string Resources under Observation are modified repeatedly.</li> <li>In the Location and GPS Objects, fix a potential segmentation fault when allocating memory for a string value fails.</li> <li>Fix a possible memory leak when deleting an APN Object Instance.</li> <li>Fix a potential invalid free when calling <code>iowa_client_send_sensor_data()</code>.</li> <li>Fix a Bootstrap-Delete bug when ACL are enabled.</li> </ul>"},{"location":"content/Changelog.html#2020-062","title":"2020-06.2","text":"<p>Bug Fixes</p> <ul> <li>Fix an interoperability bug in SenML JSON related to base64 encoding of opaque values.</li> <li>Fix a potential invalid read when deleting an ACL Object instance.</li> <li>Fix a potential memory leak when creating a new CoAP peer fails.</li> <li>Correct several conversion compiler warnings.</li> <li>Fix an offset error when parsing long CoAP over TCP headers.</li> <li>Fix interoperability issue with CoAP FETCH method when using Block-Transfer.</li> <li>Fix a possible memory leak when deleting an APN Object Instance.</li> </ul>"},{"location":"content/Changelog.html#2020-061","title":"2020-06.1","text":"<p>Behavior Changes</p> <ul> <li>For RFC7252 CoAP connections, e.g. LwM2M over UDP, the initial message ID is now random (using <code>iowa_system_random_vector_generator()</code>).</li> <li>The LwM2M Registration will now fail if the transmission was successful but no response was received after a delay set to EXCHANGE_LIFETIME from RFC7252.</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix a bug when the Current Time resource was read asynchronously.</li> </ul>"},{"location":"content/Changelog.html#2020-06","title":"2020-06","text":"<p>New Features</p> <ul> <li>Add support of the MQTT Broker Object (ID: 18330) and of the MQTT Publication Object (ID: 18831). See MQTT Object API.</li> <li>The CoAP retransmission parameters can be modified at runtime. See <code>iowa_coap_peer_configuration_set()</code>and <code>iowa_coap_peer_configuration_get()</code>.</li> <li>New APIs to retrieve the CoAP peer associated to a LwM2M Server to ease usage of the previous APIs. See <code>iowa_client_get_server_coap_peer()</code>and <code>iowa_client_get_bootstrap_server_coap_peer()</code>.</li> <li>Support of the \"Reset Error Code\" Resource of the Device Object.</li> <li>For Client applications, add a new event when a notification for an Observation was generated and is about to be sent. See IOWA_EVENT_OBSERVATION_NOTIFICATION in iowa_event_type_t.</li> <li>For Client applications, the events related to Observations now include the ID of the specific resource under observation if any.</li> <li>Introduce a new special value IOWA_DEVICE_TIME_SENSOR_ID of an <code>iowa_sensor_t</code>to refer to the Current Time of the Device.</li> </ul> <p>Behavior Changes</p> <ul> <li>The API <code>iowa_client_notification_lock()</code> now also prevents registration updates.</li> <li>The IOWA_EVENT_BS_PENDING event is emitted when connecting to the LwM2M Bootstrap Server instead of after receiving the reply to the Bootstrap-Request operation.</li> <li>The IOWA_EVENT_REG_REGISTERING event is emitted when connecting to the LwM2M Server instead of after sending the Registration message.</li> <li>Returned error codes for Object related APIs are more consistent.</li> <li>Stricter checks of the parameters passed to <code>iowa_client_IPSO_add_sensor()</code>.</li> <li>Improved OSCORE support for a better interoperability.</li> </ul> <p>SDK Changes</p> <ul> <li><code>iowa_client_device_update_battery()</code>can only be called when IOWA is built WITHOUT the flag IOWA_DEVICE_RSC_BATTERY_REMOVE.</li> <li><code>iowa_client_..._device_power_source()</code>can only be called when IOWA is built WITHOUT the flag IOWA_DEVICE_RSC_POWER_SOURCE_REMOVE.</li> <li>The file <code>src/core/iowa_comms.c</code> was removed.</li> <li>INVALID_SENSOR_ID is deprecated and renamed IOWA_INVALID_SENSOR_ID.</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix a bug where an intermediate runtime state of a LwM2M Server was saved when calling <code>iowa_save_context()</code>, preventing resuming.</li> <li>Fix a bug when creating multiple Magnetometer instances with different resources.</li> <li>Fix a bug when creating multiple Light Control instances with different resources.</li> <li>Fix a bug when reading an unknown Resource Instance.</li> <li>Fix a possible memory leak if <code>iowa_coap_peer_new()</code> failed.</li> <li>Fix a possible segmentation fault when an Object Resource value is a nil-string.</li> <li>Fix a bug when receiving a COAP block-transfer message and neither IOWA_COAP_BLOCK_MINIMAL_SUPPORT nor IOWA_COAP_BLOCK_SUPPORT are defined.</li> <li>Fix a bug when updating Magnetometer Object's compass direction.</li> </ul>"},{"location":"content/Changelog.html#2020-036","title":"2020-03.6","text":"<p>Bug Fixes</p> <ul> <li>Fix a bug where an intermediate runtime state of a LwM2M Server was saved when calling <code>iowa_save_context()</code>, preventing resumption.</li> </ul>"},{"location":"content/Changelog.html#2020-035","title":"2020-03.5","text":"<p>Bug Fixes</p> <ul> <li>Fix a bug where switching the resource \"Notification Storing When Disabled or Offline\" to false would stop the Notification queue flushing.</li> <li>Fix a bug where Notifications of canceled Observations were not always removed from the queue in peek mode, blocking other notifications.</li> </ul> <p>Behavior Changes</p> <ul> <li>When receiving an Execute operation with arguments, the LwM2M Client will assume the arguments are encoded using text/plain when the CoAP option content-type is not present.</li> </ul>"},{"location":"content/Changelog.html#2020-034","title":"2020-03.4","text":"<p>Bug Fixes</p> <ul> <li>Fix a race condition issue where simultaneous registration update may generate a registration update failure event.</li> </ul>"},{"location":"content/Changelog.html#2020-033","title":"2020-03.3","text":"<p>Bug Fixes</p> <ul> <li>Fix a memory leak when receiving a block transfer.</li> </ul>"},{"location":"content/Changelog.html#2020-032","title":"2020-03.2","text":"<p>Bug Fixes</p> <ul> <li>Fix a potential issue with the size of the last block of a streamable resource.</li> </ul>"},{"location":"content/Changelog.html#2020-031","title":"2020-03.1","text":"<p>Bug Fixes</p> <ul> <li>Fix a potential deadlock in iowa_client_object_set_mode() when the sensor ID was unknown.</li> <li>Fix a possible wrong behaviour in the FSM of the registration when the Device is registered on the Server but not connected on the Security level.</li> </ul>"},{"location":"content/Changelog.html#2020-03","title":"2020-03","text":"<p>New Features</p> <ul> <li>For Client applications, add a new event when the epmin and epmax attributes are modified by the Server. See IOWA_EVENT_EVALUATION_PERIOD in iowa_event_type_t.</li> <li>Add new helper functions to convert an <code>iowa_sensor_t</code> to an <code>iowa_lwm2m_uri_t</code> and vice versa. See <code>iowa_utils_uri_to_sensor()</code>.</li> <li>Add a new event when the LwM2M Server requests a Read of a LwM2M Objects or custom LwM2M Objects resources which are defined as \"asynchronous\". See <code>iowa_client_object_set_mode()</code>and IOWA_EVENT_READ in iowa_event_type_t.</li> <li>In custom LwM2M Objects, resources can be defined as streamable. See Custom Object Streaming APIs.</li> <li>Add support of the \"Factory Reset\" resource of the Device Object. See<code>iowa_client_factory_reset_callback_t</code>.</li> <li>Add a new CoAP API <code>iowa_coap_block_request_block_number()</code>to ease resuming of Firmware Update download.</li> <li>Add new helper functions to retrieve the security session associated to a LwM2M Server or a LwM2M Client. See <code>iowa_security_get_server_session()</code>.</li> <li>Expose IOWA linked list functions. See Example: Linked List usage.</li> </ul> <p>Behavior Changes</p> <ul> <li>If the registration using LwM2M 1.1 fails, the Client tries to register using LwM2M 1.0.</li> <li>During the Bootstrap procedure, if the LwM2M Bootstrap Server did not provide the security credentials of a LwM2M Server, IOWA checks if credentials are known by the Application. See iowa_security_operation_t.</li> <li>There is now one notification storage queue per LwM2M Server instead of one per Observation. Unsent reliable notifications are no longer stored in memory.</li> <li>IOWA_LWM2M_ID_ALL can be used as parameter in `iowa_client_set_notification_default_periods().</li> <li><code>iowa_client_remove_server()</code>called with IOWA_LWM2M_ID_ALL as parameter, also removes bootstrapped LwM2M Servers.</li> <li>Better handling of NaN and Infinity floating-point values in CBOR.</li> </ul> <p>SDK Changes</p> <ul> <li>IOWA has now internal checks done by using the <code>assert()</code> macro.</li> <li>Add a new flag to use the libc <code>snprintf()</code> when converting to text large floating-point values. See IOWA_USE_SNPRINTF.</li> <li>Rename the header file \"iowa_security_user.h\", \"iowa_security.h\".</li> <li>Clean up cross inclusion of header files.</li> <li>Deprecate several compilation flags. See Deprecated Compilation Flags.</li> <li>Remove some functions deprecated in previous releases: <code>iowa_client_add_lorawan_server()</code>, <code>iowa_server_dm_read()</code>, <code>iowa_server_dm_observe()</code>, <code>iowa_server_dm_observe_cancel()</code>, <code>iowa_server_dm_write()</code>, <code>iowa_server_dm_write_attributes()</code>, and <code>iowa_server_set_content_format()</code>.</li> <li>Prototype of <code>iowa_bearer_selection_update_state_callback_t</code>, <code>iowa_client_bearer_selection_update</code>, <code>iowa_client_cellular_connectivity_update</code>, <code>iowa_cellular_connectivity_update_state_callback_t</code> and <code>iowa_client_connectivity_monitoring_update</code> have been updated to use a pointer to access to the structure.</li> </ul> <p>Bug Fixes</p> <ul> <li>Fix a bug where the Client was not always resending its new LwM2M Object if a previous Registration Update failed.</li> <li>Fix a bug where the Client was not always resetting its internal registration sequence counters, when registering to a LwM2M 1.1 Server.</li> <li>Improve the Client registration process resilience to network disconnections.</li> <li>Fix text and JSON encoding of very large float values.</li> <li>Fix the usage of the URI query in <code>iowa_coap_peer_get()</code>.</li> <li>Keep the previously declared LwM2M Bootstrap Server when failing to load a context snapshot containing a LwM2M Bootstrap Server.</li> <li>Fix pushing the firmware package with CoAP block which was rejected by the LwM2M Client.</li> <li>Fix an issue where modifying the Objects list or the lifetime during registration, or while disconnected, was not always triggering a Registration Update.</li> <li>Fix a possible derivation between the Registration timer and the Registration Update timer.</li> </ul>"},{"location":"content/Changelog.html#2019-121","title":"2019-12.1","text":"<p>Bug fixes</p> <ul> <li>Allow the Context Storage feature to be built with Single Server mode.</li> <li>Use the correct defines to remove the resources UTC Offset and Timezone in the Device Object.</li> <li>Allow the ACL feature to be built with Single Server mode.</li> <li>Strengthen the checking of the loaded context version.</li> <li>Update the Power Source defines to reflect the version 1.1 of the Device Object.</li> </ul>"},{"location":"content/Changelog.html#2019-12","title":"2019-12","text":"<p>New Features</p> <ul> <li>Add the possibility to choose LwM2M protocol version to support. See LwM2M Version.</li> <li>LwM2M 1.1: The LwM2M operations Read, Write, Write-Attribute, and Observe can target Resource Instances.</li> <li>LwM2M 1.1: Add support of the epmin and epmax notification attributes.</li> <li>LwM2M 1.1: Add support of the Read-Composite, Write-Composite, and Observe-Composite operations.</li> <li>LwM2M 1.1: Add support of the LwM2M 1.1 Send operation. See the samples samples/client_1_1 and samples/server_1_1.</li> <li>LwM2M 1.1: Add support of the new registration conditions. See iowa_client_set_server_registration_behaviour.</li> <li>LwM2M 1.1: Add support of the resource type Unsigned Integer.</li> <li>LwM2M 1.1: Add support of the Bootstrap Trigger resource.</li> <li>LwM2M 1.1: Add support of the Bootstrap Read operation.</li> <li>Add new CoAP APIs to ease downloading during Firmware Update. See CoAP API Referenceand the sample samples/fw_update_client.</li> <li>Add support of the Access Control List Object. See Access Control List Object API.</li> <li>Add support of the Error Code resource in the Device Object. See iowa_client_set_device_error_code.</li> <li>Add new API for the application to provide data to be saved with the IOWA context. See iowa_backup_register_callback.</li> <li>The runtime information can be stored, allowing the Client to resume its operations seamlessly. See Context Storage.</li> </ul> <p>Behavior Changes</p> <ul> <li>Rework of the context storage feature: The format of the saved data has changed for a more flexible one.</li> <li>MSISDN can no longer be set on the Client side when SMS support is not enabled.</li> </ul> <p>SDK Changes</p> <ul> <li>The functions of the Security component are no longer exposed in the header file iowa_security.h. See Security Component.</li> <li>Deprecated APIs: <code>iowa_client_add_lorawan_server()</code> and <code>iowa_server_set_content_format</code>.</li> </ul> <p>Advanced Features</p> <p>These features have not undergone full interoperability testings.</p> <ul> <li>LwM2M 1.1: Add support of OSCORE security. See Security.</li> </ul>"},{"location":"content/Changelog.html#2019-08","title":"2019-08","text":"<p>New Features</p> <ul> <li>During Firmware Update Pushs, a time limit can be set for blocks reception. See the \"Push\" methodsection in Device Update.</li> <li>New Client API to set the Bootstrap Hold Off Time. See iowa_client_set_bootstrap_server_hold_off.</li> <li>New Server APIs to validate a Client registration (iowa_server_set_verify_client_callback) and to close a connection to a Client (iowa_server_close_client_connection).</li> </ul> <p>Behavior Changes</p> <ul> <li>For LwM2M Clients, if iowa_stepreturns an error because no LwM2M Server can be reached, subsequent call to iowa_step, will retry to register to the known LwM2M Servers, instead of staying in the failed state.</li> <li>Changes were made to the Context storagefeature making the saved contexts no longer compatible with the one of the previous version.</li> <li>The \"Binding\" resource of the Device Objectis now dependent on the compilation flags.</li> </ul> <p>SDK Changes</p> <ul> <li>Change the way provide a custom security implementation. See Providing your security implementation.</li> <li>The iowa_lwm2m_data_tdefinition no longer depends on the LWM2M_SUPPORT_TIMESTAMPcompilation flag.</li> <li>More compilation flags were added to reduce the code footprint of the LwM2M Client version. See SDK Configuration.</li> <li>Add a new log part to filter logs generated by LwM2M Objects. See IOWA_LOG_LEVEL and IOWA_LOG_PART.</li> <li>Update the provided MbedTLS to version 2.18.1.</li> <li>Samples are now usable on Windows. See Samples Compilation.</li> </ul> <p>Experimental Features</p> <p>These features have not undergone interoperability testings. They are provided for prototyping purpose only.</p> <ul> <li>Add the possibility to choose LwM2M version to support.</li> <li>The LwM2M operations Read, Write, Write-Attribute, and Observe can target Resource Instances.</li> <li>Add support of the epmin and epmax notification attributes.</li> <li>Add support of the LwM2M 1.1 operations Read-Composite, Write-Composite, and Observe-Composite.</li> <li>Add support of the LwM2M 1.1 Send operation.</li> </ul>"},{"location":"content/Changelog.html#2019-05","title":"2019-05","text":"<p>New Features</p> <ul> <li>Support of timestamped values in IPSO Objects and custom Objects. See <code>iowa_client_IPSO_update_values</code>and Custom Objectsection.</li> <li>Support of SenML JSON, SenML CBOR and CBOR data encodings.</li> <li>Support of the Software Management Objectsfor FOTA.</li> <li>Support of the power source and timezone information in the LwM2M Device Object. See <code>iowa_client_add_device_power_source</code>and <code>iowa_client_update_device_time_information</code>.</li> <li>Support of CoAP Block-Wise transfer for the Device Update push method. See IOWA_COAP_BLOCK_SUPPORT and IOWA_COAP_BLOCK_MINIMAL_SUPPORT in IOWA Configuration.</li> <li>Experimental support of the TCP transport. This feature has not undergone interoperability testings.</li> </ul> <p>Behavior Changes</p> <ul> <li>In the custom Objects iowa_RWE_callback_t, new operation IOWA_DM_FREE to allow the release of the memory potentially allocated when the callback was called with IOWA_DM_READ.</li> <li>In the security layer, the certificates are parsed in DER format.</li> <li>New APIs to manipulate the APN Connection Profile Object. Previous ones are marked as deprecated but are still functional.</li> <li>The user application can implement its own log functions. See Logger Component.</li> </ul> <p>SDK Changes</p> <ul> <li>All iowa files had their name prepended with <code>iowa_</code> to avoid filename collisions on some build systems.</li> <li>Numerous compilation flags were added to reduce the code footprint of the LwM2M Client version. See SDK Configuration.</li> <li>Using the Firmware Update feature now requires the definition of the compilation flag IOWA_SUPPORT_FIRMWARE_UPDATE_OBJECT. See Firmware Update Object.</li> <li>APIs related to iowa-supported LwM2M Objects were moved in their separate header and source files. The header files are located in the \"include/objects\" folder.</li> <li><code>iowa_lwm2m_data_type_t</code>enumeration was converted to a list of defines.</li> <li>the <code>const</code> keyword was added to several APIs arguments.</li> <li>Remove client build dependency on files object_connectivity_stats.c and object_light_control.c</li> <li>The abstraction layer function <code>iowa_system_connection_is_same_peer()</code> is no longer required.</li> </ul>"},{"location":"content/ClientAPI.html","title":"Client Mode API Reference","text":"<p>This is an excerpt from the IOWA Full SDK.</p> <p>Please Contact us</p> <p>The functions explained below are defined inside the file include/iowa_client.h and the Objects folder include/objects.</p>"},{"location":"content/ClientAPI.html#client-pseudocode","title":"Client pseudocode","text":"<pre><code>#include \"iowa_client.h\"\n#include \"iowa_ipso.h\"\n\nint main(int argc,\nchar *argv[])\n{\niowa_context_t iowaH;\niowa_status_t result;\niowa_device_info_t devInfo;\niowa_sensor_t sensorId;\n\n/******************\n    * Initialization\n    */\n\niowaH = iowa_init(NULL);\n\ndevInfo.manufacturer = \"IOTEROP\";\ndevInfo.deviceType = \"Example device\";\ndevInfo.modelNumber = \"1\";\ndevInfo.serialNumber = NULL;\ndevInfo.hardwareVersion = NULL;\ndevInfo.softwareVersion = NULL;\ndevInfo.optFlags = 0;\nresult = iowa_client_configure(iowaH, \"IOWA_Sample_Client\", devInfo, NULL);\n\nresult = iowa_client_IPSO_add_sensor(iowaH,\nIOWA_IPSO_VOLTAGE, 12.0,\n\"V\", \"Test DC\", 0.0, 0.0,\n&amp;sensorId);\n\nresult = iowa_client_add_server(iowaH, 1234, \"coap://localhost:5683\", 0, 0, IOWA_SEC_NONE);\n\n/******************\n    * \"Main loop\"\n    */\n\nwhile (result == IOWA_COAP_NO_ERROR)\n{\nfloat sensorValue;\n\nresult = iowa_step(iowaH, 5);\n\nsensorValue = read_battery_voltage();\nresult = iowa_client_IPSO_update_value(iowaH,\nsensorId,\nsensorValue);\n}\n\niowa_client_IPSO_remove_sensor(iowaH, sensorId);\niowa_close(iowaH);\n\nreturn 0;\n}\n</code></pre>"},{"location":"content/ClientAPI.html#data-types","title":"Data types","text":""},{"location":"content/ClientAPI.html#iowa_lwm2m_binding_t","title":"iowa_lwm2m_binding_t","text":"<pre><code>typedef uint8_t iowa_lwm2m_binding_t;\n</code></pre> IOWA_LWM2M_BINDING_UNKNOWN The flag to define Unknown binding. IOWA_LWM2M_BINDING_UDP The flag to define UDP binding. IOWA_LWM2M_BINDING_TCP The flag to define TCP binding. IOWA_LWM2M_BINDING_SMS The flag to define SMS binding. IOWA_LWM2M_BINDING_NON_IP The flag to define Non-IP binding."},{"location":"content/ClientAPI.html#iowa_server_status_t","title":"iowa_server_status_t","text":"<p>This is an enumeration of the following values:</p> IOWA_SERVER_STATUS_UNREGISTERED This is the initial state of any server. IOWA_SERVER_STATUS_REGISTERING IOWA is currently registering to this server. IOWA_SERVER_STATUS_REGISTERED IOWA is registered to this server. IOWA_SERVER_STATUS_REGISTRATION_FAILED IOWA failed to register to this server. IOWA_SERVER_STATUS_BOOTSTRAPPING This server is the LwM2M Bootstrap Server, and it is currently bootstrapping IOWA."},{"location":"content/ClientAPI.html#iowa_server_info_t","title":"iowa_server_info_t","text":"<pre><code>typedef struct\n{\nuint16_t                shortId;\nconst char             *uriP;\nint32_t                 lifetime;\niowa_lwm2m_binding_t    binding;\nbool                    queueMode;\niowa_server_status_t    status;\nuint16_t                securityObjectInstanceId;\nuint16_t                serverObjectInstanceId;\nuint16_t                oscoreObjectInstanceId;\niowa_lwm2m_protocol_version_t lwm2mVersion;\n} iowa_server_info_t;\n</code></pre> <p>The <code>iowa_server_info_t</code> structure is used to get the shortID and the parameters of the configured servers.</p> shortId the Short ID assigned to the server. uriP The uri to connect with the server. lifetime The lifetime in seconds of the registration to the server. binding The binding used to connect to the server. queueMode The state of the Queue mode of the server. status The current registration status of the server. securityObjectInstanceId The ID of the Security Object Instance holding the server information. serverObjectInstanceId The ID of the Server Object Instance holding the server information. The value is IOWA_LWM2M_ID_ALL for a LwM2M Bootstrap-Server. oscoreObjectInstanceId The ID of the OSCORE Object Instance holding the server information. The value is IOWA_LWM2M_ID_ALL if the server does not use OSCORE or if IOWA_COAP_OSCORE_SUPPORT is not defined. lwm2mVersion The LwM2M protocol version used by the server. See <code>iowa_lwm2m_protocol_version_t</code>."},{"location":"content/ClientAPI.html#iowa_device_info_t","title":"iowa_device_info_t","text":"<pre><code>typedef struct\n{\nconst char *manufacturer;\nconst char *deviceType;\nconst char *modelNumber;\nconst char *serialNumber;\nconst char *hardwareVersion;\nconst char *firmwareVersion;\nconst char *softwareVersion;\nconst char *msisdn;\nconst char *altPath;\nuint16_t    optFlags;\nconst char *utcOffsetP;\nconst char *timezoneP;\nuint32_t    memoryTotal;\nuint32_t    memoryFree;\niowa_client_time_update_callback_t    dataTimeUpdateCallback;\niowa_client_factory_reset_callback_t  factoryResetCallback;\nvoid                                 *callbackUserDataP;\n} iowa_device_info_t;\n</code></pre> <p>The <code>iowa_device_info_t</code> structure exists only for the sake of the readability of <code>iowa_client_configure()</code>. It contains pointers to nil-terminated strings described below. As all this information is optional in a LwM2M Client, these pointers can be nil. The LwM2M standard does not mandate any format for these strings. They are manufacturer specific.</p> manufacturer A human-readable manufacturer name. deviceType The type of the device. modelNumber The number of the model. serialNumber The serial number of the device. hardwareVersion The current version of the device hardware. firmwareVersion The current version of the device firmware. softwareVersion The current version of the device software. msisdn The phone number of the device. altPath The LwM2M Alternative Path. optFlags Flags used to enable optional features. This value is a combination of: <ul> <li>IOWA_DEVICE_RSC_BATTERY: enables the battery level and status exposed in the <code>Device Object</code>. To update battery level you need to call <code>iowa_client_device_update_battery()</code>.</li> <li>IOWA_DEVICE_RSC_POWER_SOURCE: enables the power sources information in the <code>Device Object</code>. To add any new power source you need to call <code>iowa_client_add_device_power_source()</code>.</li> <li>IOWA_DEVICE_RSC_CURRENT_TIME: enables the use of current time in the <code>Device Object</code> (default value: 0).</li> <li>IOWA_DEVICE_RSC_UTC_OFFSET: enables the use of UTC offset in the <code>Device Object</code> (default value: utcOffsetP).</li> <li>IOWA_DEVICE_RSC_TIMEZONE: enables the use of timezone in the <code>Device Object</code> (default value: 0). To update time information (current time, UTC offset, timezone) you need to call <code>iowa_client_update_device_time_information()</code></li> <li>IOWA_DEVICE_RSC_MEMORY_FREE: enables the Memory Free resource exposed in the <code>Device Object</code> (default value: memoryFree).</li> <li>IOWA_DEVICE_RSC_EXTERNAL_INFO: enables the ExtDevInfo resource exposed in the <code>Device Object</code>. To set the Resource values, you need to call <code>iowa_client_update_device_external_information()</code>.</li> </ul> utcOffsetP Indicates the UTC offset currently in effect for this LwM2M Device. It should be in the ISO 8601 format (UTC+X). timezoneP Indicates in which time zone the LwM2M Device is located, in IANA Timezone (TZ) database format. memoryTotal Total amount of storage space which can store data and software in the LwM2M Device (expressed in kilobytes). Ignored if equal to zero. memoryFree Estimated current available amount of storage space which can store data and software in the LwM2M Device (expressed in kilobytes). Ignored if optFlags does not have IOWA_DEVICE_RSC_MEMORY_FREE set. dataTimeUpdateCallback The callback called when the time information is updated by the LwM2M Server. factoryResetCallback The callback called on a Factory Reset. callbackUserDataP Passed as argument to the callbacks <code>dataTimeUpdateCallback</code> and <code>factoryResetCallback</code>. <p>Notes</p> <p>To update time information (current time, UTC offset, timezone) you need to call <code>iowa_client_update_device_time_information()</code></p> <p>To update device related information (manufacturer, model number, serial number, firmware version, device type, hardware version, software version.) you need to call <code>iowa_client_update_device_information()</code>.</p>"},{"location":"content/ClientAPI.html#iowa_object_setting_id_t","title":"iowa_object_setting_id_t","text":"<pre><code>typedef uint8_t iowa_object_setting_id_t;\n</code></pre>"},{"location":"content/ClientAPI.html#possible-values","title":"Possible Values","text":"IOWA_OBJECT_SETTING_VERSION A flag to set the version of the object, value is an iowa_object_version_t."},{"location":"content/ClientAPI.html#iowa_event_type_t","title":"iowa_event_type_t","text":"<pre><code>typedef enum\n{\nIOWA_EVENT_UNDEFINED = 0,\nIOWA_EVENT_REG_UNREGISTERED,\nIOWA_EVENT_REG_REGISTERING,\nIOWA_EVENT_REG_REGISTERED,\nIOWA_EVENT_REG_UPDATING,\nIOWA_EVENT_REG_FAILED,\nIOWA_EVENT_REG_UPDATE_FAILED,\nIOWA_EVENT_BS_PENDING,\nIOWA_EVENT_BS_FINISHED,\nIOWA_EVENT_BS_FAILED,\nIOWA_EVENT_OBSERVATION_STARTED,\nIOWA_EVENT_OBSERVATION_NOTIFICATION,\nIOWA_EVENT_OBSERVATION_NOTIFICATION_ACKED,\nIOWA_EVENT_OBSERVATION_NOTIFICATION_FAILED,\nIOWA_EVENT_OBSERVATION_CANCELED,\nIOWA_EVENT_OBJECT_INSTANCE_CREATED,\nIOWA_EVENT_OBJECT_INSTANCE_DELETED,\nIOWA_EVENT_EVALUATION_PERIOD,\nIOWA_EVENT_READ,\nIOWA_EVENT_SERVER_SETTING_CHANGED,\nIOWA_EVENT_RESPONSE_LAST_BLOCK_SENT\n} iowa_event_type_t;\n</code></pre> <p>The <code>iowa_event_type_t</code> contains the possible events that can be reported by the IOWA stack.</p>"},{"location":"content/ClientAPI.html#iowa_event_t","title":"iowa_event_t","text":"<pre><code>typedef struct\n{\niowa_event_type_t eventType;\nuint16_t          serverShortId;\nunion\n{\nstruct\n{\nuint32_t lifetime;\nbool internalError;\niowa_status_t errorCode;\n} registration;\nstruct\n{\niowa_sensor_t sensorId;\nuint32_t notificationNumber;\nuint16_t resourceId;\nuint32_t minPeriod;\nuint32_t maxPeriod;\nuint32_t minEvalPeriod;\nuint32_t maxEvalPeriod;\n} observation;\nstruct\n{\niowa_lwm2m_uri_t * uriP;\n} objectInstance;\nstruct\n{\niowa_lwm2m_uri_t * uriP;\nuint32_t minEvalPeriod;\nuint32_t maxEvalPeriod;\n} evalPeriod;\nstruct\n{\niowa_sensor_t sensorId;\n} sensor;\nstruct\n{\niowa_server_setting_id_t id;\nunion\n{\nbool asBoolean;\nuint32_t asUInt32;\nint32_t asInt32;\niowa_lwm2m_binding_t asBinding;\n} value;\n} serverSetting;\n} details;\n} iowa_event_t;\n</code></pre> eventType the event type. serverShortId the short server ID of the LwM2M Server generating this event. details the details of the event. details::registration filled when the event is of type IOWA_EVENT_REG_UNREGISTERED, IOWA_EVENT_REG_REGISTERING, IOWA_EVENT_REG_REGISTERED, IOWA_EVENT_REG_UPDATING, IOWA_EVENT_REG_FAILED or IOWA_EVENT_REG_UPDATE_FAILED. details::registration::lifetime the lifetime of the registration to the LwM2M Server generating this event. details::registration::internalError indicates if the error for a failed registration or registration update is coming from an internal issue or if it's an error returned by the LwM2M Server. Set only when the event is of type IOWA_EVENT_REG_FAILED or IOWA_EVENT_REG_UPDATE_FAILED. details::registration::errorCode an <code>iowa_status_t</code> indicating the reason for a failed registration or registration update. Set only when the event is of type IOWA_EVENT_REG_FAILED or IOWA_EVENT_REG_UPDATE_FAILED. details::observation filled when the event is of type IOWA_EVENT_OBSERVATION_STARTED,  IOWA_EVENT_OBSERVATION_NOTIFICATION, IOWA_EVENT_OBSERVATION_NOTIFICATION_ACKED, IOWA_EVENT_OBSERVATION_NOTIFICATION_FAILED, or IOWA_EVENT_OBSERVATION_CANCELED details::observation::sensorId the ID of the sensor under observation. details::observation::resourceId the ID of the specific resource under observation of the sensor. This may be IOWA_LWM2M_ID_ALL. details::observation::minPeriod the minimum time in seconds to wait between notifications for the observation. If not set the minPeriod is to 0. details::observation::maxPeriod the maximum time in seconds to wait between notifications for the observation. If not set the maxPeriod is to UINT32_MAX. details::observation::minEvalPeriod the minimum sample time in seconds for the observed sensor in LwM2M 1.1 or later. If not set the minEvalPeriod is to 0. details::observation::maxEvalPeriod the maximum sample time in seconds for the observed sensor in LwM2M 1.1 or later. If not set the maxEvalPeriod is to UINT32_MAX. details::instance filled when the event is of type IOWA_EVENT_OBJECT_INSTANCE_CREATED or IOWA_EVENT_OBJECT_INSTANCE_DELETED. details::instance::uri a pointer to the <code>iowa_lwm2m_uri_t</code> of the instance that has been created or deleted. details::evalPeriod filled when the event is of type IOWA_EVENT_EVALUATION_PERIOD. Available when one of the flags IOWA_LWM2M_VERSION_1_1_SUPPORT IOWA_LWM2M_VERSION_1_2_SUPPORT is set. details::evalPeriod::uriP a pointer to the <code>iowa_lwm2m_uri_t</code> of the uri where evaluation period has been set. details::evalPeriod::minEvalPeriod the minimum sample time in seconds for the concerned uri. If the LwM2M Server unsets it or does not set it, the value is 0. details::evalPeriod::maxEvalPeriod the maximum sample time in seconds for the concerned uri. If the LwM2M Server unsets it or does not set it, the value is UINT32_MAX. details::sensor filled when the event is of type IOWA_EVENT_READ. details::sensor::sensorId the ID of the sensor targeted by a Read operation from the LwM2M Server. details::serverSetting filled when the event is of type IOWA_EVENT_SERVER_SETTING_CHANGED. details::serverSetting::id the ID of the LwM2M Server setting that changed. details::serverSetting::value the value of the LwM2M Server setting depending on the setting ID. See <code>iowa_server_setting_id_t</code>. <p>The <code>iowa_event_t</code> is used by <code>iowa_event_callback_t</code> when an event occurred on a client. These events are described by <code>iowa_event_type_t</code>.</p> <p>Notes</p> <p>The IOWA stack handles the minimum and maximum observation periods. They are provided in <code>iowa_event_t</code> as an information for the application. Embedded devices may use this information to tune their measurement or sleeping schedule.</p> <p>The IOWA stack does not handle the minimum and maximum evaluation observation periods. They are provided in <code>iowa_event_t</code> as sample times for the application. Embedded devices may use those sample times to tune their measurement or sleeping schedule.</p> <p>For events of type IOWA_EVENT_REG_FAILED or IOWA_EVENT_REG_UPDATE_FAILED, <code>details::registration::internalError</code> set to <code>true</code> indicates an internal error. <code>details::registration::errorCode</code> indicates the type of error: * IOWA_COAP_406_NOT_ACCEPTABLE: the response from the LwM2M Server is not valid. * IOWA_COAP_500_INTERNAL_SERVER_ERROR: a memory allocation failed. * IOWA_COAP_503_SERVICE_UNAVAILABLE: lost connection to the LwM2M Server.</p> <p>The IOWA stack generates events of type IOWA_EVENT_SERVER_SETTING_CHANGED when a LwM2M Server performs a LwM2M Write operation on the matching resource in the LwM2M server Object. The event is generated even if the written value is the same as the previous one.</p>"},{"location":"content/ClientAPI.html#iowa_device_time_info_t","title":"iowa_device_time_info_t","text":"<pre><code>typedef struct\n{\nuint16_t    flags;\nint32_t     currentTime;\nconst char *utcOffsetP;\nconst char *timezoneP;\n} iowa_device_time_info_t;\n</code></pre> flags Flags used to enable optional time information. This value is a combination of: <ul> <li>IOWA_DEVICE_RSC_CURRENT_TIME : current time has a new current time value from server</li> <li>IOWA_DEVICE_RSC_UTC_OFFSET : current time has a new UTC offset value from server</li> <li>IOWA_DEVICE_RSC_TIMEZONE : current time has a new timezone value from server</li> </ul> currentTime Current UNIX time of the LwM2M Client in seconds. utcOffsetP Indicates the UTC offset currently in effect for this LwM2M Device. It should be in the ISO 8601 format (UTC+X). Could be nil, if not UTC offset is enable. timezoneP Indicates in which time zone the LwM2M Device is located, in IANA Timezone (TZ) database format. Could be nil, if not Timezone is enabled."},{"location":"content/ClientAPI.html#iowa_ipso_timed_value_t","title":"iowa_ipso_timed_value_t","text":"<pre><code>typedef struct\n{\nfloat value;\nint32_t timestamp;\n} iowa_ipso_timed_value_t;\n</code></pre> value The timestamped value. timestamp The timestamp associated to the value in seconds. This can not be negative."},{"location":"content/ClientAPI.html#iowa_sensor_t","title":"iowa_sensor_t","text":"<p>This must be treated as an opaque type. It is internally mapped to a 32-bit unsigned integer.</p> <p>Special Values</p> IOWA_INVALID_SENSOR_ID Used to indicate an error by APIs returning an <code>iowa_sensor_t</code>. IOWA_DEVICE_TIME_SENSOR_ID The sensor ID of the Current Time of the device. This is internally mapped to the resource 13 in the Device Object."},{"location":"content/ClientAPI.html#iowa_lwm2m_resource_desc_t","title":"iowa_lwm2m_resource_desc_t","text":"<p>This structure contains the description of a LwM2M resource. <pre><code>typedef struct {\nuint16_t id;\niowa_lwm2m_data_type_t type;\nuint8_t operations;\nuint8_t flags;\n} iowa_lwm2m_resource_desc_t;\n</code></pre></p> id ID of the resource. type The datatype of the resource. operations The operations allowed on the resource. This is a mask of values IOWA_OPERATION_READ, IOWA_OPERATION_WRITE and IOWA_OPERATION_EXECUTE. flags The flags of the resource. This is a mask of values IOWA_RESOURCE_FLAG_NONE, IOWA_RESOURCE_FLAG_OPTIONAL, IOWA_RESOURCE_FLAG_MANDATORY, IOWA_RESOURCE_FLAG_MULTIPLE, and IOWA_RESOURCE_FLAG_ASYNCHRONOUS."},{"location":"content/ClientAPI.html#iowa_sensor_uri_t","title":"iowa_sensor_uri_t","text":"<p>This structure describes a sensor URI.</p> <pre><code>typedef struct\n{\niowa_sensor_t id;\nuint16_t resourceId;\n} iowa_sensor_uri_t;\n</code></pre> id ID of the object. resourceId The ID of the resource. This can be IOWA_LWM2M_ID_ALL."},{"location":"content/ClientAPI.html#callbacks","title":"Callbacks","text":""},{"location":"content/ClientAPI.html#iowa_event_callback_t","title":"iowa_event_callback_t","text":"<p>This is the event callback, called when an event such as registration update or unregister occurred.</p> <pre><code>typedef void(*iowa_event_callback_t) (iowa_event_t* eventP,\nvoid * userData,\niowa_context_t contextP);\n</code></pre> eventP The event stored in a structure. userData A pointer to application specific data. This is a parameter of <code>iowa_init()</code>. contextP The IOWA context on which <code>iowa_client_configure()</code> was called."},{"location":"content/ClientAPI.html#iowa_client_time_update_callback_t","title":"iowa_client_time_update_callback_t","text":"<p>This callback is called when time information are updated by server.</p> <pre><code>typedef void(*iowa_client_time_update_callback_t) (iowa_device_time_info_t *timeInfoP,\nvoid  *userDataP,\niowa_context_t contextP);\n</code></pre> timeInfoP Current device time information. userDataP A pointer to application specific data. This is the parameter of <code>iowa_client_configure()</code>. contextP The IOWA context on which <code>iowa_client_configure()</code> was called."},{"location":"content/ClientAPI.html#iowa_client_factory_reset_callback_t","title":"iowa_client_factory_reset_callback_t","text":"<p>This callback is called when a factory reset is requested.</p> <pre><code>typedef void(*iowa_client_factory_reset_callback_t) (void *userDataP,\niowa_context_t contextP);\n</code></pre> userDataP A pointer to application specific data. This is the parameter of <code>iowa_client_configure()</code>. contextP The IOWA context on which <code>iowa_client_configure()</code> was called."},{"location":"content/ClientAPI.html#iowa_rwe_callback_t","title":"iowa_RWE_callback_t","text":"<p>This callback is called when a Read, Write or Execute operation is performed on a resource of a custom LwM2M Object. <pre><code>typedef iowa_status_t(*iowa_RWE_callback_t) (iowa_dm_operation_t operation,\niowa_lwm2m_data_t * dataP,\nsize_t numData,\nvoid * userData,\niowa_context_t contextP);\n</code></pre></p> operation The operation to perform on the resource among IOWA_DM_READ, IOWA_DM_WRITE and IOWA_DM_EXECUTE. dataP An array of the URIs of the targeted resources. For a Write operation, it also contains the value to write. For a Read operation, the result is to be stored in this. numData Number of resources in dataP. userData A pointer to application specific data. This is the parameter of <code>iowa_client_add_custom_object()</code>. contextP The IOWA context on which <code>iowa_client_add_custom_object()</code> was called. <p>Notes</p> <ul> <li>Before calling this callback, the IOWA stack performs checks on the resource existence and its allowed operations. In case of a Write operation, the data type is also checked for conformance.</li> <li>The LwM2M Execute operation may have parameters. If so, they are provided as a string in dataP.</li> <li>After IOWA_DM_READ operation, the callback is called with IOWA_DM_FREE operation to permit the deallocation of memory that may have been allocated by the callback previously.</li> <li>In case of a write operation on resource-instances level, if the Write operation is a Replace, and not a Partial Update, the callback will be called first with IOWA_DM_DELETE to erase the current resource-instances, then it will be called with IOWA_DM_WRITE to write the new values. in case of a Partial Update Write operation, the callback will be called with IOWA_DM_WRITE only, where it will change or append the current resource-instances values.</li> </ul>"},{"location":"content/ClientAPI.html#iowa_cd_callback_t","title":"iowa_CD_callback_t","text":"<p>This callback is called when a Create or Delete operation is performed on an instance of a custom LwM2M Object. <pre><code>typedef iowa_status_t(*iowa_CD_callback_t) (iowa_dm_operation_t operation,\nuint16_t objectID,\nuint16_t instanceID,\nvoid * userData,\niowa_context_t contextP);\n</code></pre></p> operation The operation to perform on the instance among IOWA_DM_CREATE and IOWA_DM_DELETE. objectID The ID of the targeted Object. instanceID The ID of the targeted instance. userData A pointer to application specific data. This is the parameter of <code>iowa_client_add_custom_object()</code>. contextP The IOWA context on which <code>iowa_client_add_custom_object()</code> was called."},{"location":"content/ClientAPI.html#iowa_ri_callback_t","title":"iowa_RI_callback_t","text":"<p>This callback is called to retrieve the list of current resource instance IDs for a multiple resource. <pre><code>typedef iowa_status_t(*iowa_RI_callback_t) (uint16_t objectID,\nuint16_t instanceID,\nuint16_t resourceID,\nuint16_t * nbResInstanceP,\nuint16_t ** resInstanceArrayP,\nvoid * userData,\niowa_context_t contextP);\n</code></pre></p> objectID The ID of the Object the resource belongs to. instanceID The ID of the Object Instance the resource belongs to. resourceID The ID of the targeted resource. nbResInstanceP Used to store the number of elements in resInstanceArrayP. resInstanceArrayP Used to store an array containing the resource instances IDs. This array will be freed by the caller by calling <code>iowa_system_free()</code>. userData A pointer to application specific data. This is the parameter of <code>iowa_client_add_custom_object()</code>. contextP The IOWA context on which <code>iowa_client_add_custom_object()</code> was called."},{"location":"content/ClientAPI.html#api","title":"API","text":""},{"location":"content/ClientAPI.html#iowa_client_configure","title":"iowa_client_configure","text":"<p>Prototype</p> <p><pre><code>iowa_status_t iowa_client_configure(iowa_context_t contextP,\nconst char * identity,\niowa_device_info_t * infoP,\niowa_event_callback_t eventCb);\n</code></pre> Description</p> <p><code>iowa_client_configure()</code> sets the information of the LwM2M Client.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. identity The unique identity of the LwM2M Client as a nil-terminated string. infoP The optional information of the LwM2M Client. This can be nil. eventCb The callback called when an event occurred. This can be nil. <p>Return Value</p> IOWA_COAP_NO_ERROR success. COAP_400_BAD_REQUEST either: <ul> <li>identity is nil or empty and LWM2M_VERSION_1_1_SUPPORT is not set.</li> </ul> <ul> <li>the maximum length of infoP-&gt;msisdn is 15 digits.</li> </ul> <ul> <li>infoP-&gt;msisdn is not nil, but IOWA_SMS_SUPPORT is not defined.</li> </ul> <ul> <li>infoP-&gt;altPath contains an invalid URI path.</li> </ul> IOWA_COAP_412_PRECONDITION_FAILED the client was already configured in this context. To reconfigure the client, close and reopen a fresh IOWA context with <code>iowa_close()</code> and <code>iowa_init()</code>. IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>The nil-terminated strings pointed by the fields of infoP are not duplicated nor freed by IOWA. Make sure they are available until <code>iowa_close()</code> is called. It is advised to use static strings.</p>"},{"location":"content/ClientAPI.html#device-object-resources","title":"Device Object Resources","text":"<p>The LwM2M Client information is exposed to the LwM2M Server through the Resources of the <code>Device Object</code> (ID: 3). The following table explained the mapping:</p> Resource ID Resource Name API 0 Manufacturer manufacturer field of the <code>iowa_device_info_t</code> structure. IOWA_DEVICE_SUPPORT_RSC_MANUFACTURER must be defined. 1 Model Number modelNumber field of the <code>iowa_device_info_t</code> structure. IOWA_DEVICE_SUPPORT_RSC_MODEL_NUMBER must be defined. 2 Serial Number serialNumber field of the <code>iowa_device_info_t</code> structure. IOWA_DEVICE_SUPPORT_RSC_SERIAL_NUMBER must be defined. 3 Firmware Version firmwareVersion field of the <code>iowa_device_info_t</code> structure. IOWA_DEVICE_SUPPORT_RSC_FIRMWARE_VERSION must be defined. 4 Reboot 5 Factory Reset Set the callback factoryResetCallback of the <code>iowa_device_info_t</code> structure. IOWA_DEVICE_SUPPORT_RSC_FACTORY_RESET must be defined. 6 Available Power Sources Set the flag IOWA_DEVICE_RSC_POWER_SOURCE in optFlags field of the structure <code>iowa_device_info_t</code>. Then use <code>iowa_client_..._device_power_source</code> to control it. IOWA_DEVICE_SUPPORT_RSC_POWER_SOURCE must be defined. 7 Power Source Voltage Set the flag IOWA_DEVICE_RSC_POWER_SOURCE in optFlags field of the structure <code>iowa_device_info_t</code>. Then use <code>iowa_client_..._device_power_source</code> to control it. IOWA_DEVICE_SUPPORT_RSC_POWER_SOURCE must be defined. 8 Power Source Current Set the flag IOWA_DEVICE_RSC_POWER_SOURCE in optFlags field of the structure <code>iowa_device_info_t</code>. Then use <code>iowa_client_..._device_power_source</code> to control it. IOWA_DEVICE_SUPPORT_RSC_POWER_SOURCE must be defined. 9 Battery Level Set the flag IOWA_DEVICE_RSC_BATTERY in optFlags field of the structure <code>iowa_device_info_t</code>. Then use <code>iowa_client_device_update_battery</code> to control it. IOWA_DEVICE_SUPPORT_RSC_BATTERY must be defined. 10 Memory Free memoryFree field of the <code>iowa_device_info_t</code> structure when the flag IOWA_DEVICE_RSC_MEMORY_FREE in the optFlags field is set. IOWA_DEVICE_SUPPORT_RSC_MEMORY_FREE must be defined. 11 Error Code Use <code>iowa_client_..._device_error_code</code> to control it. 12 Reset Error Code Set the flag IOWA_DEVICE_RSC_RESET_ERROR in optFlags field of the structure <code>iowa_device_info_t</code>. IOWA_DEVICE_SUPPORT_RSC_RESET_ERROR must be defined. 13 Current Time Set the flag IOWA_DEVICE_RSC_CURRENT_TIME in optFlags field of the structure <code>iowa_device_info_t</code>. Then use <code>iowa_client_update_device_time_information</code> to control it. IOWA_DEVICE_SUPPORT_RSC_CURRENT_TIME must be defined. 14 UTC Offset utcOffsetP field and set the flag IOWA_DEVICE_RSC_UTC_OFFSET in optFlags field of the structure <code>iowa_device_info_t</code>. Then use <code>iowa_client_update_device_time_information</code> to control it. IOWA_DEVICE_SUPPORT_RSC_UTC_OFFSET must be defined. 15 Timezone timezoneP field and set the flag IOWA_DEVICE_RSC_TIMEZONE in optFlags field of the structure <code>iowa_device_info_t</code>. Then use <code>iowa_client_update_device_time_information</code> to control it. IOWA_DEVICE_SUPPORT_RSC_TIMEZONE must be defined. 16 Supported Binding and Modes Cannot be updated directly but depends on the Server URI schema. 17 Device Type deviceType field of the <code>iowa_device_info_t</code> structure. IOWA_DEVICE_SUPPORT_RSC_DEVICE_TYPE must be defined. 18 Hardware Version hardwareVersion field of the <code>iowa_device_info_t</code> structure. IOWA_DEVICE_SUPPORT_RSC_HARDWARE_VERSION must be defined. 19 Software Version softwareVersion field of the <code>iowa_device_info_t</code> structure. IOWA_DEVICE_SUPPORT_RSC_SOFTWARE_VERSION must be defined. 20 Battery Status Set the flag IOWA_DEVICE_RSC_BATTERY in optFlags field of the structure <code>iowa_device_info_t</code>. Then use <code>iowa_client_device_update_battery</code> to control it. IOWA_DEVICE_SUPPORT_RSC_BATTERY must be defined. 21 Memory Total memoryTotal field of the <code>iowa_device_info_t</code> structure. IOWA_DEVICE_SUPPORT_RSC_MEMORY_TOTAL must be defined. 22 ExtDevInfo Set the flag IOWA_DEVICE_RSC_EXTERNAL_INFO in optFlags field of the structure <code>iowa_device_info_t</code> to enable it. Then use <code>iowa_client_update_device_external_information</code> to control it. IOWA_DEVICE_SUPPORT_RSC_EXTERNAL_INFO must be defined."},{"location":"content/ClientAPI.html#iowa_client_add_server","title":"iowa_client_add_server","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_add_server(iowa_context_t contextP,\nuint16_t shortID,\nconst char *uri,\nuint32_t lifetime,\nuint16_t configFlags,\niowa_security_mode_t securityMode);\n</code></pre> <p>Description</p> <p><code>iowa_client_add_server()</code> declares a new LwM2M Server for the LwM2M Client to connect to.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. The context MUST be configured with <code>iowa_client_configure()</code> to add a server. shortID The ID assigned to this server. This cannot be zero nor IOWA_LWM2M_ID_ALL nor an existing one. uri The URI to reach this server as a nil-terminated string e.g. \"coaps://[::1]:5684\", \"coap://lwm2m.example.org:5683\" or \"sms://+331020304050\". lifetime The lifetime in seconds of the registration to this server. configFlags A bit-mask of configuration flags for this LwM2M Server. securityMode The security mode to use when connecting to this LwM2M Server. See iowa_security_mode_t. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_400_BAD_REQUEST uri is nil. IOWA_COAP_403_FORBIDDEN shortID is either zero, IOWA_LWM2M_ID_ALL or already in use. IOWA_COAP_404_NOT_FOUND client is not configured. Call first <code>iowa_client_configure()</code>. IOWA_COAP_406_NOT_ACCEPTABLE uri is invalid. For example, if the transport is not supported or if uri does not match securityMode. IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>If lifetime is set to zero, the registration lifetime is set to a default value of:</p> <ul> <li>30 days (2,592,000 seconds) for LoRaWAN transport</li> <li>24 hours (86,400 seconds) for other transports (UDP, TCP, SMS ...)</li> </ul> <p>uri is duplicated internally by IOWA and can be freed by the caller.</p> <p>configFlags is a combination of the following:</p> <ul> <li>IOWA_LWM2M_QUEUE_MODE: Enable LwM2M Queue Mode for this LwM2M Server.</li> </ul>"},{"location":"content/ClientAPI.html#server-object-resources","title":"Server Object Resources","text":"<p>The LwM2M Server information is exposed through the Resources of the <code>Server Object</code> (ID: 1). The following table explained the mapping:</p> Resource ID Resource Name API 0 Short Server ID In <code>iowa_client_add_server</code>(), fill shortID. 1 Lifetime In <code>iowa_client_add_server</code>(), fill lifetime. 2 Default Minimum Period Use <code>iowa_client_set_notification_default_periods</code> to control it. IOWA_SERVER_SUPPORT_RSC_DEFAULT_PERIODS must be defined. 3 Default Maximum Period Use <code>iowa_client_set_notification_default_periods</code> to control it. IOWA_SERVER_SUPPORT_RSC_DEFAULT_PERIODS must be defined. 4 Disable IOWA_SERVER_SUPPORT_RSC_DISABLE_TIMEOUT must be defined. 5 Disable Timeout By default it is 86400 seconds. To change this default value, use IOWA_SERVER_RSC_DISABLE_TIMEOUT_DEFAULT_VALUE. IOWA_SERVER_SUPPORT_RSC_DISABLE_TIMEOUT must be defined. 6 Notification Storing When Disabled or Offline By default it is false. To change this default value, use IOWA_SERVER_RSC_STORING_DEFAULT_VALUE. 7 Binding Determined with the uri passed to <code>iowa_client_add_server</code>(). 8 Registration Update Trigger 9 Bootstrap-Request Trigger IOWA_SERVER_SUPPORT_RSC_BOOTSTRAP_TRIGGER must be defined. Bootstrap feature is required. 10 APN Link Not exposed by IOWA. 11 TLS-DTLS Alert Code Not exposed by IOWA. 12 Last Bootstrapped Not exposed by IOWA. 13 Registration Priority Order IOWA_SERVER_SUPPORT_RSC_REGISTRATION_BEHAVIOUR must be defined. LwM2M version must be 1.1 or later. 14 Initial Registration Delay Timer IOWA_SERVER_SUPPORT_RSC_REGISTRATION_BEHAVIOUR must be defined. LwM2M version must be 1.1 or later. 15 Registration Failure Block IOWA_SERVER_SUPPORT_RSC_REGISTRATION_BEHAVIOUR must be defined. LwM2M version must be 1.1 or later. 16 Bootstrap on Registration Failure IOWA_SERVER_SUPPORT_RSC_REGISTRATION_BEHAVIOUR must be defined. LwM2M version must be 1.1 or later. 17 Communication Retry Count IOWA_SERVER_SUPPORT_RSC_COMMUNICATION_ATTEMPTS must be defined. LwM2M version must be 1.1 or later. 18 Communication Retry Timer IOWA_SERVER_SUPPORT_RSC_COMMUNICATION_ATTEMPTS must be defined. LwM2M version must be 1.1 or later. 19 Communication Sequence Delay Timer IOWA_SERVER_SUPPORT_RSC_COMMUNICATION_ATTEMPTS must be defined. LwM2M version must be 1.1 or later. 20 Communication Sequence Retry Count IOWA_SERVER_SUPPORT_RSC_COMMUNICATION_ATTEMPTS must be defined. LwM2M version must be 1.1 or later. 21 Trigger Not exposed by IOWA. 22 Preferred Transport Not exposed by IOWA. 23 Mute Send By default it is false. To change this default value, use IOWA_SERVER_RSC_MUTE_SEND_DEFAULT_VALUE. IOWA_SERVER_SUPPORT_RSC_MUTE_SEND must be defined. Data Push operation feature is required."},{"location":"content/ClientAPI.html#iowa_client_remove_server","title":"iowa_client_remove_server","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_remove_server(iowa_context_t contextP,\nuint16_t shortID);\n</code></pre> <p>Description</p> <p><code>iowa_client_remove_server()</code> removes a LwM2M Server added by <code>iowa_client_add_server()</code> from the LwM2M Client.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. shortID The ID assigned to this server or IOWA_LWM2M_ID_ALL. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_403_FORBIDDEN shortID is zero. IOWA_COAP_404_NOT_FOUND shortID does not match any known server. <p>Header File</p> <p>iowa_client.h</p>"},{"location":"content/ClientAPI.html#iowa_client_get_server_count","title":"iowa_client_get_server_count","text":"<p>Prototype</p> <p><pre><code>iowa_status_t iowa_client_get_server_count(iowa_context_t contextP,\nsize_t *serversCountP);\n</code></pre> Description</p> <p><code>iowa_client_get_server_count()</code> get the count of all configured LwM2M Servers.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. serversCountP A pointer to the count of all configured LwM2M Servers. <p>Return Value</p> IOWA_COAP_NO_ERROR success. <p>Header File</p> <p>iowa_client.h</p>"},{"location":"content/ClientAPI.html#iowa_client_get_server_array","title":"iowa_client_get_server_array","text":"<p>Prototype</p> <p><pre><code>iowa_status_t iowa_client_get_server_array(iowa_context_t contextP,\nsize_t serversCount,\niowa_server_info_t *serverArrayP);\n</code></pre> Description</p> <p><code>iowa_client_get_server_array()</code> retrieves the configured LwM2M Servers with theirs associated information.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. serversCount A pointer to the count of LwM2M Servers. serverArrayP An Array of <code>iowa_server_info_t</code> with a size equal to the count of the current configured LwM2M Servers. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_404_NOT_FOUND No LwM2M Servers are configured in the Client. IOWA_COAP_406_NOT_ACCEPTABLE serverArrayP is nil. IOWA_COAP_408_REQUEST_ENTITY_INCOMPLETE The count of configured LwM2M servers has been changed since the call of <code>iowa_client_get_server_count()</code>. However, serverArrayP was filled with valid information. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>To get the count of the current configured LwM2M Servers you need to call <code>iowa_client_get_server_count()</code>.</p>"},{"location":"content/ClientAPI.html#iowa_client_get_server_coap_peer","title":"iowa_client_get_server_coap_peer","text":"<p>Prototype</p> <pre><code>iowa_coap_peer_t * iowa_client_get_server_coap_peer(iowa_context_t contextP,\nuint16_t shortId);\n</code></pre> <p>Description</p> <p><code>iowa_client_get_server_coap_peer()</code> returns the CoAP peer associated to a LwM2M Server.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. shortID The ID assigned to the server. <p>Return Value</p> <p>A pointer to the iowa_coap_peer_t associated to the LwM2M Server.</p> <p>This pointer may be nil if <code>shortId</code> is invalid or if IOWA did not yet initiate the registration to the LwM2M Server.</p> <p>Header File</p> <p>iowa_client.h</p>"},{"location":"content/ClientAPI.html#iowa_client_set_notification_default_periods","title":"iowa_client_set_notification_default_periods","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_set_notification_default_periods(iowa_context_t contextP,\nuint16_t shortID,\nuint32_t minPeriod,\nuint32_t maxPeriod);\n</code></pre> <p>Description</p> <p><code>iowa_client_set_notification_default_periods()</code> configures the default periods for notifications sent to a LwM2M Server.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. shortID The ID assigned to the server or IOWA_LWM2M_ID_ALL. minPeriod The default minimum time in seconds between two notifications sent to the LwM2M Server for the same observation. maxPeriod The default maximum time in seconds between two notifications sent to the LwM2M Server for the same observation. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_403_FORBIDDEN shortID is zero. IOWA_COAP_404_NOT_FOUND shortID does not match any known server. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>When IOWA_LWM2M_ID_ALL is used as shortID, only already known LwM2M Servers will have the default periods configured. If a LwM2M Server is added after the call to this API, by default it will not have default periods.</p> <p>Setting the default periods does not affect already running observations.</p> <p>A minimum period set to zero is equivalent to having no minimum period defined. Same for maximum period.</p> <p>If maxPeriod is inferior to minPeriod, it is cleared (i.e. set to zero).</p>"},{"location":"content/ClientAPI.html#iowa_client_use_reliable_notifications","title":"iowa_client_use_reliable_notifications","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_use_reliable_notifications(iowa_context_t contextP,\nuint16_t shortId,\nbool enable);\n</code></pre> <p>Description</p> <p><code>iowa_client_use_reliable_notifications()</code> configures the LwM2M Client to ensure that notifications are received by the LwM2M Server.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. shortId The ID assigned to the server or IOWA_LWM2M_ID_ALL. enable If true, notifications will be reliable. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_403_FORBIDDEN shortID is zero. IOWA_COAP_404_NOT_FOUND shortID does not match any known server. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>When IOWA_LWM2M_ID_ALL is used as shortID, only already known LwM2M Servers will have reliable notifications. If a LwM2M Server is added after the call to this API, by default it will not use reliable notifications.</p> <p>If enable is true:</p> <ul> <li>on unreliable transports like UDP, the notifications are sent as Confirmable messages.</li> <li>events IOWA_EVENT_OBSERVATION_NOTIFICATION_ACKED and IOWA_EVENT_OBSERVATION_NOTIFICATION_FAILED are emitted.</li> <li>when storage queues are enabled, if a notification does not reach the LwM2M Server, IOWA stores it until the LwM2M Server is reachable again. See LWM2M_STORAGE_QUEUE_SUPPORT and LWM2M_STORAGE_QUEUE_PEEK_SUPPORT.</li> </ul>"},{"location":"content/ClientAPI.html#iowa_client_object_set_mode","title":"iowa_client_object_set_mode","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_object_set_mode(iowa_context_t contextP,\niowa_sensor_t id,\nuint8_t mode);\n</code></pre> <p>Description</p> <p><code>iowa_client_object_set_mode()</code> sets the sensor mode.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. id The ID of the sensor. mode Flags used to enable modes. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_404_NOT_FOUND id does not match any known sensor. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>To use this API, the compilation flag LWM2M_CLIENT_ASYNCHRONOUS_OPERATION_SUPPORT must be set.</p> <p>To set the sensor mode, you can use the following flag:</p> <ul> <li>IOWA_OBJECT_MODE_DEFAULT</li> <li>IOWA_OBJECT_MODE_ASYNCHRONOUS</li> </ul> <p>By default, sensors are synchronous.</p> <p>A call to <code>iowa_client_object_set_mode()</code> affects all the sensors of the same type.</p>"},{"location":"content/ClientAPI.html#iowa_client_object_set_configuration","title":"iowa_client_object_set_configuration","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_object_set_configuration(iowa_context_t contextP,\nuint16_t objectId,\niowa_object_setting_id_t settingId,\nvoid *argP);\n</code></pre> <p>Description</p> <p><code>iowa_client_object_set_configuration()</code> sets the object configuration.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. objectId The ID of the object. settingId The setting to set. See <code>iowa_object_setting_id_t</code>. argP A pointer to the setting value. Dependent on settingId. settingId argP type IOWA_OBJECT_SETTING_VERSION iowa_object_version_t * <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_402_BAD_OPTION settingId is unknown. IOWA_COAP_404_NOT_FOUND objectId does not match any known object. IOWA_COAP_406_NOT_ACCEPTABLE argP is nil. <p>Header File</p> <p>iowa_client.h</p>"},{"location":"content/ClientAPI.html#iowa_client_device_update_battery","title":"iowa_client_device_update_battery","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_device_update_battery(iowa_context_t contextP,\nuint8_t batteryLevel,\niowa_device_battery_status_t batteryStatus);\n</code></pre> <p>Description</p> <p><code>iowa_client_device_update_battery()</code> updates the battery level and status exposed in the <code>Device Object</code>.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. batteryLevel The battery level in percent. batteryStatus The battery status. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_405_METHOD_NOT_ALLOWED client has been configured without the flag IOWA_DEVICE_RSC_BATTERY in the <code>iowa_device_info_t</code> structure. To reconfigure the client, close and reopen a fresh IOWA Client context with <code>iowa_close()</code>, <code>iowa_init()</code> and <code>iowa_client_configure()</code>. IOWA_COAP_406_NOT_ACCEPTABLE batteryLevel is outside the range [0, 100]. IOWA_COAP_412_PRECONDITION_FAILED client is not configured. Call first <code>iowa_client_configure()</code>. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>For the device to expose its battery level and status, <code>iowa_client_configure()</code> must have been called with the IOWA_DEVICE_RSC_BATTERY flag.</p> <p>Before the first call to <code>iowa_client_device_update_battery()</code>, default value of batteryStatus is IOWA_DEVICE_BATTERY_STATUS_UNKNOWN.</p> <p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined, <code>iowa_client_device_update_battery()</code> can only be called when IOWA is built with the flag IOWA_DEVICE_SUPPORT_RSC_BATTERY.</p> <p>iowa_device_battery_status_t</p> <p>This is an enumeration of the following values:</p> IOWA_DEVICE_BATTERY_STATUS_NORMAL The battery is operating normally and not on power. IOWA_DEVICE_BATTERY_STATUS_CHARGING The battery is currently charging. IOWA_DEVICE_BATTERY_STATUS_CHARGE_COMPLETE The battery is fully charged and still on power. IOWA_DEVICE_BATTERY_STATUS_DAMAGED The battery has some problem. IOWA_DEVICE_BATTERY_STATUS_LOW_BATTERY The battery is low on charge. IOWA_DEVICE_BATTERY_STATUS_NOT_INSTALLED The battery is not installed. IOWA_DEVICE_BATTERY_STATUS_UNKNOWN The battery information is not available."},{"location":"content/ClientAPI.html#iowa_client_add_device_power_source","title":"iowa_client_add_device_power_source","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_add_device_power_source(iowa_context_t context,\niowa_power_source_type_t type,\nint voltageValue,\nint currentValue,\niowa_sensor_t *idP);\n</code></pre> <p>Description</p> <p><code>iowa_client_add_device_power_source()</code> adds a power source to Device object with initial value of voltage and current.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. type power source type. voltageValue initial voltage value (mV). currentValue initial current value (mA). idP Used to store the ID of the created power source. Not checked at runtime. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_412_PRECONDITION_FAILED client is not configured. Call first <code>iowa_client_configure()</code>. IOWA_COAP_405_METHOD_NOT_ALLOWED client has been configured without the flag IOWA_DEVICE_RSC_POWER_SOURCE in the <code>iowa_device_info_t</code> structure. To reconfigure the client, close and reopen a fresh IOWA Client context with <code>iowa_close()</code>, <code>iowa_init()</code> and <code>iowa_client_configure()</code>. IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>For the device to expose its power source information, <code>iowa_client_configure()</code> must have been called with the <code>IOWA_DEVICE_RSC_POWER_SOURCE</code> flag.</p> <p>To update a power source values, you need to call <code>iowa_client_update_device_power_source()</code>.</p> <p>To remove a power source, you need to call <code>iowa_client_remove_device_power_source()</code>.</p> <p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined, <code>iowa_client_add_device_power_source()</code> can only be called when IOWA is built with the flag IOWA_DEVICE_SUPPORT_RSC_POWER_SOURCE.</p> <p>iowa_power_source_type_t</p> <p>This is an enumeration of the following values:</p> IOWA_POWER_SOURCE_DC_POWER DC power supply. IOWA_POWER_SOURCE_INTERNAL_BATTERY Internal battery. IOWA_POWER_SOURCE_EXTERNAL_BATTERY External battery. IOWA_POWER_SOURCE_FUEL_CELL Fuel Cell IOWA_POWER_SOURCE_POWER_OVER_ETHERNET Power Over Ethernet. IOWA_POWER_SOURCE_USB USB. IOWA_POWER_SOURCE_AC_MAIN_POWER AC power supply. IOWA_POWER_SOURCE_SOLAR Solar energy."},{"location":"content/ClientAPI.html#iowa_client_remove_device_power_source","title":"iowa_client_remove_device_power_source","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_remove_device_power_source(iowa_context_t context,\niowa_sensor_t id);\n</code></pre> <p>Description</p> <p><code>iowa_client_remove_device_power_source()</code> removes a power source from the Device object.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. id ID of the power source to remove. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_412_PRECONDITION_FAILED client is not configured. Call first <code>iowa_client_configure()</code>. IOWA_COAP_404_NOT_FOUND id is not a device's power source. Valid id are only returned by <code>iowa_client_add_device_power_source()</code>. IOWA_COAP_405_METHOD_NOT_ALLOWED client has been configured without the flag IOWA_DEVICE_RSC_POWER_SOURCE in the <code>iowa_device_info_t</code> structure. To reconfigure the client, close and reopen a fresh IOWA Client context with <code>iowa_close()</code>, <code>iowa_init()</code> and <code>iowa_client_configure()</code>. IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>For the device to expose its power source information, <code>iowa_client_configure()</code> must have been called with the <code>IOWA_DEVICE_RSC_POWER_SOURCE</code> flag.</p> <p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined, <code>iowa_client_remove_device_power_source()</code> can only be called when IOWA is built with the flag IOWA_DEVICE_SUPPORT_RSC_POWER_SOURCE.</p>"},{"location":"content/ClientAPI.html#iowa_client_update_device_power_source","title":"iowa_client_update_device_power_source","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_update_device_power_source(iowa_context_t context,\niowa_sensor_t id,\nint voltageValue,\nint currentValue);\n</code></pre> <p>Description</p> <p><code>iowa_client_update_device_power_source()</code> updates a power source values to Device object.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. id ID of the power source. voltageValue new voltage value (mV). currentValue new current value (mA). <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_412_PRECONDITION_FAILED client is not configured. Call first <code>iowa_client_configure()</code>. IOWA_COAP_404_NOT_FOUND id is not a device's power source. Valid id are only returned by <code>iowa_client_add_device_power_source()</code>. IOWA_COAP_405_METHOD_NOT_ALLOWED client has been configured without the flag IOWA_DEVICE_RSC_POWER_SOURCE in the <code>iowa_device_info_t</code> structure. To reconfigure the client, close and reopen a fresh IOWA Client context with <code>iowa_close()</code>, <code>iowa_init()</code> and <code>iowa_client_configure()</code>. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>For the device to expose its power source information, <code>iowa_client_configure()</code> must have been called with the <code>IOWA_DEVICE_RSC_POWER_SOURCE</code> flag.</p> <p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined, <code>iowa_client_update_device_power_source()</code> can only be called when IOWA is built with the flag IOWA_DEVICE_SUPPORT_RSC_POWER_SOURCE.</p>"},{"location":"content/ClientAPI.html#iowa_client_update_device_information","title":"iowa_client_update_device_information","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_update_device_information(iowa_context_t contextP,\niowa_device_info_t *deviceInfoP);\n</code></pre> <p>Description</p> <p><code>iowa_client_update_device_information()</code> updates the device information.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. deviceInfoP pointer to the new device's information. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_400_BAD_REQUEST deviceInfoP is nil. IOWA_COAP_412_PRECONDITION_FAILED client is not configured. Call first <code>iowa_client_configure()</code>. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>This function update only the supported device resources that has been set previously in <code>iowa_client_configure()</code>.</p> <p>The parameters that can be updated are :</p> <ul> <li>Manufacturer.</li> <li>Model number.</li> <li>Serial number.</li> <li>Firmware version.</li> <li>Device type.</li> <li>Hardware version.</li> <li>Software version.</li> <li>Free memory when the flag IOWA_DEVICE_RSC_MEMORY_FREE in optFlags field is set.</li> <li>Total memory.</li> </ul> <p>Nil values in deviceInfoP will be ignored and won't make any changes except for the free memory.</p>"},{"location":"content/ClientAPI.html#iowa_client_set_device_error_code","title":"iowa_client_set_device_error_code","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_set_device_error_code(iowa_context_t context,\nuint8_t errorCode);\n</code></pre> <p>Description</p> <p><code>iowa_client_set_device_error_code()</code> sets an error code on Device object.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. errorCode The error code value to set between 1 and 32. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_412_PRECONDITION_FAILED client is not configured. Call first <code>iowa_client_configure()</code>. IOWA_COAP_402_BAD_OPTION errorCode is not a valid parameter. IOWA_COAP_404_NOT_FOUND errorCode is IOWA_ERROR_CODE_NO_ERROR but there is no error to clear. IOWA_COAP_409_CONFLICT errorCode has already been set. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>To clear one error code, you need to call <code>iowa_client_clear_device_error_code()</code>.</p> <p>To clear all error codes, you can call <code>iowa_client_set_device_error_code()</code> with errorCode argument set to IOWA_ERROR_CODE_NO_ERROR.</p> <p>The error code is an integer between 1 and 32. The LwM2M protocol defines eight values between 1 and 8 detailed below. Values between 9 and 15 are reserved for future use. The device maker or the application can use the values between 16 and 32 as proprietary error codes.</p> <p>LwM2M defined error code values are:</p> <ul> <li> IOWA_ERROR_CODE_NO_ERROR No error. </li> <li> IOWA_ERROR_CODE_LOW_BATTERY_POWER (1) Low battery power. </li> <li> IOWA_ERROR_CODE_EXTERNAL_POWER_SUPPLY_OFF (2) External power supply off. </li> <li> IOWA_ERROR_CODE_GPS_MODULE_FAILURE (3) GPS module failure. </li> <li> IOWA_ERROR_CODE_LOW_RECEIVED_SIGNAL_STRENGTH (4) Low received signal strength. </li> <li> IOWA_ERROR_CODE_OUT_OF_MEMORY (5) Out of memory. </li> <li> IOWA_ERROR_CODE_SMS_FAILURE (6) SMS failure. </li> <li> IOWA_ERROR_CODE_IP_CONNECTIVITY_FAILURE (7) IP connectivity failure. </li> <li> IOWA_ERROR_CODE_PERIPHERAL_MALFUNCTION (8) Peripheral malfunction. </li> </ul>"},{"location":"content/ClientAPI.html#iowa_client_clear_device_error_code","title":"iowa_client_clear_device_error_code","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_clear_device_error_code(iowa_context_t context,\nuint8_t errorCode);\n</code></pre> <p>Description</p> <p><code>iowa_client_clear_device_error_code()</code> clears an error code from the Device object.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. errorCode The error code to clear between 1 and 32. It can't be IOWA_ERROR_CODE_NO_ERROR. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_412_PRECONDITION_FAILED client is not configured. Call first <code>iowa_client_configure()</code>. IOWA_COAP_402_BAD_OPTION The error code IOWA_ERROR_CODE_NO_ERROR can't be cleared. IOWA_COAP_404_NOT_FOUND The error code is not set. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>LwM2M defined error code values are enumerated in <code>iowa_client_set_device_error_code()</code>.</p>"},{"location":"content/ClientAPI.html#iowa_client_update_device_time_information","title":"iowa_client_update_device_time_information","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_update_device_time_information(iowa_context_t contextP,\niowa_device_time_info_t *timeInfoP);\n</code></pre> <p>Description</p> <p><code>iowa_client_update_device_time_information()</code> updates time information to Device object.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. timeInfoP Current device time information: <code>iowa_device_time_info_t</code>. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_406_NOT_ACCEPTABLE either: <ul> <li>timeInfoP is nil.</li> </ul> <ul> <li>currentTime in timeInfoP is set with a negative value.</li> </ul> IOWA_COAP_412_PRECONDITION_FAILED client is not configured. Call first <code>iowa_client_configure()</code>. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>For the device to expose its time information, <code>iowa_client_configure()</code> must have been called with time information used.</p> <p><code>iowa_client_update_device_time_information()</code> can only be called when IOWA is built with at least one of the following flag: * IOWA_DEVICE_SUPPORT_RSC_CURRENT_TIME * IOWA_DEVICE_SUPPORT_RSC_UTC_OFFSET * IOWA_DEVICE_SUPPORT_RSC_TIMEZONE</p>"},{"location":"content/ClientAPI.html#iowa_client_update_device_external_information","title":"iowa_client_update_device_external_information","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_update_device_external_information(iowa_context_t contextP,\nsize_t extLinkCount,\niowa_lwm2m_object_link_t *extLinkArray);\n</code></pre> <p>Description</p> <p><code>iowa_client_update_device_external_information()</code> updates the external device information exposed in the Device object.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. extLinkCount The number of links in extLinkArray. extLinkArray An array of object links referencing object instance containing \"external device\" information. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_406_NOT_ACCEPTABLE extLinkArray is nil while extLinkCount is not 0. IOWA_COAP_412_PRECONDITION_FAILED client is not configured. Call first <code>iowa_client_configure()</code>. IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>The Resource \"ExtDevInfo\" must have been enabled by setting the optional flag IOWA_DEVICE_RSC_EXTERNAL_INFO when calling <code>iowa_client_configure()</code>.</p> <p>The field <code>version</code> in the <code>iowa_lwm2m_object_link_t</code> structure is ignored.</p> <p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined, <code>iowa_client_update_device_external_information()</code> can only be called when IOWA is built with the flag IOWA_DEVICE_SUPPORT_RSC_EXTERNAL_INFO.</p>"},{"location":"content/ClientAPI.html#iowa_client_add_custom_object","title":"iowa_client_add_custom_object","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_add_custom_object(iowa_context_t contextP,\nuint16_t objectID,\nsize_t instanceCount,\nuint16_t * instanceIDs,\nsize_t resourceCount,\niowa_lwm2m_resource_desc_t * resourceArray,\niowa_RWE_callback_t dataCallback,\niowa_CD_callback_t instanceCallback,\niowa_RI_callback_t resInstanceCallback,\nvoid * userData);\n</code></pre> <p>Description</p> <p><code>iowa_client_add_custom_object()</code> adds a new custom Object for the LwM2M Client to handle. The object is defined by its ID and a list of the resources it contains.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. objectID The ID of the Object. instanceCount The number of elements in instanceIDs. This can be 0. instanceIDs The IDs of the instances of the Object. This can be nil. resourceCount The number of elements in resourceArray. resourceArray An array of <code>iowa_lwm2m_resource_desc_t</code> composing the Object. dataCallback The callback to perform Read, Write and Execute operations on the resources. instanceCallback The callback to perform Create and Delete operations on Object instances. This can be nil. resInstanceCallback The callback to retrieve the list of instances of resources declared as multiple. This can be nil. userData Passed as argument to the callbacks. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. IOWA_COAP_403_FORBIDDEN objectID is 0, 1 or 3 which are reserved Object IDs. IOWA_COAP_406_NOT_ACCEPTABLE either: <ul> <li>objectID is IOWA_LWM2M_ID_ALL (65535).</li> </ul> <ul> <li>resourceCount is zero.</li> </ul> <ul> <li>resourceArray is nil.</li> </ul> <ul> <li>dataCallback is nil.</li> </ul> <ul> <li>instanceIDs is nil and instanceCount is not zero.</li> </ul> <ul> <li>resInstanceCallback is nil and one of the resources in resourceArray has the IOWA_RESOURCE_FLAG_MULTIPLE flag set.</li> </ul> <ul> <li>an instance ID is IOWA_LWM2M_ID_ALL.</li> </ul> <ul> <li>a resource ID is IOWA_LWM2M_ID_ALL.</li> </ul> <ul> <li>a resource has no operation defined.</li> </ul> <ul> <li>a resource is both set as streamable and asynchronous.</li> </ul> <ul> <li>a resource is set as executable with another operation.</li> </ul> <ul> <li>two resources have the same ID.</li> </ul> IOWA_COAP_409_CONFLICT this object already exists. Call first <code>iowa_client_remove_custom_object()</code>. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>Object IDs 0, 1 and 3 are reserved and cannot be used.</p> <p>Per Lightweight M2M specification, the ID of the instance of a single-instance Object is 0. When creating a single-instance Object, you can set instanceCount to zero and instanceCallback to nil. IOWA will automatically create an instance with ID 0.</p> <p>When the LwM2M Server creates a new instance of the custom object, instanceCallback is first called with the new instance ID then dataCallback is called with operation set to IOWA_DM_WRITE to initialize the instance. Thus, if instanceCallback is defined, dataCallback must handle the Write operation even on resources declared as read-only.</p>"},{"location":"content/ClientAPI.html#iowa_client_remove_custom_object","title":"iowa_client_remove_custom_object","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_remove_custom_object(iowa_context_t contextP,\nuint16_t objectID);\n</code></pre> <p>Description</p> <p><code>iowa_client_remove_custom_object()</code> removes a custom Object created with <code>iowa_client_add_custom_object()</code>.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. objectID The ID of the Object. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_403_FORBIDDEN objectID is 0, 1 or 3 which are reserved Object IDs. IOWA_COAP_404_NOT_FOUND objectID does not match any known object. IOWA_COAP_406_NOT_ACCEPTABLE objectID is IOWA_LWM2M_ID_ALL (65535). <p>Notes</p> <p>This API does not check if the LwM2M Object was added by calling <code>iowa_client_add_custom_object()</code> or by calling another high-level API like <code>iowa_client_IPSO_add_sensor()</code>.</p> <p>Header File</p> <p>iowa_client.h</p>"},{"location":"content/ClientAPI.html#iowa_client_object_resource_changed","title":"iowa_client_object_resource_changed","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_object_resource_changed(iowa_context_t contextP,\nuint16_t objectID,\nuint16_t instanceID,\nuint16_t resourceID);\n</code></pre> <p>Description</p> <p><code>iowa_client_object_resource_changed()</code> informs the IOWA stack that the value of a LwM2M Object resource changed.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. objectID The ID of the Object containing the resource. instanceID The ID of the Instance containing the resource. This can be IOWA_LWM2M_ID_ALL. resourceID The ID of the resource. This can be IOWA_LWM2M_ID_ALL. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_403_FORBIDDEN objectID is 0, 1 or 3 which are reserved Object IDs. IOWA_COAP_406_NOT_ACCEPTABLE objectID is IOWA_LWM2M_ID_ALL (65535). <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>This API does not check if the LwM2M Object resource exists. That's why this API does not return IOWA_COAP_404_NOT_FOUND. Actually, <code>iowa_client_object_resource_changed()</code> is only searching a match between the running observation and the URI provided. If a match is found a notification is sent, else nothing happens.</p>"},{"location":"content/ClientAPI.html#iowa_client_object_instance_changed","title":"iowa_client_object_instance_changed","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_object_instance_changed(iowa_context_t contextP,\nuint16_t objectID,\nuint16_t instanceID,\niowa_dm_operation_t operation);\n</code></pre> <p>Description</p> <p><code>iowa_client_object_instance_changed()</code> informs the IOWA stack that an instance of a LwM2M Object was created or deleted.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. objectID The ID of the Object containing the instance. instanceID The ID of the created or deleted Instance. operation IOWA_DM_CREATE if it is a new instance. IOWA_DM_DELETE if the instance was removed. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. IOWA_COAP_403_FORBIDDEN objectID is 0, 1 or 3 which are reserved Object IDs. IOWA_COAP_404_NOT_FOUND either: <ul> <li>objectID does not match any known object.</li> </ul> <ul> <li>operation is IOWA_DM_DELETE and instanceID does not match any known instance.</li> </ul> IOWA_COAP_405_METHOD_NOT_ALLOWED operation is neither IOWA_DM_CREATE nor IOWA_DM_DELETE. IOWA_COAP_406_NOT_ACCEPTABLE either: <ul> <li>objectID is IOWA_LWM2M_ID_ALL (65535).</li> </ul> <ul> <li>operation is IOWA_DM_CREATE and instanceID was already present.</li> </ul> <p>Header File</p> <p>iowa_client.h</p>"},{"location":"content/ClientAPI.html#iowa_client_notification_lock","title":"iowa_client_notification_lock","text":"<p>Prototype</p> <pre><code>void iowa_client_notification_lock(iowa_context_t contextP,\nbool enter);\n</code></pre> <p>Description</p> <p><code>iowa_client_notification_lock()</code> prevents or allows the IOWA stack to send notifications and registration updates.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. enter true to stop the notification, false to resume the notification. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>The main use is to perform several calls to <code>iowa_client_object_resource_changed()</code> on an Object without generating a notification each time if the Object is under observation.</p> <p>Registration updates are also blocked, allowing to add or remove several Objects or Object Instances.</p> <p>This function is useful only if IOWA is built with the IOWA_MULTITHREAD_SUPPORT flag. Inside a custom object callback, notifications are already disabled.</p>"},{"location":"content/ClientAPI.html#iowa_client_send_heartbeat","title":"iowa_client_send_heartbeat","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_send_heartbeat(iowa_context_t contextP,\nuint16_t shortID);\n</code></pre> <p>Description</p> <p><code>iowa_client_send_heartbeat()</code> sends a heartbeat message to a server.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. shortID The Short ID assigned to this Server. Can be equal to IOWA_LWM2M_ID_ALL. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_403_FORBIDDEN shortID is zero. IOWA_COAP_404_NOT_FOUND shortID does not match any known server. IOWA_COAP_412_PRECONDITION_FAILED client is not connected to the server with shortID. This can happen when: <ul> <li>The Server is a Bootstrap Server and the Client is already connect to a Server.</li> </ul> <ul> <li>The Client is configured with more than one Server and has established the connection with only one.</li> </ul> IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. IOWA_COAP_503_SERVICE_UNAVAILABLE heartbeat message has not been sent by the platform. <p>Header File</p> <p>iowa_client.h</p> <p>Notes</p> <p>If shortID is equal to IOWA_LWM2M_ID_ALL, the heartbeat message will be sent to all servers.</p> <p>For non LoRaWAN Servers, a registration update message is sent to the Server. The iowa_event_callback_t will be called with a IOWA_EVENT_REG_UPDATING event. Then, if a reply is received from the Server, the iowa_event_callback_t will be called with either a IOWA_EVENT_REG_REGISTERED or IOWA_EVENT_REG_FAILED event. Nothing is done when no reply is received from the Server.</p> <p>In the IOWA_EVENT_REG_REGISTERED case, the registration lifetime timer for the LwM2M Server is resetted.</p>"},{"location":"content/ClientAPI.html#ipso-objects","title":"IPSO Objects","text":"<p>This part allows the possibility to manipulate several IPSO Objects.</p> <p>To be able to use these objects, <code>iowa_ipso.h</code> must be included.</p>"},{"location":"content/ClientAPI.html#iowa_client_ipso_add_sensor","title":"iowa_client_IPSO_add_sensor","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_IPSO_add_sensor(iowa_context_t contextP,\niowa_IPSO_ID_t type,\nfloat value,\nconst char * unit,\nconst char * appType,\nfloat rangeMin, float rangeMax,\niowa_sensor_t * idP);\n</code></pre> <p>Description</p> <p><code>iowa_client_IPSO_add_sensor()</code> adds a new IPSO sensor for the LwM2M Client to handle. The sensor is defined by its type.</p> <p>The unit, the application type and the range are only informative and reported as-is to the LwM2M Server. Note that the LwM2M Server can modify the application type.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. type The type of sensor. See below. value The initial value measured by the sensor. unit The unit of the measured value as a nil-terminated string. This can be nil. appType The application type of the sensor as a free-form nil-terminated string. This can be nil. rangeMin The minimum value that can be measured by the sensor. rangeMax The maximum value that can be measured by the sensor. idP Used to store the ID of the created sensor. Not checked at runtime. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_402_BAD_OPTION type is unknown. IOWA_COAP_406_NOT_ACCEPTABLE either: <ul> <li>the sensor uses a Boolean value and value is neither 0.0 nor 1.0.</li> </ul> <ul> <li>the sensor uses a percentage value and value is outside the [0.0, 100.0] range.</li> </ul> <ul> <li>the sensor uses a compass direction value and value is outside the [0.0, 360.0] range.</li> </ul> IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation or a call to <code>iowa_system_gettime()</code> failed. <p>Header File</p> <p>objects/iowa_ipso.h</p> <p>Notes</p> <p>If both rangeMin and rangeMax are set to zero, the matching resources are ignored in the LwM2M Object.</p> <p>unit is not duplicated nor freed by IOWA. Make sure it is available until <code>iowa_close()</code> or <code>iowa_client_IPSO_remove_sensor()</code> is called. It is advised to use static strings.</p> <p>appType is duplicated internally by IOWA and can be reused or freed by the caller.</p> <p>Only a call to <code>iowa_client_IPSO_remove_sensor()</code> can free the memory allocated by <code>iowa_client_IPSO_add_sensor()</code>.</p>"},{"location":"content/ClientAPI.html#iowa_ipso_id_t","title":"iowa_IPSO_ID_t","text":"<p>This is an enumeration of the LwM2M IDs of the supported sensor types. See below.</p> <p>Float value sensors</p> <ul> <li>IOWA_IPSO_ANALOG_INPUT (3202)</li> <li>IOWA_IPSO_GENERIC (3300)</li> <li>IOWA_IPSO_ILLUMINANCE (3301)</li> <li>IOWA_IPSO_TEMPERATURE (3303)</li> <li>IOWA_IPSO_HUMIDITY (3304)</li> <li>IOWA_IPSO_BAROMETER (3315)</li> <li>IOWA_IPSO_VOLTAGE (3316)</li> <li>IOWA_IPSO_CURRENT (3317)</li> <li>IOWA_IPSO_FREQUENCY (3318)</li> <li>IOWA_IPSO_DEPTH (3319)</li> <li>IOWA_IPSO_PERCENTAGE (3320)</li> <li>IOWA_IPSO_ALTITUDE (3321)</li> <li>IOWA_IPSO_LOAD (3322)</li> <li>IOWA_IPSO_PRESSURE (3323)</li> <li>IOWA_IPSO_LOUDNESS (3324)</li> <li>IOWA_IPSO_CONCENTRATION (3325)</li> <li>IOWA_IPSO_ACIDITY (3326)</li> <li>IOWA_IPSO_CONDUCTIVITY (3327)</li> <li>IOWA_IPSO_POWER (3328)</li> <li>IOWA_IPSO_POWER_FACTOR (3329)</li> <li>IOWA_IPSO_RATE (3346)</li> <li>IOWA_IPSO_DISTANCE (3330)</li> <li>IOWA_IPSO_ENERGY (3331)</li> </ul> <p>Boolean value sensors</p> <p>For these sensors, the value must be either 0.0 or 1.0:</p> <ul> <li>IOWA_IPSO_DIGITAL_INPUT (3200)</li> <li>IOWA_IPSO_PRESENCE (3302)</li> <li>IOWA_IPSO_ON_OFF_SWITCH (3342)</li> <li>IOWA_IPSO_PUSH_BUTTON (3347)</li> </ul> <p>Compass direction value sensors</p> <p>For these sensors, the value must be between 0.0 and 360.0:</p> <ul> <li>IOWA_IPSO_DIRECTION (3332)</li> </ul> <p>Notes</p> <p>The enumeration value IOWA_IPSO_LEVEL_CONTROL no longer exists.</p> <p>The Dimmer APIs is now responsible for adding, removing and updating percentage sensors, by using the following functions:</p> <code>iowa_client_add_dimmer_object()</code> to add a new dimmer sensor. <code>iowa_client_remove_dimmer_object()</code> to remove a dimmer sensor. <code>iowa_client_dimmer_update_value()</code> to update the dimmer's level value. <code>iowa_client_dimmer_update_values()</code> to update the dimmer's multiple level values."},{"location":"content/ClientAPI.html#iowa_client_ipso_update_value","title":"iowa_client_IPSO_update_value","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_IPSO_update_value(iowa_context_t contextP,\niowa_sensor_t id,\nfloat value);\n</code></pre> <p>Description</p> <p><code>iowa_client_IPSO_update_value()</code> updates the value of an IPSO sensor.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. id The ID of the sensor as returned by <code>iowa_client_IPSO_add_sensor()</code>. value The new value measured by the sensor. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_404_NOT_FOUND id does not match any known sensor. IOWA_COAP_406_NOT_ACCEPTABLE either: <ul> <li>the sensor uses a Boolean value and value is neither 0.0 nor 1.0.</li> </ul> <ul> <li>the sensor uses a percentage value and value is outside the [0.0, 100.0] range.</li> </ul> <ul> <li>the sensor uses a compass direction value and value is outside the [0.0, 360.0] range.</li> </ul> IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation or a call to <code>iowa_system_gettime()</code> failed. <p>Header File</p> <p>objects/iowa_ipso.h</p>"},{"location":"content/ClientAPI.html#iowa_client_ipso_update_values","title":"iowa_client_IPSO_update_values","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_IPSO_update_values(iowa_context_t contextP,\niowa_sensor_t id,\nsize_t valueCount,\niowa_ipso_timed_value_t *valueArray);\n</code></pre> <p>Description</p> <p><code>iowa_client_IPSO_update_values()</code> updates multiple times the value of an IPSO Object sensor.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. id The ID of the sensor as returned by <code>iowa_client_IPSO_add_sensor()</code>. valueCount The number of values in valueArray. valueArray The <code>iowa_ipso_timed_value_t</code> list of new values. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_404_NOT_FOUND id does not match any known sensor. IOWA_COAP_406_NOT_ACCEPTABLE either: <ul> <li>one of the timestamped value has a negative value.</li> </ul> <ul> <li>the sensor uses a Boolean value and value is neither 0.0 nor 1.0.</li> </ul> <ul> <li>the sensor uses a percentage value and value is outside the [0.0, 100.0] range.</li> </ul> <ul> <li>the sensor uses a compass direction value and value is outside the [0.0, 360.0] range.</li> </ul> IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation or a call to <code>iowa_system_gettime()</code> failed. <p>Header File</p> <p>objects/iowa_ipso.h</p> <p>Notes</p> <p><code>iowa_client_IPSO_update_values()</code> can only be used when the define LWM2M_SUPPORT_TIMESTAMP is set.</p> <p>The timestamp must be absolute and not relative to the current time, meaning negative values are not accepted. If the timestamp is equal to zero, it is ignored.</p> <p>Calling <code>iowa_client_IPSO_update_values()</code> will overwrite the previous values list. This has multiple consequences:</p> <ul> <li>If the values have not been sent to the Server, the previous values are lost. Values are only sent if the Server do a Read operation or if the Server has set an Observation.</li> <li>If the values are in the way to be sent to the Server and <code>iowa_client_IPSO_update_values()</code> is called during the process, some old values will be lost. This API is trying to send the values in best effort. Recent timestamped values are processed in priority before the oldest ones.</li> </ul> <p>Timestamp information is only present if the used Content Format is:</p> <ul> <li>JSON: <code>LWM2M_SUPPORT_JSON</code></li> <li>SenML JSON: <code>LWM2M_SUPPORT_SENML_JSON</code></li> <li>SenML CBOR: <code>LWM2M_SUPPORT_SENML_CBOR</code></li> </ul>"},{"location":"content/ClientAPI.html#iowa_client_ipso_remove_sensor","title":"iowa_client_IPSO_remove_sensor","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_client_IPSO_remove_sensor(iowa_context_t contextP,\niowa_sensor_t id);\n</code></pre> <p>Description</p> <p><code>iowa_client_IPSO_remove_sensor()</code> removes from the LwM2M Client an IPSO sensor created with <code>iowa_client_IPSO_add_sensor()</code>.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. id The ID of the sensor as returned by <code>iowa_client_IPSO_add_sensor()</code>. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_402_BAD_OPTION id is not an IPSO sensor. Valid id are only returned by <code>iowa_client_IPSO_add_sensor()</code>. IOWA_COAP_404_NOT_FOUND IPSO referred by id does not exist. <p>Header File</p> <p>objects/iowa_ipso.h</p>"},{"location":"content/CoapAPI.html","title":"CoAP API Reference","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/CommonAPI.html","title":"Common API Reference","text":"<p>This is an excerpt from the IOWA Full SDK.</p> <p>Please Contact us</p> <p>The functions explained below are defined inside the file include/iowa.h.</p>"},{"location":"content/CommonAPI.html#presentation","title":"Presentation","text":"<p>Whatever the role of your application (Client or Server), it builds on the following skeleton: <pre><code>#include \"iowa.h\"\n\nint main(int argc,\nchar *argv[])\n{\niowa_context_t iowaH;\niowa_status_t result;\n\n/******************\n     * Initialization\n     */\n\niowaH = iowa_init(NULL);\n\n/******************\n     * \"Main loop\"\n     */\n\ndo\n{\nresult = iowa_step(iowaH, 5);\n} while (result == IOWA_COAP_NO_ERROR)\n\niowa_close(iowaH);\n\nreturn 0;\n}\n</code></pre></p>"},{"location":"content/CommonAPI.html#data-types","title":"Data types","text":""},{"location":"content/CommonAPI.html#iowa_status_t","title":"iowa_status_t","text":"<p>This is the return type of most of the IOWA APIs. This is an enumeration matching the CoAP status codes, similar to the HTTP status codes.</p> <pre><code>typedef uint8_t iowa_status_t;\n\n#define IOWA_COAP_NO_ERROR                        0x00\n#define IOWA_COAP_201_CREATED                     0x41\n#define IOWA_COAP_202_DELETED                     0x42\n#define IOWA_COAP_203_VALID                       0x43\n#define IOWA_COAP_204_CHANGED                     0x44\n#define IOWA_COAP_205_CONTENT                     0x45\n#define IOWA_COAP_231_CONTINUE                    0x5F\n#define IOWA_COAP_400_BAD_REQUEST                 0x80\n#define IOWA_COAP_401_UNAUTHORIZED                0x81\n#define IOWA_COAP_402_BAD_OPTION                  0x82\n#define IOWA_COAP_403_FORBIDDEN                   0x83\n#define IOWA_COAP_404_NOT_FOUND                   0x84\n#define IOWA_COAP_405_METHOD_NOT_ALLOWED          0x85\n#define IOWA_COAP_406_NOT_ACCEPTABLE              0x86\n#define IOWA_COAP_408_REQUEST_ENTITY_INCOMPLETE   0x88\n#define IOWA_COAP_409_CONFLICT                    0x89\n#define IOWA_COAP_412_PRECONDITION_FAILED         0x8C\n#define IOWA_COAP_413_REQUEST_ENTITY_TOO_LARGE    0x8D\n#define IOWA_COAP_415_UNSUPPORTED_CONTENT_FORMAT  0x8F\n#define IOWA_COAP_422_UNPROCESSABLE_ENTITY        0x96\n#define IOWA_COAP_429_TOO_MANY_REQUESTS           0x9D\n#define IOWA_COAP_500_INTERNAL_SERVER_ERROR       0xA0\n#define IOWA_COAP_501_NOT_IMPLEMENTED             0xA1\n#define IOWA_COAP_502_BAD_GATEWAY                 0xA2\n#define IOWA_COAP_503_SERVICE_UNAVAILABLE         0xA3\n#define IOWA_COAP_504_GATEWAY_TIMEOUT             0xA4\n#define IOWA_COAP_505_PROXYING_NOT_SUPPORTED      0xA5\n</code></pre>"},{"location":"content/CommonAPI.html#iowa_context_t","title":"iowa_context_t","text":"<p>This opaque type is used to store the context of the IOWA stack engine. It is created by calling <code>iowa_init()</code> and destroyed by calling <code>iowa_close()</code>.</p> <p>Multiple <code>iowa_context_t</code> can be created within the same process.</p>"},{"location":"content/CommonAPI.html#iowa_dm_operation_t","title":"iowa_dm_operation_t","text":"<pre><code>typedef uint8_t iowa_dm_operation_t;\n\n#define IOWA_DM_UNDEFINED        0\n#define IOWA_DM_READ             1\n#define IOWA_DM_FREE             2\n#define IOWA_DM_WRITE            3\n#define IOWA_DM_EXECUTE          4\n#define IOWA_DM_CREATE           5\n#define IOWA_DM_DELETE           6\n#define IOWA_DM_DISCOVER         7\n#define IOWA_DM_WRITE_ATTRIBUTES 8\n#define IOWA_DM_NOTIFY           9\n#define IOWA_DM_CANCEL           10\n#define IOWA_DM_DATA_PUSH        11\n#define IOWA_DM_READ_REQUEST     12\n</code></pre> <p>This is an enumeration of the following values:</p> IOWA_DM_UNDEFINED No specific LwM2M operation, this should never be used and only serves as a non default operation. IOWA_DM_READ LwM2M Read operation is used to access the value of an Object, Object Instances, and Resources. IOWA_DM_FREE Free operation is used to clean the allocated memory on IOWA_DM_READ operation. IOWA_DM_WRITE LwM2M Write operation is used to change the value of an Object, Object Instances, and Resources. IOWA_DM_EXECUTE LwM2M Execute operation is used to initiate some action, and can only be performed on individual Resources. IOWA_DM_CREATE LwM2M Create operation is used to create Object Instance(s). IOWA_DM_DELETE LwM2M Delete operation is used to delete an Object Instance. IOWA_DM_DISCOVER LwM2M Discover operation is used to discover LwM2M Attributes attached to an Object, Object Instances, and Resources. IOWA_DM_WRITE_ATTRIBUTES LwM2M Write-Attributes operation is used to change the LwM2M Attributes of an Object, Object Instances, and Resources. IOWA_DM_NOTIFY LwM2M Notify operation is used to notify the change of a value during a valid Observation on an Object Instance or Resource. IOWA_DM_CANCEL LwM2M Cancel operation is used to end an Observation. IOWA_DM_DATA_PUSH LwM2M Data push operation is used when LwM2M Server receives the value of an Object, Object Instances, and Resources without requested it. IOWA_DM_READ_REQUEST On the Client side, inform a custom Object that a LwM2M Server will perform a READ operation. See iowa_lwm2m_resource_desc_t. <p>Notes</p> <p>This enumeration is used on both Server and Client side. But not all the values are used depending on the side.</p> <p>Server callbacks can be called with:</p> <ul> <li>IOWA_DM_READ</li> <li>IOWA_DM_WRITE</li> <li>IOWA_DM_EXECUTE</li> <li>IOWA_DM_CREATE</li> <li>IOWA_DM_DELETE</li> <li>IOWA_DM_DISCOVER</li> <li>IOWA_DM_WRITE_ATTRIBUTES</li> <li>IOWA_DM_NOTIFY</li> <li>IOWA_DM_DATA_PUSH</li> </ul> <p>Client callbacks can be called with:</p> <ul> <li>IOWA_DM_READ</li> <li>IOWA_DM_FREE</li> <li>IOWA_DM_WRITE</li> <li>IOWA_DM_EXECUTE</li> <li>IOWA_DM_CREATE</li> <li>IOWA_DM_DELETE</li> <li>IOWA_DM_DATA_PUSH</li> </ul>"},{"location":"content/CommonAPI.html#iowa_lwm2m_data_type_t","title":"iowa_lwm2m_data_type_t","text":"<pre><code>typedef uint8_t iowa_lwm2m_data_type_t;\n\n#define IOWA_LWM2M_TYPE_UNDEFINED        0\n#define IOWA_LWM2M_TYPE_STRING           1\n#define IOWA_LWM2M_TYPE_OPAQUE           2\n#define IOWA_LWM2M_TYPE_INTEGER          3\n#define IOWA_LWM2M_TYPE_FLOAT            4\n#define IOWA_LWM2M_TYPE_BOOLEAN          5\n#define IOWA_LWM2M_TYPE_CORE_LINK        6\n#define IOWA_LWM2M_TYPE_OBJECT_LINK      7\n#define IOWA_LWM2M_TYPE_TIME             8\n#define IOWA_LWM2M_TYPE_UNSIGNED_INTEGER 9\n</code></pre> <p>This is an enumeration of the following values:</p> IOWA_LWM2M_TYPE_UNDEFINED No specific data type: it is only used for Executable Resource. IOWA_LWM2M_TYPE_STRING A UTF-8 string. IOWA_LWM2M_TYPE_OPAQUE A sequence of binary octets. IOWA_LWM2M_TYPE_INTEGER An 64-bit signed integer. IOWA_LWM2M_TYPE_FLOAT A 32 or 64-bit floating point value. IOWA_LWM2M_TYPE_BOOLEAN An unsigned integer with the value 0 for false and the value 1 for true. IOWA_LWM2M_TYPE_CORE_LINK A UTF-8 string representing the relation between resources and links. IOWA_LWM2M_TYPE_OBJECT_LINK Reference to an Instance of a given Object. IOWA_LWM2M_TYPE_TIME A signed integer representing the number of seconds. IOWA_LWM2M_TYPE_UNSIGNED_INTEGER An unsigned integer."},{"location":"content/CommonAPI.html#iowa_lwm2m_data_t","title":"iowa_lwm2m_data_t","text":"<p>When the LwM2M Server and the LwM2M Client exchange data, at the application level, they are presented in <code>iowa_lwm2m_data_t</code> structures.</p> <pre><code>typedef struct\n{\nuint16_t objectID;\nuint16_t instanceID;\nuint16_t resourceID;\nuint16_t resInstanceID;\niowa_lwm2m_data_type_t type;\nunion\n{\nbool    asBoolean;\nint64_t asInteger;\ndouble  asFloat;\nstruct\n{\nsize_t   length;\nuint8_t *buffer;\n} asBuffer;\nstruct\n{\nsize_t   totalSize;\nuint32_t details;\nuint8_t *buffer;\n} asBlock;\niowa_lwm2m_object_link_t asObjLink;\n} value;\nint32_t timestamp;\n} iowa_lwm2m_data_t;\n</code></pre> <p>This structure contains the value of a LwM2M resource along its complete URI.</p> objectID ID of the Object containing the resource. instanceID ID of the Object Instance containing the resource. resourceID ID of the resource. resInstanceID ID of the resource instance. For single instance resource, this is always IOWA_LWM2M_ID_ALL. type The datatype of the resource. value.asBoolean The value of the resource when type is IOWA_LWM2M_TYPE_BOOLEAN. value.asInteger The value of the resource when type is IOWA_LWM2M_TYPE_INTEGER, IOWA_LWM2M_TYPE_TIME or IOWA_LWM2M_TYPE_UNSIGNED_INTEGER. value.asFloat The value of the resource when type is IOWA_LWM2M_TYPE_FLOAT. value.asBuffer The value of the resource when type is IOWA_LWM2M_TYPE_CORE_LINK, IOWA_LWM2M_TYPE_STRING, IOWA_LWM2M_TYPE_OPAQUE or IOWA_LWM2M_TYPE_UNDEFINED. value.asBlock A part of the value of the resource when type is IOWA_LWM2M_TYPE_STRING_BLOCK, IOWA_LWM2M_TYPE_OPAQUE_BLOCK, or IOWA_LWM2M_TYPE_CORE_LINK_BLOCK. See Custom Object Streaming APIs for usage details. value.asObjLink The value of the resource when type is IOWA_LWM2M_TYPE_OBJECT_LINK. timestamp The timestamp value in seconds. Time is always absolute, and timestamp is present when the value is greater than zero. This can not be negative."},{"location":"content/CommonAPI.html#iowa_lwm2m_protocol_version_t","title":"iowa_lwm2m_protocol_version_t","text":"<pre><code>typedef enum\n{\nIOWA_LWM2M_VERSION_UNDEFINED = 0,\nIOWA_LWM2M_VERSION_1_0,\nIOWA_LWM2M_VERSION_1_1,\nIOWA_LWM2M_VERSION_1_2\n} iowa_lwm2m_protocol_version_t;\n</code></pre> <p>This contains the possible LwM2M Enabler version. It is an enumeration of the following values:</p> IOWA_LWM2M_VERSION_UNDEFINED Unknown LwM2M enabler version. IOWA_LWM2M_VERSION_1_0 LwM2M Enabler version 1.0. IOWA_LWM2M_VERSION_1_1 LwM2M Enabler version 1.1. IOWA_LWM2M_VERSION_1_2 LwM2M Enabler version 1.2."},{"location":"content/CommonAPI.html#iowa_object_version_t","title":"iowa_object_version_t","text":"<pre><code>typedef struct\n{\nuint8_t major;\nuint8_t minor;\n} iowa_object_version_t;\n</code></pre> <p>The <code>iowa_object_version_t</code> structure is used to set the version of an object.</p> major Major version of the Object. minor Minor version of the Object. <p>Notes</p> <p>To set the object version in a Client application, you need to call <code>iowa_client_object_set_configuration()</code> with IOWA_OBJECT_SETTING_VERSION as setting and a pointer to <code>iowa_object_version_t</code> as argument.</p>"},{"location":"content/CommonAPI.html#iowa_lwm2m_object_link_t","title":"iowa_lwm2m_object_link_t","text":"<pre><code>typedef struct\n{\nuint16_t objectId;\nuint16_t instanceId;\niowa_object_version_t version;\n} iowa_lwm2m_object_link_t;\n</code></pre>"},{"location":"content/CommonAPI.html#iowa_content_format_t","title":"iowa_content_format_t","text":"<pre><code>typedef uint16_t iowa_content_format_t;\n\n#define IOWA_CONTENT_FORMAT_TEXT       0\n#define IOWA_CONTENT_FORMAT_OPAQUE     42\n#define IOWA_CONTENT_FORMAT_CBOR       60\n#define IOWA_CONTENT_FORMAT_SENML_JSON 110\n#define IOWA_CONTENT_FORMAT_SENML_CBOR 112\n#define IOWA_CONTENT_FORMAT_TLV_OLD    1542\n#define IOWA_CONTENT_FORMAT_JSON_OLD   1543\n#define IOWA_CONTENT_FORMAT_TLV        11542\n#define IOWA_CONTENT_FORMAT_JSON       11543\n#define IOWA_CONTENT_FORMAT_LWM2M_CBOR 11544\n#define IOWA_CONTENT_FORMAT_UNSET      0xFFFF\n</code></pre> <p>This is an enumeration of the following values:</p> IOWA_CONTENT_FORMAT_TEXT Plain text encoding (e.g. \"123\", \"-123.45\"). Usable only for single resource encoding. IOWA_CONTENT_FORMAT_OPAQUE A sequence of binary octets. Usable only for single resource encoding which data type is Opaque. IOWA_CONTENT_FORMAT_CBOR CBOR encoding. Usable only for single resource encoding. IOWA_CONTENT_FORMAT_SENML_JSON LwM2M specific SenML JSON encoding. This may not be supported by all Clients. See <code>iowa_client_t</code>. IOWA_CONTENT_FORMAT_SENML_CBOR LwM2M specific SenML CBOR encoding. This may not be supported by all Clients. See <code>iowa_client_t</code>. IOWA_CONTENT_FORMAT_TLV_OLD LwM2M specific binary Type-Length-Value format. Usually the most compact one. This one is not anymore used, it only serves as backward compatibility with old LwM2M stack implementation (previous 1.0). IOWA_CONTENT_FORMAT_JSON_OLD LwM2M specific JSON encoding. This may not be supported by all Clients. See <code>iowa_client_t</code>. This one is not anymore used, it only serves as backward compatibility with old LwM2M stack implementation (previous 1.0). IOWA_CONTENT_FORMAT_TLV LwM2M specific binary Type-Length-Value format. Usually the most compact one. IOWA_CONTENT_FORMAT_JSON LwM2M specific JSON encoding. This may not be supported by all Clients. See <code>iowa_client_t</code>. IOWA_CONTENT_FORMAT_LWM2M_CBOR LwM2M specific binary format replacing the TLV format. Usually the most compact one. IOWA_CONTENT_FORMAT_UNSET Used to reset the encoding to the default one."},{"location":"content/CommonAPI.html#iowa_lwm2m_uri_t","title":"iowa_lwm2m_uri_t","text":"<pre><code>typedef struct\n{\nuint16_t objectId;\nuint16_t instanceId;\nuint16_t resourceId;\nuint16_t resInstanceId;\n} iowa_lwm2m_uri_t;\n</code></pre> <p>This structure represents a LwM2M URI.</p> <p>In the LwM2M resource model, resources are grouped into Objects. These Objects have instances. Hence, the URI of a resource is in the form <code>/{Object}/{Object Instance}/{Resource}</code>. Moreover, some resources, described are multiple, can have several instances, leading to URI in the form <code>/{Object}/{Object Instance}/{Resource}/{Resource Instance}</code>.</p> objectId ID of a LwM2M Object. instanceId ID of the Object Instance. resourceId ID of the resource. resInstanceId ID of the resource instance. <p>When a segment of the URI is not set, the value of the corresponding field is set to IOWA_LWM2M_ID_ALL.</p> <p>For instance, the URI <code>/3/0/9</code> is represented as: <pre><code>iowa_lwm2m_uri_t::objectId = 3\niowa_lwm2m_uri_t::instanceId = 0\niowa_lwm2m_uri_t::resourceId = 9\niowa_lwm2m_uri_t::resInstanceId = IOWA_LWM2M_ID_ALL\n</code></pre></p> <p>the URI <code>/5</code> is represented as: <pre><code>iowa_lwm2m_uri_t::objectId = 5\niowa_lwm2m_uri_t::instanceId = IOWA_LWM2M_ID_ALL\niowa_lwm2m_uri_t::resourceId = IOWA_LWM2M_ID_ALL\niowa_lwm2m_uri_t::resInstanceId = IOWA_LWM2M_ID_ALL\n</code></pre></p>"},{"location":"content/CommonAPI.html#api","title":"API","text":""},{"location":"content/CommonAPI.html#iowa_init","title":"iowa_init","text":"<p>Prototype</p> <pre><code>iowa_context_t iowa_init(void * userData);\n</code></pre> <p>Description</p> <p><code>iowa_init()</code> initializes an IOWA context.</p> <p>Arguments</p> userData Pointer to application-specific data. This is passed as argument to the Communication Abstraction Interface functions. This can be nil. <p>Return Value</p> <p>An <code>iowa_context_t</code> in case of success or NULL in case of memory allocation error.</p> <p>Header File</p> <p>iowa.h</p>"},{"location":"content/CommonAPI.html#iowa_step","title":"iowa_step","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_step(iowa_context_t contextP,\nint32_t timeout);\n</code></pre> <p>Description</p> <p><code>iowa_step()</code> runs the stack engine during the specified time.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. timeout The allowed time to run in seconds. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_500_INTERNAL_SERVER_ERROR either: <ul> <li>a memory allocation failed.</li> </ul> <ul> <li><code>iowa_system_gettime()</code> returned an error.</li> </ul> IOWA_COAP_503_SERVICE_UNAVAILABLE one of the <code>iowa_system_connection...()</code> functions returned an error. LwM2M Client only: when the Client failed to connect to any Server. (iowa_event_callback_t is called with a IOWA_EVENT_REG_FAILED event.) <p>Header File</p> <p>iowa.h</p> <p>Notes</p> <p>If timeout is a negative value:</p> <ul> <li><code>iowa_step()</code> will return only in case of error.</li> <li><code>iowa_system_connection_select()</code> will be called with INT32_MAX.</li> </ul> <p>For LwM2M Clients: if <code>iowa_step()</code> returns an IOWA_COAP_503_SERVICE_UNAVAILABLE error because it is not registered to any LwM2M Server, subsequent call to <code>iowa_step()</code>, will retry to register to the known LwM2M Servers.</p> <p><code>iowa_stop()</code> can be used to make <code>iowa_step()</code>return immediately.</p> <p><code>iowa_step()</code> is not thread-safe against itself when called on the same IOWA context. Thus, there should be only a single thread calling <code>iowa_step()</code> for a given IOWA context. Note that all other IOWA APIs are thread-safe.</p>"},{"location":"content/CommonAPI.html#iowa_flush_before_pause","title":"iowa_flush_before_pause","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_flush_before_pause(iowa_context_t contextP,\nint32_t duration,\nuint32_t *delayP);\n</code></pre> <p>Description</p> <p><code>iowa_flush_before_pause()</code> is used to inform the stack that the device will pause. <code>iowa_flush_before_pause()</code> performs all the pending and required operations of the stack engine before returning.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. duration The duration of the planned pause in seconds. delayP The delay before the next IOWA scheduled operation. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_406_NOT_ACCEPTABLE either: <ul> <li>duration is negative.</li> </ul> <ul> <li>for a LwM2M Client: duration is longer than one of the LwM2M Server registration lifetime.</li> </ul> IOWA_COAP_500_INTERNAL_SERVER_ERROR either: <ul> <li>a memory allocation failed.</li> </ul> <ul> <li><code>iowa_system_gettime()</code> returned an error.</li> </ul> IOWA_COAP_503_SERVICE_UNAVAILABLE one of the <code>iowa_system_connection...()</code> functions returned an error. <p>Header File</p> <p>iowa.h</p> <p>Notes</p> <p>In LwM2M Client mode: if no server are configured, the function returns immediately with no error.</p> <p>A LwM2M Server should never stop. For a LwM2M Server, <code>iowa_flush_before_pause()</code> will just wait for all pending CoAP transactions to finish.</p>"},{"location":"content/CommonAPI.html#iowa_stop","title":"iowa_stop","text":"<p>Prototype</p> <pre><code>void iowa_stop(iowa_context_t contextP);\n</code></pre> <p>Description</p> <p><code>iowa_stop()</code> stops the stack engine and make <code>iowa_step()</code> return immediately.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa.h</p>"},{"location":"content/CommonAPI.html#iowa_close","title":"iowa_close","text":"<p>Prototype</p> <pre><code>void iowa_close(iowa_context_t contextP);\n</code></pre> <p>Description</p> <p><code>iowa_close()</code> closes an IOWA context.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa.h</p>"},{"location":"content/CommonAPI.html#iowa_clock_reset","title":"iowa_clock_reset","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_clock_reset(iowa_context_t contextP);\n</code></pre> <p>Description</p> <p><code>iowa_clock_reset()</code> informs IOWA that <code>iowa_system_gettime()</code> has lost track of time and that IOWA must re-synchronize its internal timers.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_500_INTERNAL_SERVER_ERROR <ul> <li>the <code>iowa_system_gettime()</code> function returned an error.</li> </ul> <p>Header File</p> <p>iowa.h</p> <p>Notes</p> <p>When used as a LwM2M Client, IOWA will update the registrations to the LwM2M Servers. If Resources are under observation with time attributes (pmin or pmax), IOWA will send a Notification.</p>"},{"location":"content/CommonAPI.html#iowa_connection_closed","title":"iowa_connection_closed","text":"<p>Prototype</p> <pre><code>void iowa_connection_closed(iowa_context_t contextP,\nvoid *connP);\n</code></pre> <p>Description</p> <p><code>iowa_connection_closed()</code> informs IOWA that a connection was closed by an external event (e.g. peer disconnection).</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. connP The closed connection of the same user-defined type as the one returned by <code>iowa_system_connection_open()</code>. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa.h</p>"},{"location":"content/Components.html","title":"IOWA Components","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/Configuration.html","title":"Configuration","text":"<p>IOWA relies on the compilation flags described below to enable or disable features. These compilation flags can be set in the header file <code>iowa_config.h</code>. Every source file of IOWA includes this header file.</p> <p>To create your product, a template is provided in the <code>include</code> folder.</p>"},{"location":"content/Configuration.html#platform-configuration","title":"Platform Configuration","text":""},{"location":"content/Configuration.html#lwm2m_big_endian-and-lwm2m_little_endian","title":"LWM2M_BIG_ENDIAN and LWM2M_LITTLE_ENDIAN","text":"<p>Define one and only one of these two to specify the endianness of your platform.</p>"},{"location":"content/Configuration.html#iowa_buffer_size","title":"IOWA_BUFFER_SIZE","text":"<p>When using a packet switching transport (e.g. UDP), IOWA stores the received data in a static buffer. IOWA_BUFFER_SIZE defines the size in bytes of this static buffer. Note that for the WebSocket transport, IOWA uses a dynamically allocated buffer instead of a static one.</p>"},{"location":"content/Configuration.html#iowa_use_snprintf","title":"IOWA_USE_SNPRINTF","text":"<p>When using a text content format, IOWA uses snprintf to serialize float which absolute value is greater than INT64_MAX.</p>"},{"location":"content/Configuration.html#iowa-configuration","title":"IOWA Configuration","text":""},{"location":"content/Configuration.html#transports","title":"Transports","text":"<p>IOWA can support various transports. These transports are enabled by defining the following:</p> IOWA_UDP_SUPPORT Support for UDP transport. URI scheme is in the form \"coap://\" or \"coaps://\". This transport requires IOWA_BUFFER_SIZE to be defined. IOWA_TCP_SUPPORT Support for TCP transport. URI scheme is in the form \"coap+tcp://\" or \"coaps+tcp://\". IOWA_WEBSOCKET_SUPPORT Support for WebSocket transport. URI scheme is in the form \"coap+ws://\" or \"coaps+ws://\". This transport requires IOWA_BUFFER_SIZE to be defined. Note that this transport is not part of the LwM2M standard and may work only with IoTerop's ALASKA device management platform. IOWA_SMS_SUPPORT Support for SMS transport. URI scheme is in the form \"coap+sms://\" for text SMS or \"sms://\" for binary SMS. This transport requires IOWA_BUFFER_SIZE to be defined. IOWA_LORAWAN_SUPPORT Support for LoRaWAN transport. URI scheme is in the form \"lorawan://\". This transport requires IOWA_BUFFER_SIZE to be defined."},{"location":"content/Configuration.html#additional-flags","title":"Additional Flags","text":"IOWA_COAP_BLOCK_SUPPORT Support for full packet fragmentation at CoAP level as defined in RFC 7959 \"Block-Wise Transfers in the Constrained Application Protocol (CoAP)\". IOWA_COAP_BLOCK_MINIMAL_SUPPORT Support for reassembly of fragmented packets at CoAP level. Automatically defined with IOWA_COAP_BLOCK_SUPPORT. Useful for constrained devices using the \"Push\" method of Device Update. IOWA_COAP_OSCORE_SUPPORT Support for security at the CoAP message level using Object Security for Constrained RESTful Environments (RFC 8613). IOWA_COAP_ACK_MEMORY_LIMIT Define a limit in bytes for the memory used by CoAP Acknowledgements stored for potential re-transmissions e.g. <code>#define IOWA_COAP_ACK_MEMORY_LIMIT 1024</code>. Useful for memory constrained devices. Note that CoAP Acknowledgements are stored only until MAX_TRANSMIT_WAIT has expired."},{"location":"content/Configuration.html#iowa_abstraction_extension","title":"IOWA_ABSTRACTION_EXTENSION","text":"<p>IOWA will use the new system abstraction function <code>iowa_system_connection_open_server()</code> instead of <code>iowa_system_connection_open()</code>.</p>"},{"location":"content/Configuration.html#iowa_security_layer_support","title":"IOWA_SECURITY_LAYER_SUPPORT","text":"<p>IOWA will use DTLS/TLS to secure communication between LwM2M Clients and Servers. The abstraction functions described in Providing your security implementation must be implemented.</p> <p>If security is in use, the platform abstraction functions <code>iowa_system_security_data()</code> and <code>iowa_system_random_vector_generator()</code> must be implemented.</p>"},{"location":"content/Configuration.html#iowa_log_level-and-iowa_log_part","title":"IOWA_LOG_LEVEL and IOWA_LOG_PART","text":"<p>These defines configure the traces provided by IOWA. Obviously, having more traces increase the code footprint of IOWA. Note that all traces are provided to the platform abstraction function <code>iowa_system_trace()</code>.</p> <p>IOWA_LOG_LEVEL possible values are:</p> <ul> <li>IOWA_LOG_LEVEL_NONE: No traces are generated. This is the default value if IOWA_LOG_LEVEL is not defined.</li> <li>IOWA_LOG_LEVEL_ERROR: Only the most critical errors are reported like calling IOWA APIs with wrong parameters or memory allocation failures.</li> <li>IOWA_LOG_LEVEL_WARNING: Recoverable errors are also reported.</li> <li>IOWA_LOG_LEVEL_INFO: IOWA reports information on major steps of its execution. This is the recommended setting during integration.</li> <li>IOWA_LOG_LEVEL_TRACE: IOWA reports every step of its execution. It is advised to use this value only to provide details when contacting the support.</li> </ul> <p>IOWA_LOG_PART is useful to restrict traces to some components of IOWA. It is a combination of the following:</p> <ul> <li>IOWA_PART_BASE IOWA APIs and execution.</li> <li>IOWA_PART_COAP the CoAP layer.</li> <li>IOWA_PART_COMM the communication handling.</li> <li>IOWA_PART_DATA the serialization/deserialization payload packet handling.</li> <li>IOWA_PART_LWM2M the Lightweight M2M layer.</li> <li>IOWA_PART_OBJECT the object layer.</li> <li>IOWA_PART_SECURITY the security layer.</li> <li>IOWA_PART_SYSTEM the platform abstraction layer.</li> </ul> <p>Additionally, IOWA_PART_ALL is defined as enabling traces of all components. This is the default value if IOWA_LOG_PART is not defined.</p>"},{"location":"content/Configuration.html#iowa_log_buffer_limit","title":"IOWA_LOG_BUFFER_LIMIT","text":"<p>By default, when logging a buffer, IOWA logs all the content. To limit the outputs, set this define to a numerical value, e.g.</p> <pre><code>#define IOWA_LOG_BUFFER_LIMIT 512\n</code></pre>"},{"location":"content/Configuration.html#iowa_thread_support","title":"IOWA_THREAD_SUPPORT","text":"<p>When using IOWA in a multithreaded system, defining IOWA_THREAD_SUPPORT enables thread safety in IOWA.</p> <p>This feature requires the platform abstraction functions <code>iowa_system_connection_interrupt_select()</code>, <code>iowa_system_mutex_lock()</code>, and <code>iowa_system_mutex_unlock()</code> to be implemented.</p>"},{"location":"content/Configuration.html#iowa_storage_context_support","title":"IOWA_STORAGE_CONTEXT_SUPPORT","text":"<p>IOWA can save and restore its context through the APIs <code>iowa_save_context()</code>, <code>iowa_save_context_snapshot()</code> and <code>iowa_load_context()</code>. This feature requires this compilation flag to be set.</p> <p>This feature allows external data to be saved and restored with the context through callback. Callbacks can be added and deleted through the APIs <code>iowa_backup_register_callback()</code> and <code>iowa_backup_deregister_callback()</code>.</p> <p>This feature requires the platform abstraction functions <code>iowa_system_store_context()</code> and <code>iowa_system_retrieve_context()</code> to be implemented.</p>"},{"location":"content/Configuration.html#iowa_storage_context_automatic_backup","title":"IOWA_STORAGE_CONTEXT_AUTOMATIC_BACKUP","text":"<p>When this flag is set, IOWA would save the LwM2M Client context after every modification by a LwM2M Server or LwM2M Bootstrap Server. This feature does not save the server's runtime information. This is only relevant when IOWA is in Client mode and requires IOWA_STORAGE_CONTEXT_SUPPORT to be set.</p>"},{"location":"content/Configuration.html#iowa_storage_context_manual_heartbeat_on_load","title":"IOWA_STORAGE_CONTEXT_MANUAL_HEARTBEAT_ON_LOAD","text":"<p>By default, <code>iowa_load_context()</code> automatically sends a Registration Update to loaded LwM2M Servers the Client is registered to. When this flag is enabled, <code>iowa_load_context()</code> only opens the connection to the registered LwM2M Servers. The application can decide to call either <code>iowa_client_send_heartbeat()</code> or <code>iowa_clock_reset()</code>.</p>"},{"location":"content/Configuration.html#iowa_config_skip_system_function_check","title":"IOWA_CONFIG_SKIP_SYSTEM_FUNCTION_CHECK","text":"<p>This define allows disabling system function checks such as memory allocation. It assumes that system functions can not fail. This define is useful to reduce the code footprint.</p>"},{"location":"content/Configuration.html#iowa_config_skip_args_check","title":"IOWA_CONFIG_SKIP_ARGS_CHECK","text":"<p>This define allows disabling check functions' arguments. It assumes that the functions' arguments are valid. This define is useful to reduce the code footprint.</p>"},{"location":"content/Configuration.html#iowa_logger_user","title":"IOWA_LOGGER_USER","text":"<p>This define allows implementing your Logger's functions. If not defined, use the IOWA Logger implementation.</p> <p>If this define is set, the platform abstraction functions <code>iowa_log()</code>, <code>iowa_log_arg()</code>, <code>iowa_log_buffer()</code> and <code>iowa_log_arg_buffer()</code> must be implemented.</p>"},{"location":"content/Configuration.html#iowa_peer_identifier_size","title":"IOWA_PEER_IDENTIFIER_SIZE","text":"<p>This is only relevant when IOWA is in Server and/or Bootstrap Server mode. This define is used to set the maximum size of the peer identifier on the network. This is used when the endpoint name is not found in the registration payload and the stack calls <code>iowa_system_connection_get_peer_identifier</code>.</p>"},{"location":"content/Configuration.html#lwm2m-configuration","title":"LwM2M Configuration","text":""},{"location":"content/Configuration.html#lwm2m-role","title":"LwM2M Role","text":"<p>Lightweight M2M defines three possible roles for the elements of a LwM2M system: Client, Server, or Bootstrap Server. You can define the role of your device by defining one of LWM2M_CLIENT_MODE, LWM2M_SERVER_MODE, or LWM2M_BOOTSTRAP_SERVER_MODE.</p>"},{"location":"content/Configuration.html#lwm2m-version","title":"LwM2M Version","text":""},{"location":"content/Configuration.html#lwm2m_version_1_0_remove","title":"LWM2M_VERSION_1_0_REMOVE","text":"<p>This disables the default Lightweight M2M version of this stack: LwM2M version 1.0.</p>"},{"location":"content/Configuration.html#lwm2m_version_1_1_support","title":"LWM2M_VERSION_1_1_SUPPORT","text":"<p>This enables the support of LwM2M version 1.1.</p>"},{"location":"content/Configuration.html#lwm2m_version_1_2_support","title":"LWM2M_VERSION_1_2_SUPPORT","text":"<p>This enables the support of LwM2M version 1.2.</p>"},{"location":"content/Configuration.html#lwm2m_bootstrap","title":"LWM2M_BOOTSTRAP","text":"<p>This is only relevant when IOWA is in Client mode. This allows the LwM2M Client to be configured by a LwM2M Bootstrap Server.</p>"},{"location":"content/Configuration.html#lwm2m_bootstrap_pack_support","title":"LWM2M_BOOTSTRAP_PACK_SUPPORT","text":"<p>This is only relevant when IOWA is Bootstrap Server mode, or in Client mode with LWM2M_BOOTSTRAP set. This enables the Bootstrap-Pack operation defined in the LightweightM2M 1.2 specification. The Bootstrap-Pack operation allows to configure a LwM2M Client in a single exchange. In Client mode, when bootstrapping, IOWA will first send a Bootstrap-Pack request. If the request fails, IOWA will then initiate a Bootstrap sequence. </p>"},{"location":"content/Configuration.html#lwm2m-data-encoding","title":"LwM2M Data Encoding","text":""},{"location":"content/Configuration.html#lwm2m_support_json","title":"LWM2M_SUPPORT_JSON","text":"<p>This enables the support of JSON encoding for LwM2M payload. This support is optional for LwM2M Clients and mandatory for LwM2M Servers. Thus, the feature is enabled automatically when LWM2M_SERVER_MODE or LWM2M_BOOTSTRAP_SERVER_MODE are set. Note that JSON is a verbose encoding in LwM2M.</p> <p>Note that JSON encoding is deprecated in LwM2M 1.1.</p>"},{"location":"content/Configuration.html#lwm2m_support_senml_json","title":"LWM2M_SUPPORT_SENML_JSON","text":"<p>This enables the support of SenML JSON encoding for LwM2M 1.1 payload. This support is optional for LwM2M Clients and mandatory for LwM2M Servers:</p> <ul> <li>For LwM2M Clients, at least one of the following format must be supported: SenML CBOR or SenML JSON if LWM2M_VERSION_1_1_SUPPORT is set.</li> <li>For LwM2M Servers, the support is enabled automatically when LWM2M_SERVER_MODE or LWM2M_BOOTSTRAP_SERVER_MODE are set.</li> </ul> <p>Note that SenML JSON is a verbose encoding in LwM2M.</p>"},{"location":"content/Configuration.html#lwm2m_support_cbor","title":"LWM2M_SUPPORT_CBOR","text":"<p>This enables the support of CBOR encoding for LwM2M 1.1 payloads containing a single resource value. This support is optional for LwM2M Clients and mandatory for LwM2M Servers. This support is enabled automatically when LWM2M_SERVER_MODE or LWM2M_BOOTSTRAP_SERVER_MODE are set.</p>"},{"location":"content/Configuration.html#lwm2m_support_senml_cbor","title":"LWM2M_SUPPORT_SENML_CBOR","text":"<p>This enables the support of SenML CBOR encoding for LwM2M 1.1 payload. This support is optional for LwM2M Clients and mandatory for LwM2M Servers:</p> <ul> <li>For LwM2M Clients, at least one of the following format must be supported: SenML CBOR or SenML JSON if LWM2M_VERSION_1_1_SUPPORT or LWM2M_VERSION_1_2_SUPPORT is set.</li> <li>For LwM2M Servers, the support is enabled automatically when LWM2M_SERVER_MODE or LWM2M_BOOTSTRAP_SERVER_MODE are set.</li> </ul>"},{"location":"content/Configuration.html#lwm2m_support_lwm2m_cbor","title":"LWM2M_SUPPORT_LWM2M_CBOR","text":"<p>This enables the support of LwM2M CBOR encoding for LwM2M 1.2 payload. This support is optional for LwM2M Clients and mandatory for LwM2M Servers. For LwM2M Servers, the support is enabled automatically when LWM2M_SERVER_MODE or LWM2M_BOOTSTRAP_SERVER_MODE are set.</p>"},{"location":"content/Configuration.html#lwm2m_support_tlv","title":"LWM2M_SUPPORT_TLV","text":"<p>This enables the support of TLV encoding for LwM2M payload.</p> <p>This support is mandatory in LwM2M 1.0, this means that this feature is automatically set if LWM2M_VERSION_1_0_REMOVE is NOT set.</p> <p>In LwM2M 1.1 and later, this support is optional for LwM2M Clients and mandatory for LwM2M Servers. Thus, the feature is enabled automatically when LWM2M_SERVER_MODE or LWM2M_BOOTSTRAP_SERVER_MODE are set if LWM2M_VERSION_1_0_REMOVE is set.</p> <p>Note that TLV encoding is deprecated in LwM2M 1.1.</p>"},{"location":"content/Configuration.html#lwm2m_registration_content_type_support","title":"LWM2M_REGISTRATION_CONTENT_TYPE_SUPPORT","text":"<p>When this flag is set, the LwM2M Registration will contain the list of data encoding formats supported by the LwM2M Client. For instance, a Client supporting SenML JSON and SenML CBOR would have: <pre><code>&lt;/&gt;;ct=\"110 112\",&lt;/1/0&gt;,&lt;/3/0&gt;\n</code></pre></p>"},{"location":"content/Configuration.html#lwm2m_storage_queue_support","title":"LWM2M_STORAGE_QUEUE_SUPPORT","text":"<p>When a LwM2M Server observing some resources is not reachable, the LwM2M Client stores the notifications until the connectivity is restored. By default, IOWA stores the last notifications in memory. When this flag is set, IOWA discharges the storage of these notifications to the platform.</p> <p>This feature requires the system abstraction functions <code>iowa_system_queue_create()</code>, <code>iowa_system_queue_enqueue()</code>, <code>iowa_system_queue_dequeue()</code>, and <code>iowa_system_queue_delete()</code> to be implemented.</p>"},{"location":"content/Configuration.html#lwm2m_storage_queue_peek_support","title":"LWM2M_STORAGE_QUEUE_PEEK_SUPPORT","text":"<p>When a LwM2M Server observing some resources is not reachable, the LwM2M Client stores the notifications until the connectivity is restored. By default, IOWA stores the last notifications in memory. When this flag is set, IOWA discharges the storage of these notifications to the platform. New version using a peek/remove mechanism instead of a dequeue mechanism.</p> <p>This feature requires the system abstraction functions <code>iowa_system_queue_create()</code>, <code>iowa_system_queue_enqueue()</code>, <code>iowa_system_queue_peek()</code>, <code>iowa_system_queue_remove()</code>, and <code>iowa_system_queue_delete()</code> to be implemented.</p>"},{"location":"content/Configuration.html#lwm2m_support_timestamp","title":"LWM2M_SUPPORT_TIMESTAMP","text":"<p>This enables the support of the timestamp for notifications. Timestamp can only be used with the following Content format:</p> <ul> <li>JSON with LWM2M_SUPPORT_JSON</li> <li>SenML JSON with LWM2M_SUPPORT_SENML_JSON</li> <li>SenML CBOR with LWM2M_SUPPORT_SENML_CBOR</li> </ul>"},{"location":"content/Configuration.html#lwm2m_altpath_support","title":"LWM2M_ALTPATH_SUPPORT","text":"<p>By default, the LwM2M Objects are located under the root path. However, devices might be hosting other CoAP Resources on an endpoint, and there may be the need to place LwM2M Objects under an alternate path.</p> <p>This define allows the use of the Alternate Path. For LwM2M Servers, the support is enabled automatically when LWM2M_SERVER_MODE is set.</p>"},{"location":"content/Configuration.html#lwm2m_client_incoming_connection_support","title":"LWM2M_CLIENT_INCOMING_CONNECTION_SUPPORT","text":"<p>This is only relevant when IOWA is in Client mode. When set, this define enables the <code>iowa_client_new_incoming_connection()</code> API.</p>"},{"location":"content/Configuration.html#lwm2m_client_asynchronous_operation_support","title":"LWM2M_CLIENT_ASYNCHRONOUS_OPERATION_SUPPORT","text":"<p>This is only relevant when IOWA is in Client mode. When this compilation flag is activated, operations on LwM2M Objects can be declared as asynchronous. See <code>iowa_client_object_set_mode()</code>.</p>"},{"location":"content/Configuration.html#composite-operations","title":"Composite operations","text":"<p>The composite operations are automatically enabled when LWM2M_SERVER_MODE and LWM2M_VERSION_1_1_SUPPORT are set.</p> <p>Those features require that either LWM2M_SUPPORT_SENML_JSON, LWM2M_SUPPORT_SENML_CBOR, or LWM2M_SUPPORT_LWM2M_CBOR are set.</p>"},{"location":"content/Configuration.html#lwm2m_read_composite_support","title":"LWM2M_READ_COMPOSITE_SUPPORT","text":"<p>This enables the support of the Read-Composite operation defined in LwM2M 1.1.</p>"},{"location":"content/Configuration.html#lwm2m_observe_composite_support","title":"LWM2M_OBSERVE_COMPOSITE_SUPPORT","text":"<p>This enables the support of Observe-Composite operation and Read-Composite operation defined in LwM2M 1.1. This means that LWM2M_READ_COMPOSITE_SUPPORT will be automatically set.</p>"},{"location":"content/Configuration.html#lwm2m_write_composite_support","title":"LWM2M_WRITE_COMPOSITE_SUPPORT","text":"<p>This enables the support of the Write-Composite operation defined in LwM2M 1.1.</p>"},{"location":"content/Configuration.html#lwm2m_data_push_support","title":"LWM2M_DATA_PUSH_SUPPORT","text":"<p>This enables the support of data push operation defined in LwM2M 1.1. This feature requires that either LWM2M_SUPPORT_SENML_JSON, LWM2M_SUPPORT_SENML_CBOR, or LWM2M_SUPPORT_LWM2M_CBOR are set.</p>"},{"location":"content/Configuration.html#non-standard-features-configuration","title":"Non-Standard Features Configuration","text":""},{"location":"content/Configuration.html#iowa_verizon_operator_support","title":"IOWA_VERIZON_OPERATOR_SUPPORT","text":"<p>This enables the non-standard features required to interact with the Verizon LwM2M Servers. Namely:</p> <ul> <li>The out-of-band message (SMS Registration Update Trigger) can trigger a reboot or a factory reset in addition to the standard registration update.</li> <li>If a LwM2M Server performs a Write operation on the Package URI Resource (ID: 1) of the Firmware Update object (ID: 5) while the state is Downloading or Updating, IOWA will reply with a 4.00 (Bad Request) error code.</li> <li>IOWA will accept Write operations on the LwM2M Server Object's Resource Binding (/1/x/7). </li> <li>The Server Object (ID: 1) presents a Resource with ID 30000 with two Resource Instances:</li> </ul> Name Resource ID Resource Instance ID Operations Default value Type Description IsRegistered 30000 0 R/W 0 Integer After the successful registration with the DM server, the device shall set IsRegistered = 1 to indicate the device is registered with the DM server. ClientHoldOffTimer 30000 1 R 30 Sec Integer The time the device must wait before attempting registration with the DM server <p>Note that a LwM2M Client with this flag set will wait for the \"ClientHoldOffTimer\" to expire before trying to register to a LwM2M Server.</p>"},{"location":"content/Configuration.html#objects-configuration","title":"Objects Configuration","text":""},{"location":"content/Configuration.html#oma-objects","title":"OMA Objects","text":""},{"location":"content/Configuration.html#iowa_support_access_control_list_object","title":"IOWA_SUPPORT_ACCESS_CONTROL_LIST_OBJECT","text":"<p>This enables the support of the Access Control List OMA Object. Refer to the Access Control List Object for details.</p>"},{"location":"content/Configuration.html#iowa_support_bearer_selection_object","title":"IOWA_SUPPORT_BEARER_SELECTION_OBJECT","text":"<p>This enables the support of the Bearer Selection OMA Object. Refer to the Bearer selection Object for details.</p>"},{"location":"content/Configuration.html#iowa_support_firmware_update_object","title":"IOWA_SUPPORT_FIRMWARE_UPDATE_OBJECT","text":"<p>This enables the support of the Firmware Update OMA Object. Refer to the Firmware Update Object for details.</p>"},{"location":"content/Configuration.html#iowa_firmware_update_max_block_interval","title":"IOWA_FIRMWARE_UPDATE_MAX_BLOCK_INTERVAL","text":"<p>When the LwM2M Client supports the \"Push\" method of Device Update, and  IOWA_COAP_BLOCK_MINIMAL_SUPPORT, this defines the maximum time in seconds to wait between blocks before considering the connection as lost.</p>"},{"location":"content/Configuration.html#iowa_support_software_component_object","title":"IOWA_SUPPORT_SOFTWARE_COMPONENT_OBJECT","text":"<p>This enables the support of the Software Component OMA Object. Refer to the Software Component Object for details.</p>"},{"location":"content/Configuration.html#iowa_support_software_management_object","title":"IOWA_SUPPORT_SOFTWARE_MANAGEMENT_OBJECT","text":"<p>This enables the support of the Software Management OMA Object. Refer to the Software Management Object for details.</p>"},{"location":"content/Configuration.html#iowa_support_virtual_observe_notify_object","title":"IOWA_SUPPORT_VIRTUAL_OBSERVE_NOTIFY_OBJECT","text":"<p>This enables the support of the Virtual Observe Notify OMA Object. Refer to the sample Virtual Observe Client for details.</p>"},{"location":"content/Configuration.html#object-resources","title":"Object Resources","text":"<p>By default, all the resources of an IOWA-implemented Object are enabled. The optional Resources can be removed by using the compilation flags in the form <code>IOWA_&lt;OBJECT&gt;_RSC_&lt;RESOURCE&gt;_REMOVE</code>.</p>"},{"location":"content/Configuration.html#iowa_remove_all_optional_resources","title":"IOWA_REMOVE_ALL_OPTIONAL_RESOURCES","text":"<p>This flag removes all the optional Resources in the IOWA-implemented Objects. Optional Resources can be enabled by using the compilation flags in the form <code>IOWA_&lt;OBJECT&gt;_SUPPORT_RSC_&lt;RESOURCE&gt;</code>.</p>"},{"location":"content/Configuration.html#apn-connection-profile","title":"APN Connection Profile","text":""},{"location":"content/Configuration.html#default-mode","title":"Default Mode","text":"<ul> <li>IOWA_APN_CONNECTION_PROFILE_RSC_APN_REMOVE: Disable the resource \"APN\" (ID: 1)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_AUTO_SELECT_APN_DEVICE_REMOVE: Disable the resource \"Auto select APN by device\" (ID: 2)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_ENABLE_STATUS_REMOVE: Disable the resource \"Enable status\" (ID: 3)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_USER_NAME_REMOVE: Disable the resource \"Username\" (ID: 5)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_SECRET_REMOVE: Disable the resource \"Secret\" (ID: 6)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_RECONNECT_SCHEDULE_REMOVE: Disable the resource \"Reconnect Schedule\" (ID: 7)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_VALIDITY_REMOVE: Disable the resource \"Validity (MCC, MNC)\" (ID: 8)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_CONN_ESTABLISHMENT_TIME_REMOVE: Disable the resource \"Connection establishment time\" (ID: 9)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_CONN_ESTABLISHMENT_RESULT_REMOVE: Disable the resource \"Connection establishment result\" (ID: 10)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_CONN_ESTABLISHMENT_REJECT_CAUSE_REMOVE: Disable the resource \"Connection establishment reject cause\" (ID: 11)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_CONNECTION_END_TIME_REMOVE: Disable the resource \"Connection end time\" (ID: 12)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_TOTAL_BYTES_SENT_REMOVE: Disable the resource \"TotalBytesSent\" (ID: 13)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_TOTAL_BYTES_RECEIVED_REMOVE: Disable the resource \"TotalBytesReceived\" (ID: 14)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_IP_ADDRESS_REMOVE: Disable the resource \"IP address\" (ID: 15)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_PREFIX_LENGTH_REMOVE: Disable the resource \"Prefix length\" (ID: 16)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_SUBNET_MASK_REMOVE: Disable the resource \"Subnet mask\" (ID: 17)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_GATEWAY_REMOVE: Disable the resource \"Gateway\" (ID: 18)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_PRIMARY_DNS_ADDRESS_REMOVE: Disable the resource \"Primary DNS address\" (ID: 19)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_SECONDARY_DNS_ADDRESS_REMOVE: Disable the resource \"Secondary DNS address\" (ID: 20)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_QCI_REMOVE: Disable the resource \"QCI\" (ID: 21)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_TOTAL_PACKETS_SENT_REMOVE: Disable the resource \"TotalPacketsSent\" (ID: 23)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_PDN_TYPE_REMOVE: Disable the resource \"PDN Type\" (ID: 24)</li> <li>IOWA_APN_CONNECTION_PROFILE_RSC_APN_RATE_CONTROL_REMOVE: Disable the resource \"APN Rate Control\" (ID: 25)</li> </ul>"},{"location":"content/Configuration.html#remove-all-mode","title":"Remove All Mode","text":"<p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined.</p> <ul> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_APN: Enable the resource \"APN\" (ID: 1)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_AUTO_SELECT_APN_DEVICE: Enable the resource \"Auto select APN by device\" (ID: 2)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_ENABLE_STATUS: Enable the resource \"Enable status\" (ID: 3)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_USER_NAME: Enable the resource \"Username\" (ID: 5)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_SECRET: Enable the resource \"Secret\" (ID: 6)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_RECONNECT_SCHEDULE: Enable the resource \"Reconnect Schedule\" (ID: 7)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_VALIDITY: Enable the resource \"Validity (MCC, MNC)\" (ID: 8)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_CONN_ESTABLISHMENT_TIME: Enable the resource \"Connection establishment time\" (ID: 9)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_CONN_ESTABLISHMENT_RESULT: Enable the resource \"Connection establishment result\" (ID: 10)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_CONN_ESTABLISHMENT_REJECT_CAUSE: Enable the resource \"Connection establishment reject cause\" (ID: 11)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_CONNECTION_END_TIME: Enable the resource \"Connection end time\" (ID: 12)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_TOTAL_BYTES_SENT: Enable the resource \"TotalBytesSent\" (ID: 13)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_TOTAL_BYTES_RECEIVED: Enable the resource \"TotalBytesReceived\" (ID: 14)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_IP_ADDRESS: Enable the resource \"IP address\" (ID: 15)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_PREFIX_LENGTH: Enable the resource \"Prefix length\" (ID: 16)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_SUBNET_MASK: Enable the resource \"Subnet mask\" (ID: 17)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_GATEWAY: Enable the resource \"Gateway\" (ID: 18)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_PRIMARY_DNS_ADDRESS: Enable the resource \"Primary DNS address\" (ID: 19)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_SECONDARY_DNS_ADDRESS: Enable the resource \"Secondary DNS address\" (ID: 20)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_QCI: Enable the resource \"QCI\" (ID: 21)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_TOTAL_PACKETS_SENT: Enable the resource \"TotalPacketsSent\" (ID: 23)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_PDN_TYPE: Enable the resource \"PDN Type\" (ID: 24)</li> <li>IOWA_APN_CONNECTION_PROFILE_SUPPORT_RSC_APN_RATE_CONTROL: Enable the resource \"APN Rate Control\" (ID: 25)</li> </ul>"},{"location":"content/Configuration.html#bearer-selection","title":"Bearer Selection","text":"<p>Those defines are only relevant if IOWA_SUPPORT_BEARER_SELECTION_OBJECT is set.</p>"},{"location":"content/Configuration.html#default-mode_1","title":"Default Mode","text":"<ul> <li>IOWA_BEARER_SELECTION_RSC_PREFERRED_COMM_BEARER_REMOVE: Disable the resource \"Preferred Communications Bearer\" (ID: 0)</li> <li>IOWA_BEARER_SELECTION_RSC_ACCEPTABLE_RSSI_GSM_REMOVE: Disable the resource \"Acceptable RSSI (GSM)\" (ID: 1)</li> <li>IOWA_BEARER_SELECTION_RSC_ACCEPTABLE_RSCP_UMTS_REMOVE: Disable the resource \"Acceptable RSCP (UMTS)\" (ID: 2)</li> <li>IOWA_BEARER_SELECTION_RSC_ACCEPTABLE_RSRP_LTE_REMOVE: Disable the resource \"Acceptable RSRP (LTE)\" (ID: 3)</li> <li>IOWA_BEARER_SELECTION_RSC_ACCEPTABLE_RSSI_EV_DO_REMOVE: Disable the resource \"Acceptable RSSI (1xEV-DO)\" (ID: 4)</li> <li>IOWA_BEARER_SELECTION_RSC_CELL_LOCK_LIST_REMOVE: Disable the resource \"Cell lock list\" (ID: 5)</li> <li>IOWA_BEARER_SELECTION_RSC_OPERATOR_LIST_REMOVE: Disable the resource \"Operator list\" (ID: 6)</li> <li>IOWA_BEARER_SELECTION_RSC_OPERATOR_LIST_MODE_REMOVE: Disable the resource \"Operator list mode\" (ID: 7)</li> <li>IOWA_BEARER_SELECTION_RSC_AVAILABLE_PLMNS_REMOVE: Disable the resource \"List of available PLMNs\" (ID: 8)</li> <li>IOWA_BEARER_SELECTION_RSC_ACCEPTABLE_RSRP_NB_IOT_REMOVE: Disable the resource \"Acceptable RSRP (NB-IoT\" (ID: 10)</li> <li>IOWA_BEARER_SELECTION_RSC_PLMN_SEARCH_TIMER_REMOVE: Disable the resource \"Higher Priority PLMN Search Timer\" (ID: 11)</li> <li>IOWA_BEARER_SELECTION_RSC_ATTACH_WO_PDN_CONNECTION_REMOVE: Disable the resource \"Attach without PDN connection\" (ID: 12)</li> </ul>"},{"location":"content/Configuration.html#remove-all-mode_1","title":"Remove All Mode","text":"<p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined.</p> <p>At least one of these defines must be set as this Object composed of only optional Resources.</p> <ul> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_PREFERRED_COMM_BEARER: Enable the resource \"Preferred Communications Bearer\" (ID: 0)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_ACCEPTABLE_RSSI_GSM: Enable the resource \"Acceptable RSSI (GSM)\" (ID: 1)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_ACCEPTABLE_RSCP_UMTS: Enable the resource \"Acceptable RSCP (UMTS)\" (ID: 2)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_ACCEPTABLE_RSRP_LTE: Enable the resource \"Acceptable RSRP (LTE)\" (ID: 3)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_ACCEPTABLE_RSSI_EV_DO: Enable the resource \"Acceptable RSSI (1xEV-DO)\" (ID: 4)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_CELL_LOCK_LIST: Enable the resource \"Cell lock list\" (ID: 5)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_OPERATOR_LIST: Enable the resource \"Operator list\" (ID: 6)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_OPERATOR_LIST_MODE: Enable the resource \"Operator list mode\" (ID: 7)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_AVAILABLE_PLMNS: Enable the resource \"List of available PLMNs\" (ID: 8)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_ACCEPTABLE_RSRP_NB_IOT: Enable the resource \"Acceptable RSRP (NB-IoT\" (ID: 10)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_PLMN_SEARCH_TIMER: Enable the resource \"Higher Priority PLMN Search Timer\" (ID: 11)</li> <li>IOWA_BEARER_SELECTION_SUPPORT_RSC_ATTACH_WO_PDN_CONNECTION: Enable the resource \"Attach without PDN connection\" (ID: 12)</li> </ul>"},{"location":"content/Configuration.html#cellular-connectivity","title":"Cellular Connectivity","text":""},{"location":"content/Configuration.html#default-mode_2","title":"Default Mode","text":"<ul> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_SMSC_ADDRESS_REMOVE: Disable the resource \"SMSC address\" (ID: 0)</li> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_DISABLE_RADIO_PERIOD_REMOVE: Disable the resource \"Disable radio period\" (ID: 1)</li> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_MODULE_ACTIVATION_CODE_REMOVE: Disable the resource \"Module activation code\" (ID: 2)</li> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_PSM_TIMER_REMOVE: Disable the resource \"PSM Timer\" (ID: 4)</li> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_ACTIVE_TIMER_REMOVE: Disable the resource \"Active Timer\" (ID: 5)</li> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_PLMN_RATE_CONTROL_REMOVE: Disable the resource \"Serving PLMN Rate control\" (ID: 6)</li> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_EDRX_PARAM_IU_MODE_REMOVE: Disable the resource \"eDRX parameters for Iu mode\" (ID: 7)</li> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_EDRX_PARAM_WB_S1_MODE_REMOVE: Disable the resource \"eDRX parameters for WB-S1 mode\" (ID: 8)</li> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_EDRX_PARAM_NB_S1_MODE_REMOVE: Disable the resource \"eDRX parameters for NB-S1 mode\" (ID: 9)</li> <li>IOWA_CELLULAR_CONNECTIVITY_RSC_EDRX_PARAM_A_GB_MODE_REMOVE: Disable the resource \"eDRX parameters for A/Gb mode\" (ID: 10)</li> </ul>"},{"location":"content/Configuration.html#remove-all-mode_2","title":"Remove All Mode","text":"<p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined.</p> <ul> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_SMSC_ADDRESS: Enable the resource \"SMSC address\" (ID: 0)</li> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_DISABLE_RADIO_PERIOD: Enable the resource \"Disable radio period\" (ID: 1)</li> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_MODULE_ACTIVATION_CODE: Enable the resource \"Module activation code\" (ID: 2)</li> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_PSM_TIMER: Enable the resource \"PSM Timer\" (ID: 4)</li> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_ACTIVE_TIMER: Enable the resource \"Active Timer\" (ID: 5)</li> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_PLMN_RATE_CONTROL: Enable the resource \"Serving PLMN Rate control\" (ID: 6)</li> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_EDRX_PARAM_IU_MODE: Enable the resource \"eDRX parameters for Iu mode\" (ID: 7)</li> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_EDRX_PARAM_WB_S1_MODE: Enable the resource \"eDRX parameters for WB-S1 mode\" (ID: 8)</li> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_EDRX_PARAM_NB_S1_MODE: Enable the resource \"eDRX parameters for NB-S1 mode\" (ID: 9)</li> <li>IOWA_CELLULAR_CONNECTIVITY_SUPPORT_RSC_EDRX_PARAM_A_GB_MODE: Enable the resource \"eDRX parameters for A/Gb mode\" (ID: 10)</li> </ul>"},{"location":"content/Configuration.html#connectivity-monitoring","title":"Connectivity Monitoring","text":""},{"location":"content/Configuration.html#default-mode_3","title":"Default Mode","text":"<ul> <li>IOWA_CONNECTIVITY_MONITORING_RSC_LINK_QUALITY_REMOVE: Disable the resource \"Link Quality\" (ID: 3)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_ROUTER_IP_ADDR_REMOVE: Disable the resource \"Router IP Addresses\" (ID: 5)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_LINK_USAGE_REMOVE: Disable the resource \"Link Utilization\" (ID: 6)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_APN_REMOVE: Disable the resource \"APN\" (ID: 7)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_CELL_ID_REMOVE: Disable the resource \"Cell ID\" (ID: 8)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_SMNC_REMOVE: Disable the resource \"SMNC\" (ID: 9)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_SMCC_REMOVE: Disable the resource \"SMCC\" (ID: 10)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_SINR_REMOVE: Disable the resource \"SINR\" (ID: 11)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_LAC_REMOVE: Disable the resource \"LAC\" (ID: 12)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_CELVL_REMOVE: Disable the resource \"CELVL\" (ID: 13)</li> </ul>"},{"location":"content/Configuration.html#remove-all-mode_3","title":"Remove All Mode","text":"<p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined.</p> <ul> <li>IOWA_CONNECTIVITY_MONITORING_SUPPORT_RSC_LINK_QUALITY: Disable the resource \"Link Quality\" (ID: 3)</li> <li>IOWA_CONNECTIVITY_MONITORING_SUPPORT_RSC_ROUTER_IP_ADDR: Disable the resource \"Router IP Addresses\" (ID: 5)</li> <li>IOWA_CONNECTIVITY_MONITORING_SUPPORT_RSC_LINK_USAGE: Disable the resource \"Link Utilization\" (ID: 6)</li> <li>IOWA_CONNECTIVITY_MONITORING_SUPPORT_RSC_APN: Disable the resource \"APN\" (ID: 7)</li> <li>IOWA_CONNECTIVITY_MONITORING_SUPPORT_RSC_CELL_ID: Disable the resource \"Cell ID\" (ID: 8)</li> <li>IOWA_CONNECTIVITY_MONITORING_SUPPORT_RSC_SMNC: Disable the resource \"SMNC\" (ID: 9)</li> <li>IOWA_CONNECTIVITY_MONITORING_SUPPORT_RSC_SMCC: Disable the resource \"SMCC\" (ID: 10)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_SINR_REMOVE: Disable the resource \"SINR\" (ID: 11)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_LAC_REMOVE: Disable the resource \"LAC\" (ID: 12)</li> <li>IOWA_CONNECTIVITY_MONITORING_RSC_CELVL_REMOVE: Disable the resource \"CELVL\" (ID: 13)</li> </ul>"},{"location":"content/Configuration.html#device","title":"Device","text":""},{"location":"content/Configuration.html#default-mode_4","title":"Default Mode","text":"<ul> <li>IOWA_DEVICE_RSC_MANUFACTURER_REMOVE: Disable the resource \"Manufacturer\" (ID: 0)</li> <li>IOWA_DEVICE_RSC_MODEL_NUMBER_REMOVE: Disable the resource \"Model Number\" (ID: 1)</li> <li>IOWA_DEVICE_RSC_SERIAL_NUMBER_REMOVE: Disable the resource \"Serial Number\" (ID: 2)</li> <li>IOWA_DEVICE_RSC_FIRMWARE_VERSION_REMOVE: Disable the resource \"Firmware Version\" (ID: 3)</li> <li>IOWA_DEVICE_RSC_FACTORY_RESET_REMOVE: Disable the resource \"Factory Reset\" (ID: 5)</li> <li>IOWA_DEVICE_RSC_POWER_SOURCE_REMOVE: Disable the resources \"Available Power Sources\" (ID: 6), \"Power Source Voltage\" (ID: 7) and \"Power Source Current\" (ID: 8)</li> <li>IOWA_DEVICE_RSC_BATTERY_REMOVE: Disable the resources \"Battery Level\" (ID: 9) and \"Battery Status\" (ID: 20)</li> <li>IOWA_DEVICE_RSC_RESET_ERROR_REMOVE: Disable the resource \"Reset Error Code\" (ID: 12)</li> <li>IOWA_DEVICE_RSC_CURRENT_TIME_REMOVE: Disable the resource \"Current Time\" (ID: 13)</li> <li>IOWA_DEVICE_RSC_UTC_OFFSET_REMOVE: Disable the resource \"UTC Offset\" (ID: 14)</li> <li>IOWA_DEVICE_RSC_TIMEZONE_REMOVE: Disable the resource \"Timezone\" (ID: 15)</li> <li>IOWA_DEVICE_RSC_DEVICE_TYPE_REMOVE: Disable the resource \"Device Type\" (ID: 17)</li> <li>IOWA_DEVICE_RSC_HARDWARE_VERSION_REMOVE: Disable the resource \"Hardware Version\" (ID: 18)</li> <li>IOWA_DEVICE_RSC_SOFTWARE_VERSION_REMOVE: Disable the resource \"Software Version\" (ID: 19)</li> <li>IOWA_DEVICE_RSC_MEMORY_TOTAL_REMOVE: Disable the resource \"Memory Total\" (ID: 21)</li> <li>IOWA_DEVICE_RSC_MEMORY_FREE_REMOVE: Disable the resource \"Memory Free\" (ID: 10)</li> <li>IOWA_DEVICE_RSC_EXTERNAL_INFO_REMOVE: Disable the resource \"ExtDevInfo\" (ID: 22)</li> </ul>"},{"location":"content/Configuration.html#remove-all-mode_4","title":"Remove All Mode","text":"<p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined.</p> <ul> <li>IOWA_DEVICE_SUPPORT_RSC_MANUFACTURER: Enable the resource \"Manufacturer\" (ID: 0)</li> <li>IOWA_DEVICE_SUPPORT_RSC_MODEL_NUMBER: Enable the resource \"Model Number\" (ID: 1)</li> <li>IOWA_DEVICE_SUPPORT_RSC_SERIAL_NUMBER: Enable the resource \"Serial Number\" (ID: 2)</li> <li>IOWA_DEVICE_SUPPORT_RSC_FIRMWARE_VERSION: Enable the resource \"Firmware Version\" (ID: 3)</li> <li>IOWA_DEVICE_SUPPORT_RSC_FACTORY_RESET: Enable the resource \"Factory Reset\" (ID: 5)</li> <li>IOWA_DEVICE_SUPPORT_RSC_POWER_SOURCE: Enable the resources \"Available Power Sources\" (ID: 6), \"Power Source Voltage\" (ID: 7) and \"Power Source Current\" (ID: 8)</li> <li>IOWA_DEVICE_SUPPORT_RSC_BATTERY: Enable the resources \"Battery Level\" (ID: 9) and \"Battery Status\" (ID: 20)</li> <li>IOWA_DEVICE_SUPPORT_RSC_RESET_ERROR: Enable the resource \"Reset Error Code\" (ID: 12)</li> <li>IOWA_DEVICE_SUPPORT_RSC_CURRENT_TIME: Enable the resource \"Current Time\" (ID: 13)</li> <li>IOWA_DEVICE_SUPPORT_RSC_UTC_OFFSET: Enable the resource \"UTC Offset\" (ID: 14)</li> <li>IOWA_DEVICE_SUPPORT_RSC_TIMEZONE: Enable the resource \"Timezone\" (ID: 15)</li> <li>IOWA_DEVICE_SUPPORT_RSC_DEVICE_TYPE: Enable the resource \"Device Type\" (ID: 17)</li> <li>IOWA_DEVICE_SUPPORT_RSC_HARDWARE_VERSION: Enable the resource \"Hardware Version\" (ID: 18)</li> <li>IOWA_DEVICE_SUPPORT_RSC_SOFTWARE_VERSION: Enable the resource \"Software Version\" (ID: 19)</li> <li>IOWA_DEVICE_SUPPORT_RSC_MEMORY_TOTAL: Enable the resource \"Memory Total\" (ID: 21)</li> <li>IOWA_DEVICE_SUPPORT_RSC_MEMORY_FREE: Enable the resource \"Memory Free\" (ID: 10)</li> <li>IOWA_DEVICE_SUPPORT_RSC_EXTERNAL_INFO: Enable the resource \"ExtDevInfo\" (ID: 22)</li> </ul>"},{"location":"content/Configuration.html#server","title":"Server","text":""},{"location":"content/Configuration.html#default-mode_5","title":"Default Mode","text":"<ul> <li>IOWA_SERVER_RSC_DISABLE_TIMEOUT_REMOVE: Disable resources \"Disable\" (ID: 4) and \"Disable Timeout\" (ID: 5)</li> <li>IOWA_SERVER_RSC_DEFAULT_PERIODS_REMOVE: Disable resources \"Default Minimum Period\" (ID: 2) and \"Default Maximum Period\" (ID: 3)</li> <li>IOWA_SERVER_RSC_BOOTSTRAP_TRIGGER_REMOVE: Disable the resource \"Bootstrap-Request Trigger\" (ID: 9). This resource is also disabled when LWM2M_BOOTSTRAP is not defined.</li> <li>IOWA_SERVER_RSC_REGISTRATION_BEHAVIOUR_REMOVE: Disable resources \"Registration Priority Order\" (ID: 13), \"Initial Registration Delay Timer\" (ID: 14), \"Registration Failure Block\" (ID: 15) and \"Bootstrap on Registration Failure\" (ID: 16). These resources are also disabled when LWM2M_VERSION_1_1_SUPPORT is not defined.</li> <li>IOWA_SERVER_RSC_COMMUNICATION_ATTEMPTS_REMOVE: Disable resources \"Communication Retry Count\" (ID: 17), \"Communication Retry Timer\" (ID: 18), \"Communication Sequence Delay Timer\" (ID: 19) and \"Communication Sequence Retry Count\" (ID: 20). These resources are also disabled when LWM2M_VERSION_1_1_SUPPORT is not defined.</li> <li>IOWA_SERVER_RSC_MUTE_SEND_REMOVE: Disable resources \"Mute Send\" (ID: 23). Only relevant when LWM2M_DATA_PUSH_SUPPORT is set.</li> </ul>"},{"location":"content/Configuration.html#remove-all-mode_5","title":"Remove All Mode","text":"<p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined.</p> <ul> <li>IOWA_SERVER_SUPPORT_RSC_DISABLE_TIMEOUT: Enable resources \"Disable\" (ID: 4) and \"Disable Timeout\" (ID: 5)</li> <li>IOWA_SERVER_SUPPORT_RSC_DEFAULT_PERIODS: Enable resources \"Default Minimum Period\" (ID: 2) and \"Default Maximum Period\" (ID: 3)</li> <li>IOWA_SERVER_SUPPORT_RSC_BOOTSTRAP_TRIGGER: Enable the resource \"Bootstrap-Request Trigger\" (ID: 9). This resource is available only if LWM2M_BOOTSTRAP is defined.</li> <li>IOWA_SERVER_SUPPORT_RSC_REGISTRATION_BEHAVIOUR: Enable resources \"Registration Priority Order\" (ID: 13), \"Initial Registration Delay Timer\" (ID: 14), \"Registration Failure Block\" (ID: 15) and \"Bootstrap on Registration Failure\" (ID: 16). These resources are available only if LWM2M_VERSION_1_1_SUPPORT is defined.</li> <li>IOWA_SERVER_SUPPORT_RSC_COMMUNICATION_ATTEMPTS: Enable resources \"Communication Retry Count\" (ID: 17), \"Communication Retry Timer\" (ID: 18), \"Communication Sequence Delay Timer\" (ID: 19) and \"Communication Sequence Retry Count\" (ID: 20). These resources are available only if LWM2M_VERSION_1_1_SUPPORT is defined.</li> <li>IOWA_SERVER_SUPPORT_RSC_MUTE_SEND: Enable resources \"Mute Send\" (ID: 23). This resource is available only if LWM2M_DATA_PUSH_SUPPORT is defined.</li> </ul>"},{"location":"content/Configuration.html#default-values","title":"Default Values","text":"<p>As well, some resources contain default value which can be updated using the following defines:</p> <ul> <li>IOWA_SERVER_RSC_DISABLE_TIMEOUT_DEFAULT_VALUE: Update default resource value of \"Disable Timeout\" (ID: 5). Only relevant if IOWA_SERVER_SUPPORT_RSC_DISABLE_TIMEOUT is defined.</li> <li>IOWA_SERVER_RSC_STORING_DEFAULT_VALUE: Update default resource value of \"Notification Storing When Disabled or Offline\" (ID: 6)</li> <li>IOWA_SERVER_RSC_MUTE_SEND_DEFAULT_VALUE: Update default resource value of \"Mute Send\" (ID: 23). Only relevant if IOWA_SERVER_SUPPORT_RSC_MUTE_SEND is defined.</li> </ul>"},{"location":"content/Configuration.html#light-control","title":"Light Control","text":""},{"location":"content/Configuration.html#default-mode_6","title":"Default Mode","text":"<ul> <li>IOWA_LIGHT_CONTROL_RSC_DIMMER_REMOVE: Disable the resource \"Dimmer\" (ID: 5851)</li> <li>IOWA_LIGHT_CONTROL_RSC_ON_TIME_REMOVE: Disable the resource \"On time\" (ID: 5852)</li> <li>IOWA_LIGHT_CONTROL_RSC_CUMULATIVE_ACTIVE_POWER_REMOVE: Disable the resource \"Cumulative active power\" (ID: 5805)</li> <li>IOWA_LIGHT_CONTROL_RSC_POWER_FACTOR_REMOVE: Disable the resource \"Power factor\" (ID: 5820)</li> <li>IOWA_LIGHT_CONTROL_RSC_COLOUR_REMOVE: Disable the resources \"Colour\" (ID: 5706) and \"Sensor Units\" (ID: 5701)</li> </ul>"},{"location":"content/Configuration.html#remove-all-mode_6","title":"Remove All Mode","text":"<p>When IOWA_REMOVE_ALL_OPTIONAL_RESOURCES is defined.</p> <ul> <li>IOWA_LIGHT_CONTROL_SUPPORT_RSC_DIMMER: Enable the resource \"Dimmer\" (ID: 5851)</li> <li>IOWA_LIGHT_CONTROL_SUPPORT_RSC_ON_TIME: Enable the resource \"On time\" (ID: 5852)</li> <li>IOWA_LIGHT_CONTROL_SUPPORT_RSC_CUMULATIVE_ACTIVE_POWER: Enable the resource \"Cumulative active power\" (ID: 5805)</li> <li>IOWA_LIGHT_CONTROL_SUPPORT_RSC_POWER_FACTOR: Enable the resource \"Power factor\" (ID: 5820)</li> <li>IOWA_LIGHT_CONTROL_SUPPORT_RSC_COLOUR: Enable the resources \"Colour\" (ID: 5706) and \"Sensor Units\" (ID: 5701)</li> </ul>"},{"location":"content/CustomObject.html","title":"Custom Object","text":"<p>IOWA abstracts a lot of objects for the LwM2M Client through dedicated API. But additional object can be provided to the stack by using the following functions:</p> <ul> <li><code>iowa_client_add_custom_object</code></li> <li><code>iowa_client_remove_custom_object</code></li> <li><code>iowa_client_object_resource_changed</code></li> <li><code>iowa_client_object_instance_changed</code></li> </ul> <p>Below some examples described how to use these APIs to implement your objects.</p>"},{"location":"content/CustomObject.html#controlling-a-power-switch","title":"Controlling a Power Switch","text":"<p>Let\u2019s consider that the device containing the IOWA Client is connected to a power switch. You want to be able to monitor and control this power switch from a LwM2M Server.</p> <p>The first step is to determine the best layout of the LwM2M Object describing the power switch. Fortunately, the IPSO Alliance defined the Power Control Object (ID: 3312) which suits our needs. By re-using a standardized Object, we do not need to provide the LwM2M Servers with the layout of our Object. A server already knows the Object 3312 which contains the following resources:</p> Resource Name Resource ID Access Type Mandatory Type Description On/Off 5850 R, W Mandatory Boolean On/off control, 0=OFF, 1=ON. Dimmer 5851 R, W Optional Integer Proportional control, integer value between 0 and 100 as a percentage. On Time 5852 R, W Optional Integer The time in seconds that the power relay has been on. Writing a value of 0 resets the counter. Cumulative active power 5805 R Optional Float The cumulative active power since the last cumulative energy reset or device start. Power factor 5820 R Optional Float The power factor of the load. Application Type 5750 R, W Optional String The application type of the sensor or actuator as a string, for instance, \"Air Pressure\". <p>The On/Off resource is mandatory to implement and is used to both control and monitor our power switch.</p> <p>The Dimmer resource is not relevant to our use case. As it is optional, we do not implement it.</p> <p>The On Time is optional but interesting for this example unlike the Cumulative active power, Power factor and Application Type resources.</p> <p>To implement this Object in our device, in our main(), after initializing the IOWA context (see above), we declare an array describing the two resources:</p> <pre><code>iowa_lwm2m_resource_desc_t resources[2] =\n{ {5850, IOWA_LWM2M_TYPE_BOOLEAN, IOWA_DM_READ | IOWA_DM_WRITE, IOWA_RESOURCE_FLAG_MANDATORY},\n{5852, IOWA_LWM2M_TYPE_INTEGER, IOWA_DM_READ | IOWA_DM_WRITE, IOWA_RESOURCE_FLAG_OPTIONAL} };\n</code></pre> <p>Note that the header file \"iowa_IPSO_ID.h\" in the \"include\" folder contains defines for the ID, type and operations of the Reusable Resources defined by the IPSO Alliance. Using these macros, we can write the equivalent code as:</p> <pre><code>iowa_lwm2m_resource_desc_t resources[2] =\n{ {IPSO_RSC_ID_ON_OFF, IPSO_RSC_TYPE_ON_OFF, IPSO_RSC_OP_ON_OFF, IOWA_RESOURCE_FLAG_MANDATORY},\n{IPSO_RSC_ID_ON_TIME, IPSO_RSC_TYPE_ON_TIME, IPSO_RSC_OP_ON_TIME, IOWA_RESOURCE_FLAG_OPTIONAL} };\n</code></pre> <p>Instance-wise, we only have one power switch to control, and it makes no sense that the LwM2M Server could create new instances or delete some and the object does not used resources that can be multiple. The instanceCallback and the resInstanceCallback can be omitted, and we declare a single instance with ID 0:</p> <pre><code>uint16_t singleInstanceID[1] = { 0 };\n\nresult = iowa_client_add_custom_object(contextP,\n3312,\n1, singleInstanceID,\n2, resources,\npowerSwitchCallback, NULL, NULL,\nNULL);\n</code></pre> <p>Now the Power Control Object is presented to the LwM2M Servers by the IOWA stack.</p> <p>When a Server performs a command on one of its resources (or the whole Object), the <code>powerSwitchCallback</code> function is called.</p> <p>Let\u2019s assume our device provides two functions <code>switch_on()</code> and <code>switch_off()</code> to control the power switch and three interruptions to handle:</p> <ul> <li><code>SWITCH_ON</code> when the power switch is set to On,</li> <li><code>SWITCH_OFF</code> when the power switch is set to Off</li> <li><code>TIMER</code> when a second had elapsed.</li> </ul> <p>We first define two global variables to store the power switch state:</p> <pre><code>bool switchState;\nunsigned int onTime;\n</code></pre> <p>In the interrupt handler, we modify these variables to be in sync with the actual power switch state (pseudocode):</p> <pre><code>switch (interrupt)\n{\n(...)\ncase SWITCH_ON:\nswitchState = true;\nbreak;\n\ncase SWITCH_OFF:\nswitchState = false;\nbreak;\n\ncase TIMER:\nif (switchState == true)\n{\nonTime++;\n}\nbreak;\n(...)\n}\n</code></pre> <p>Now the <code>powerSwitchCallback</code> function can be implemented:</p> <pre><code>iowa_status_t powerSwitchCallback(iowa_dm_operation_t operation,\niowa_lwm2m_data_t *dataP,\nsize_t numData,\nvoid *userData,\niowa_context_t iowaH)\n{\nsize_t i;\n\nswitch (operation)\n{\ncase IOWA_DM_READ:\nfor (i = 0; i &lt; numData; i++)\n{\nswitch (dataP[i].resourceID)\n{\ncase 5850:\ndataP[i].value.asBoolean = switchState;\nbreak;\n\ncase 5852:\ndataP[i].value.asInteger = onTime;\nbreak;\n\ndefault:\n// Already handled by IOWA stack\nbreak;\n}\n}\nbreak;\n\ncase IOWA_DM_WRITE:\nfor (i = 0; i &lt; numData; i++)\n{\nswitch (dataP[i].resourceID)\n{\ncase 5850:\nif (dataP[i].value.asBoolean == true)\n{\nswitch_on();\n}\nelse\n{\nswitch_off();\n}\nbreak;\n\ncase 5852:\nif (dataP[i].value.asInteger == 0)\n{\nonTime = 0;\n}\nelse\n{\nreturn IOWA_COAP_406_NOT_ACCEPTABLE;\n}\nbreak;\n\ndefault:\n// Already handled by IOWA stack\nbreak;\n}\n}\nbreak;\n\ndefault:\n// Already handled by IOWA stack\nbreak;\n}\n\nreturn IOWA_COAP_NO_ERROR;\n}\n</code></pre> <p>Here we assume that the <code>switch_on()</code> and <code>switch_off()</code> functions will trigger an interrupt and the <code>switchState</code> variable is updated by the interrupt handler.</p> <p>A LwM2M Server can write only <code>0</code> as the new value of the On Time resource hence the check.</p> <p>If you test this code, you will notice that you can control the power switch remotely and check its state. However, the LwM2M Server will not receive notifications when observing the Object resources.</p> <p>To correct this, we need to inform the IOWA stack of the changes not triggered by a LwM2M Server. This is done by calling the API <code>iowa_client_object_resource_changed()</code> whenever a change occurs.</p> <p>A correct interrupt handler is then:</p> <pre><code>switch (interrupt)\n{\n(...)\ncase SWITCH_ON:\nif (switchState == false)\n{\niowa_client_object_resource_changed(contextP, 3312, 0, 5850);\n}\nswitchState = true;\nbreak;\n\ncase SWITCH_OFF:\nif (switchState == true)\n{\niowa_client_object_resource_changed(contextP, 3312, 0, 5850);\n}\nswitchState = false;\nbreak;\n\ncase TIMER:\nif (switchState == true)\n{\nonTime++;\niowa_client_notification_lock(contextP, true);\niowa_client_object_resource_changed(contextP, 3312, 0, 5852);\niowa_client_notification_lock(contextP, false);\n}\nbreak;\n(...)\n}\n</code></pre> <p>Note that the calls to <code>iowa_client_notification_lock()</code> are not necessary but are here as an example.</p>"},{"location":"content/CustomObject.html#monitoring-the-temperature-during-a-period","title":"Monitoring the temperature during a period","text":"<p>Let\u2019s consider that the device containing the IOWA Client is connected to a temperature sensor. You want to be able to monitor this sensor from a LwM2M Server. Monitored value will be reported with the time at which the value was taken.</p> <p>The following example can be implemented with <code>iowa_client_IPSO_add_sensor</code> and <code>iowa_client_IPSO_update_values</code>. But we will instead implement our own Custom Object to understand how monitored values with timestamp can be sent to a LwM2M Server.</p> <p>The first step is to determine the best layout of the LwM2M Object describing the temperature sensor. Fortunately, the IPSO Alliance defined the Temperature Object (ID: 3303) which suits our needs. By re-using a standardized Object, we do not need to provide the LwM2M Servers with the layout of our Object. A server already knows the Object 3303 which contains the following resources:</p> Resource Name Resource ID Access Type Mandatory Type Description Sensor Value 5700 R Mandatory Float Last or Current Measured Value from the Sensor. Min Measured Value 5601 R Optional Float The minimum value measured by the sensor since power ON or reset. Max Measured Value 5602 R Optional Float The maximum value measured by the sensor since power ON or reset. Min Range Value 5603 R Optional Float The minimum value that can be measured by the sensor. Max Range Value 5604 R Optional Float The maximum value that can be measured by the sensor. Sensor Units 5701 R Optional String Measurement Units Definition e.g. \"Cel\" for Temperature in Celsius. Reset Min and Max Measured Values 5605 E Optional Reset the Min and Max Measured Values to Current Value. <p>The Sensor Value resource is mandatory to implement and is used to monitor the temperature value.</p> <p>All the others resources are not relevant to our use case. As they are optional, we do not implement them.</p> <p>To implement this Object in our device, in our main(), after initializing the IOWA context (see above), we declare an array describing resource:</p> <pre><code>iowa_lwm2m_resource_desc_t resources[1] =\n{ {5700, IOWA_LWM2M_TYPE_FLOAT, IOWA_DM_READ , IOWA_RESOURCE_FLAG_MANDATORY} };\n</code></pre> <p>Note that the header file \"iowa_IPSO_ID.h\" in the \"include\" folder contains defines for the ID, type and operations of the Reusable Resources defined by the IPSO Alliance. Using these macros, we can write the equivalent code as:</p> <pre><code>iowa_lwm2m_resource_desc_t resources[1] =\n{ {IPSO_RSC_ID_SENSOR_VALUE, IPSO_RSC_TYPE_SENSOR_VALUE, IPSO_RSC_OP_SENSOR_VALUE, IOWA_RESOURCE_FLAG_MANDATORY} };\n</code></pre> <p>Instance-wise, we only have one temperature sensor to monitor, and it makes no sense that the LwM2M Server could create new instances or delete some and the object does not used resources that can be multiple. The instanceCallback and the resInstanceCallback can be omitted, and we declare a single instance with ID 0:</p> <pre><code>uint16_t singleInstanceID[1] = { 0 };\n\nresult = iowa_client_add_custom_object(contextP,\n3303,\n1, singleInstanceID,\n1, resources,\ntempSensorCallback, NULL, NULL,\nNULL);\n</code></pre> <p>Now the Temperature Object is presented to the LwM2M Servers by the IOWA stack.</p> <p>When a Server performs a command on one of its resources (or the whole Object), the <code>tempSensorCallback</code> function is called.</p> <p>We want to inform to the LwM2M Server the last values taken with the timestamp associated to each value.</p> <p>Let\u2019s assume our device provides two functions <code>get_time()</code> and <code>get_temperature()</code> to monitor the temperature value and one interruption to handle:</p> <ul> <li><code>NEW_TEMP</code> when a new temperature value is available.</li> </ul> <p>We first define a new structure and two global variables to store the temperature values. The temperature values will be stored inside a circular buffer:</p> <pre><code>#define NB_VALUE 10\n\ntypedef struct\n{\nint32_t timestamp;\nfloat   value;\n} temp_value_t;\n\ntemp_value_t valuesList[NB_VALUE] = {0};\nsize_t currentIndex = 0;\n</code></pre> <p>In the interrupt handler, we modify these variables to store the temperature values (pseudocode):</p> <pre><code>switch (interrupt)\n{\n(...)\ncase NEW_TEMP:\n{\nvaluesList[currentIndex].timestamp = get_time();\nvaluesList[currentIndex].value = get_temperature();\n\ncurrentIndex++;\nif (currentIndex == NB_VALUE)\n{\ncurrentIndex = 0;\n}\nbreak;\n}\n(...)\n}\n</code></pre> <p>Now the <code>tempSensorCallback</code> function can be implemented:</p> <pre><code>iowa_status_t tempSensorCallback(iowa_dm_operation_t operation,\niowa_lwm2m_data_t *dataP,\nsize_t numData,\nvoid *userData,\niowa_context_t iowaH)\n{\niowa_status_t result;\nsize_t i;\n\nresult = IOWA_COAP_NO_ERROR;\n\nswitch (operation)\n{\ncase IOWA_DM_READ:\nfor (i = 0; i &lt; numData; i++)\n{\nswitch (dataP[i].resourceID)\n{\ncase 5700:\n{\n// On a Read operation, provides all the timestamp values\nsize_t j;\n\nif (valuesList[0].timestamp == 0)\n{\n// No value added yet\nbreak;\n}\n\nif (dataP[i].timestamp != 0)\n{\n// Loop on next element\nbreak;\n}\n\n// Find the latest timestamp not currently added\nj = currentIndex - 1;\nif (i &gt; 0)\n{\nwhile (j != currentIndex)\n{\nif (j &gt; 0)\n{\nif (valuesList[j-1].timestamp == 0)\n{\nbreak;\n}\n}\nelse if(valuesList[NB_VALUE-1].timestamp == 0)\n{\nbreak;\n}\n\nif (valuesList[j].timestamp &lt; dataP[i-1].timestamp)\n{\nbreak;\n}\n\nif (j == 0)\n{\nj = NB_VALUE - 1;\n}\nelse\n{\nj--;\n}\n}\n}\n\ndataP[i].value.asFloat = valuesList[j].value;\ndataP[i].timestamp = valuesList[j].timestamp;\n\nif (j &gt; 0)\n{\nif (valuesList[j-1].timestamp != 0)\n{\n// Changed result to be called again in the callback\nresult = IOWA_COAP_231_CONTINUE;\n}\n}\nelse if (valuesList[NB_VALUE-1].timestamp != 0)\n{\n// Changed result to be called again in the callback\nresult = IOWA_COAP_231_CONTINUE;\n}\n\nbreak;\n}\n\ndefault:\n// Already handled by IOWA stack\nbreak;\n}\n}\nbreak;\n\ndefault:\n// Already handled by IOWA stack\nbreak;\n}\n\nreturn result;\n}\n</code></pre> <p>Pay attention that the timestamp must be absolute and not relative to the current time, means negative values are not accepted. If the timestamp is zero, it's ignored.</p> <p>If you test this code, you will notice that you can retrieve the current temperature value. However, the LwM2M Server will not receive notifications when observing the Object resources.</p> <p>To correct this, we need to inform the IOWA stack of the changes not triggered by a LwM2M Server. This is done by calling the API <code>iowa_client_object_resource_changed()</code> whenever a change occurs.</p> <p>A correct interrupt handler is then:</p> <pre><code>switch (interrupt)\n{\n(...)\ncase NEW_TEMP:\n{\nvaluesList[currentIndex].timestamp = get_time();\nvaluesList[currentIndex].value = get_temperature();\n\ncurrentIndex++;\nif (currentIndex == NB_VALUE)\n{\ncurrentIndex = 0;\n}\n\niowa_client_object_resource_changed(contextP, 3303, 0, 5700);\nbreak;\n}\n(...)\n}\n</code></pre> <p>The diagram of the above example can be:</p> <p></p> <ul> <li>The Server sends first an Observation on /3303/0/5700.</li> <li>At this time the LwM2M Client has only one value to send back, and so the return value of the callback is 0.00 (No Error).</li> <li>Then the LwM2M Client retrieves the temperature values and call <code>iowa_client_object_resource_changed</code> for each new value. The Object callback has the possibility to return multiple values by returning the 2.31 (Continue) code.</li> </ul> <p>On first round, the application has to provide the first value, the callback is called with:</p> <ul> <li>numData: 1</li> <li>dataP[0]:<ul> <li>dataP[0].objectID: 3303, dataP[0].instanceID: 0, dataP[0].resourceID: 5700, dataP[0].resInstanceID: 65535 (IOWA_LWM2M_ID_ALL)</li> <li>dataP[0].type: IOWA_LWM2M_TYPE_FLOAT, dataP[0].value.asFloat: 0.0</li> <li>dataP[0].timestamp: 0</li> </ul> </li> </ul> <p>On second round, the application has to provide the second value, the callback is called with:</p> <ul> <li>numData: 2</li> <li>dataP[0]:<ul> <li>dataP[0].objectID: 3303, dataP[0].instanceID: 0, dataP[0].resourceID: 5700, dataP[0].resInstanceID: 65535 (IOWA_LWM2M_ID_ALL)</li> <li>dataP[0].type: IOWA_LWM2M_TYPE_FLOAT, dataP[0].value.asFloat: FIRST_VALUE</li> <li>dataP[0].timestamp: FIRST_TIMESTAMP</li> </ul> </li> <li>dataP[1]:<ul> <li>dataP[1].objectID: 3303, dataP[1].instanceID: 0, dataP[1].resourceID: 5700, dataP[1].resInstanceID: 65535 (IOWA_LWM2M_ID_ALL)</li> <li>dataP[1].type: IOWA_LWM2M_TYPE_FLOAT, dataP[1].value.asFloat: 0.0</li> <li>dataP[1].timestamp: 0</li> </ul> </li> </ul> <p>On third round, the application has to provide the third value, the callback is called with:</p> <ul> <li>numData: 3</li> <li>dataP[0]:<ul> <li>dataP[0].objectID: 3303, dataP[0].instanceID: 0, dataP[0].resourceID: 5700, dataP[0].resInstanceID: 65535 (IOWA_LWM2M_ID_ALL)</li> <li>dataP[0].type: IOWA_LWM2M_TYPE_FLOAT, dataP[0].value.asFloat: FIRST_VALUE</li> <li>dataP[0].timestamp: FIRST_TIMESTAMP</li> </ul> </li> <li>dataP[1]:<ul> <li>dataP[1].objectID: 3303, dataP[1].instanceID: 0, dataP[1].resourceID: 5700, dataP[1].resInstanceID: 65535 (IOWA_LWM2M_ID_ALL)</li> <li>dataP[1].type: IOWA_LWM2M_TYPE_FLOAT, dataP[1].value.asFloat: SECOND_VALUE</li> <li>dataP[1].timestamp: SECOND_TIMESTAMP</li> </ul> </li> <li>dataP[2]:<ul> <li>dataP[2].objectID: 3303, dataP[2].instanceID: 0, dataP[2].resourceID: 5700, dataP[2].resInstanceID: 65535 (IOWA_LWM2M_ID_ALL)</li> <li>dataP[2].type: IOWA_LWM2M_TYPE_FLOAT, dataP[2].value.asFloat: 0.0</li> <li>dataP[2].timestamp: 0</li> </ul> </li> </ul> <p>And so on, until the last value is provided and the return value of the callback is 0.00 (No Error).</p>"},{"location":"content/DeprecatedAPI.html","title":"Deprecated API Reference","text":"<p>Deprecated APIs are no longer supported which means that regression bugs will not be fixed. These APIs should not be used anymore. You are strongly advised to use their replacement.</p> <p>Note that deprecated API can be removed in a future IOWA release.</p>"},{"location":"content/DeprecatedAPI.html#deprecated-compilation-flags","title":"Deprecated Compilation Flags","text":""},{"location":"content/DeprecatedAPI.html#configuration","title":"Configuration","text":""},{"location":"content/DeprecatedAPI.html#iowa_single_connection_mode","title":"IOWA_SINGLE_CONNECTION_MODE","text":"<p>Support only one connection at a time. Useful for constrained devices in a single LwM2M Server environment.</p> <p>This define has no more effect when set.</p>"},{"location":"content/DeprecatedAPI.html#lwm2m_single_server_mode","title":"LWM2M_SINGLE_SERVER_MODE","text":"<p>This is only relevant when IOWA is in Client mode. When set, the Client supports only one Server configuration at a time. Useful for constrained devices in a single LwM2M Server environment.</p> <p>This define cannot be set when LWM2M_BOOTSTRAP is already set.</p> <p>This define has no more effect when set.</p>"},{"location":"content/DeprecatedAPI.html#lwm2m_old_content_format_support","title":"LWM2M_OLD_CONTENT_FORMAT_SUPPORT","text":"<p>During the development of the Lightweight M2M protocol, some LwM2M products were released. These products were using temporary numbers for the content format of the LwM2M payload. Setting this flag allows IOWA to interact with these old implementations. It should be seldom required.</p> <p>This define has no more effect when set. By default, the old content formats code are always supported.</p>"},{"location":"content/DeprecatedAPI.html#iowa_lorawan_minimal_support","title":"IOWA_LORAWAN_MINIMAL_SUPPORT","text":"<p>Minimal support for LoRaWAN transport. URI scheme is in the form \"lorawan://\". The Endpoint will not be able to send its Objects list in the Registration message and Registration Update message if it needs. This define should only be considered if the code size of IOWA is a concern.</p> <p>This define has no more effect when set.</p>"},{"location":"content/DeprecatedAPI.html#lwm2m_notification_queue_size","title":"LWM2M_NOTIFICATION_QUEUE_SIZE","text":"<p>This is only relevant when IOWA is in Client mode. When set, this define sets the maximum stored notification values when the notification are not able to reach the Server. The values are saved in RAM by IOWA internally inside a First In First Out Queue. The maximum values stored is per observation.</p> <p>By default, when the define is not set, the value is 4.</p> <p>This define has no more effect when set.</p>"},{"location":"content/DeprecatedAPI.html#lwm2m_storage_queue_peek_support","title":"LWM2M_STORAGE_QUEUE_PEEK_SUPPORT","text":"<p>When a LwM2M Server observing some resources is not reachable, the LwM2M Client stores the notifications until the connectivity is restored. By default, IOWA stores the last notifications in memory. When this flag is set, IOWA discharges the storage of these notifications to the platform. New version using a peek/remove mechanism instead of a dequeue mechanism.</p> <p>This feature requires the system abstraction functions <code>iowa_system_queue_create()</code>, <code>iowa_system_queue_enqueue()</code>, <code>iowa_system_queue_peek()</code>, <code>iowa_system_queue_remove()</code>, and <code>iowa_system_queue_delete()</code> to be implemented.</p> <p>This define will be later replaced by LWM2M_STORAGE_QUEUE_SUPPORT. It means the Storage Queue with Peek behavior will be the default.</p>"},{"location":"content/DeprecatedAPI.html#lwm2m-features-removal","title":"LwM2M features removal","text":"<p>LwM2M mandatory features can be removed depending on the use case. Removing a feature should only be done to reduce the code size of IOWA on constrained devices, and should not be considered for other case:</p> LWM2M_READ_OPERATION_REMOVE Remove the ability to handle a Read Operation. Only relevant for LwM2M Client mode. When this flag is set, LWM2M_OBSERVE_OPERATION_REMOVE and LWM2M_WRITE_ATTRIBUTES_OPERATION_REMOVE are also set. LWM2M_DISCOVER_OPERATION_REMOVE Remove the ability to handle a Discover Operation. Only relevant for LwM2M Client mode. LWM2M_WRITE_OPERATION_REMOVE Remove the ability to handle a Write Operation. Only relevant for LwM2M Client mode. LWM2M_WRITE_ATTRIBUTES_OPERATION_REMOVE Remove the ability to handle a Write-Attributes Operation. Only relevant for LwM2M Client mode. LWM2M_EXECUTE_OPERATION_REMOVE Remove the ability to handle an Execute Operation. Only relevant for LwM2M Client mode. LWM2M_CREATE_OPERATION_REMOVE Remove the ability to handle a Create Operation. Only relevant for LwM2M Client mode. LWM2M_DELETE_OPERATION_REMOVE Remove the ability to handle a Delete Operation. Only relevant for LwM2M Client mode. LWM2M_OBSERVE_OPERATION_REMOVE Remove the ability to handle an Observe Operation. Only relevant for LwM2M Client mode. When this flag is set, LWM2M_WRITE_ATTRIBUTES_OPERATION_REMOVE is also set. LWM2M_OPAQUE_CONTENT_FORMAT_REMOVE Remove the ability to decode/encode the Opaque Content Format. LWM2M_TEXT_CONTENT_FORMAT_REMOVE Remove the ability to decode/encode the Plain Text Content Format. <p>These defines have no more effect when set.</p>"},{"location":"content/DeviceUpdate.html","title":"Device Update","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/IPSO_client.html","title":"IPSO Object Client","text":"<p>This is the Baseline Client featuring an additional IPSO Temperature Object (ID: 3303).</p> <p>Among the IPSO-defined Objects, several of them, representing ambient sensors, have the same Resources. IOWA provides a single set of APIs to manipulate these Objects.</p> <p>The following API will be explained:</p> <ul> <li><code>iowa_client_IPSO_add_sensor()</code></li> <li><code>iowa_client_IPSO_update_value()</code></li> <li><code>iowa_client_IPSO_remove_sensor()</code></li> </ul>"},{"location":"content/IPSO_client.html#usage","title":"Usage","text":"<p>The usage is the same as the Baseline Client sample.</p> <p>When registered to the LwM2M Server, you will notice that the IPSO_client features an additional LwM2M IPSO Temperature Object (ID: 3303). This Temperature Object presents several Resources:</p> <p></p> <p>IPSO_client updates the \"Sensor Value\" each three seconds, cycling between the values 20, 21, 22, and 23.</p> <p>If you set up an Observation on this Object, the basic view will present such a graph:</p> <p></p> <p>After two minutes, IPSO_client unregisters from the LwM2M Server.</p>"},{"location":"content/IPSO_client.html#breakdown","title":"Breakdown","text":""},{"location":"content/IPSO_client.html#client-pseudocode","title":"Client Pseudocode","text":"<p>This is the pseudocode of Client main function:</p> <pre><code>main()\n{\n// Initialization\niowa_init();\n\n// LwM2M Client configuration\niowa_client_configure(CLIENT_NAME);\n\n// IPSO Temperature Object enabling\niowa_client_IPSO_add_sensor(IOWA_IPSO_TEMPERATURE);\n\n// LwM2M Server declaration\niowa_client_add_server(SERVER_SHORT_ID, SERVER_URI, SERVER_LIFETIME);\n\n// \"Main loop\"\nfor (120s)\n{\niowa_step(3);\niowa_client_IPSO_update_value()\n}\n\n// Cleanup\niowa_client_remove_server(SERVER_SHORT_ID);\niowa_client_IPSO_remove_sensor();\niowa_close();\n}\n</code></pre>"},{"location":"content/IPSO_client.html#initialization","title":"Initialization","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/IPSO_client.html#lwm2m-client-configuration","title":"LwM2M Client Configuration","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/IPSO_client.html#ipso-temperature-object-enabling","title":"IPSO Temperature Object Enabling","text":"<p>Here we add a Temperature sensor to the LwM2M Client.</p> <pre><code>iowa_sensor_t sensorId;\n\nresult = iowa_client_IPSO_add_sensor(iowaH, IOWA_IPSO_TEMPERATURE, 20, \"Cel\", \"Test Temperature\", -20.0, 50.0, &amp;sensorId);\n</code></pre> <p>As always, the first argument is the IOWA context created in the Initialization step.</p> <p>The second argument is the type of the sensor.</p> <p>The third argument is the initial value of the sensor. Depending on the sensor type, it is interpreted as a floating-point value, an integer, or a boolean.</p> <p>The fourth argument is an optional human-readable representation of the unit used by the sensor. It has not impact on the behavior of the Object.</p> <p>The fifth argument is also an optional human-readable string known as the \"Application Type\". It is useful for the LwM2M Server to discriminate between the sensors if the Client features several sensors of the same type. Note that not all sensor Objects feature this resource.</p> <p>The sixth and seventh arguments are the minimum and maximum values that can be measured by the sensor. These arguments are also optional. If they are both set to zero, the matching resources are not exposed by the Temperature Object Instance.</p> <p>The last argument is used to store the sensor identifier generated by IOWA. This identifier is used in other APIs.</p>"},{"location":"content/IPSO_client.html#lwm2m-server-declaration","title":"LwM2M Server Declaration","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/IPSO_client.html#main-loop","title":"\"Main Loop\"","text":"<p>The Baseline Client sample was letting IOWA run for two minutes before exiting. Here, during these two minutes, we let IOWA run for three seconds then we update the sensor value.</p> <pre><code>int i;\n\nfor (i = 0; i &lt; 40 &amp;&amp; result == IOWA_COAP_NO_ERROR; i++)\n{\nresult = iowa_step(iowaH, 3);\nresult = iowa_client_IPSO_update_value(iowaH, sensorId, 20 + i%4);\n}\n</code></pre> <p>The call to <code>iowa_step()</code> is the same as in the Simple Client sample with a different time value.</p> <p>The call to <code>iowa_client_IPSO_update_value()</code> informs IOWA that the value measured by the sensor has changed.</p> <p>As always, the first argument is the IOWA context created in the Initialization step.</p> <p>The second argument is the identifier of the sensor, retrieved from the call to <code>iowa_client_IPSO_add_sensor()</code>.</p> <p>The last argument is the value measured by the sensor. Depending on the sensor type, it is interpreted as a floating-point value, an integer, or a boolean. Here we are using a simulated value.</p> <p>IOWA takes care of all the operations performed by the LwM2M Server on the Object Instance: Read, Write and Observations.</p>"},{"location":"content/IPSO_client.html#cleanup","title":"Cleanup","text":"<p>This step is the same as in the Baseline Client sample with one additional function call:</p> <pre><code>iowa_client_IPSO_remove_sensor(iowaH, sensorId);\n</code></pre> <p>As always, the first argument is the IOWA context created in the Initialization step.</p> <p>The second argument is the identifier of the sensor, retrieved from the call to <code>iowa_client_IPSO_add_sensor()</code>.</p>"},{"location":"content/IPSO_client.html#next-steps","title":"Next Steps","text":"<p>IOWA implements a lot of LwM2M Objects natively and provides high-level APIS to feature them in your LwM2M Client. Samples for these can be found among the full SDK samples.</p> <p>If you want to implement your own LwM2M Objects, look at the Custom Object samples.</p>"},{"location":"content/License.html","title":"IOWA License","text":"<p>Any user of the software is presumed to have read his license before using it and to have accepted its terms. By using this software, you acknowledge that you are fully aware that its use is strictly regulated by the license agreement to which it is subject by SAS IOTEROP.</p> <p>The license associated with this version of the software is an evaluation license allowing only internal exploration and prototyping. Any commercial use of the software is strictly subject to the prior obtaining of a different and specific license (commercial license), the terms and conditions of which are defined by SAS IOTEROP. Any use of the software not expressly authorized by SAS IOTEROP may constitute a counterfeit punishable under French and international laws directly engaging the responsibility of its author (Article L335-3 of the French Intellectual Property Code - Berne Convention).</p>"},{"location":"content/LoRaWAN.html","title":"IOWA over LoRaWAN","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/LoggerAPI.html","title":"Logger Component","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/LwM2MOverview.html","title":"LwM2M Overview","text":"<p>The Lightweight Machine To Machine designed by the Open Mobile Alliance is a device management protocol for the Internet of Things (IoT).</p>"},{"location":"content/LwM2MOverview.html#lwm2m-concepts","title":"LwM2M Concepts","text":""},{"location":"content/LwM2MOverview.html#lwm2m-clientdevice","title":"LwM2M Client/Device","text":"<p>The LwM2M Client/Device is the entity being managed by the LwM2M Server. The LwM2M Client presents resources for the LwM2M Server to manipulate.</p>"},{"location":"content/LwM2MOverview.html#lwm2m-server","title":"LwM2M Server","text":"<p>The LwM2M Server is the entity managing the LwM2M Devices. It can Read, Write, Execute, Create or Delete the Devices resources.</p> <p>The LwM2M Server URI can have one of the following formats:</p> <ul> <li>\"coap://{hostname}[:{port}]\" for unsecure UDP transport</li> <li>\"coaps://{hostname}[:{port}]\" for secure UDP transport (using DTLS)</li> <li>\"coap+tcp://{hostname}[:{port}]\" for unsecure TCP transport</li> <li>\"coaps+tcp://{hostname}[:{port}]\" for secure TCP transport (using TLS)</li> <li>\"sms://{msisdn number}\" for SMS binding in binary mode</li> <li>\"lorawan://{FPort}\" for LoRaWAN binding with FPort between 1 and 255</li> </ul> <p>For UDP and TCP transports, if {port} is not present, the default port is used:</p> <ul> <li>5683 for communication without security</li> <li>5684 for secure communication</li> </ul>"},{"location":"content/LwM2MOverview.html#lwm2m-bootstrap-server","title":"LwM2M Bootstrap Server","text":"<p>The LwM2M Bootstrap Server is a special LwM2M Server. It is the only Server allowed to provision or delete Server Accounts on the LwM2M Devices. It can Read (LwM2M 1.1), Write, Create and Delete the Devices resources.</p>"},{"location":"content/LwM2MOverview.html#lwm2m-endpoint-name","title":"LwM2M Endpoint Name","text":"<p>The endpoint name is the name presented by the LwM2M Client to the LwM2M Servers. A LwM2M Server or a LwM2M Bootstrap Server must be able to uniquely identify the LwM2M Client using this endpoint name. One possibility is to use a standard URN like:</p> <ul> <li>3GPP Mobile Equipment Identity (RFC 8464):   <code>urn:3gpp2:meid:&lt;Manufacturer Code&gt;-&lt;Serial Number&gt;</code></li> <li>GSMA International Mobile station Equipment Identity (RFC 7274):   <code>urn:gsma:imei:&lt;Type Approval Code&gt;-&lt;Serial Number&gt;-&lt;Spare&gt;</code></li> <li>Universally Unique Identifier (RFC 4122):   <code>urn:uuid:&lt;UUID&gt;</code></li> <li>MAC address (RFC 9039):   <code>urn:dev:mac:&lt;EUI-64&gt;</code></li> <li>Organization specific identifier (RFC 9039):   <code>urn:dev:org:&lt;Enterprise Number&gt;-&lt;Anything&gt;</code></li> <li>Organization serial number (RFC 9039):   <code>urn:dev:os:&lt;Enterprise Number&gt;-&lt;Serial Number&gt;</code></li> <li>Organization product and serial number (RFC 9039):   <code>urn:dev:ops:&lt;Enterprise Number&gt;-&lt;Product Class&gt;-&lt;Serial Number&gt;</code></li> </ul>"},{"location":"content/LwM2MOverview.html#lwm2m-resource","title":"LwM2M Resource","text":"<p>A LwM2M Resource is a data item presented by the LwM2M Device. A resource has a data type, a list of allowed operations and a unique URI.</p> <p>Data types are defined in Lightweight M2M as follows:</p> <ul> <li>signed integer,</li> <li>unsigned integer,</li> <li>float,</li> <li>boolean,</li> <li>UTF-8 string,</li> <li>core link string,</li> <li>opaque binary,</li> <li>Unix time,</li> <li>reference to a LwM2M Object.</li> </ul> <p>A resource can also be an array of the mentioned data types.</p> <p>Operations on resources are Read, Write and Execute.</p>"},{"location":"content/LwM2MOverview.html#lwm2m-objects","title":"LwM2M Objects","text":"<p>The LwM2M Objects are a group of Device resources essential for some Device features such as firmware update, connectivity monitoring, physical sensor, etc. Standardized LwM2M Objects contain mandatory resources to support and optional resources to implement.</p> <p>A LwM2M Device can have several instances of the same LwM2M Object.</p> <p>All the Device resources are part of a LwM2M Object.</p>"},{"location":"content/LwM2MOverview.html#lwm2m-object-instance","title":"LwM2M Object Instance","text":"<p>Some LwM2M Objects are defined as multi-instance objects, meaning that a LwM2M Device can have several instances of the same LwM2M Object. These instances are identified by a numerical instance ID.</p> <p>When a LwM2M Object is defined as a single-instance, the instance ID is always 0.</p>"},{"location":"content/LwM2MOverview.html#lwm2m-uri","title":"LwM2M URI","text":"<p>Resources and Objects have well-known IDs. The URI to a LwM2M resource is in the form: Object_ID [\"/\" Object_Instance_ID [\"/\" Resource_ID [\"/\" Resource_Instance_ID]]]</p> <p>A URI can address an object, an object instance, a resource or a resource instance (i.e. an element when the resource is an array).</p>"},{"location":"content/LwM2MOverview.html#server-account","title":"Server Account","text":"<p>A Server Account is a set of data enabling a LwM2M Device to connect to a LwM2M Server. It includes the Server URI and the Security Keys to use.</p>"},{"location":"content/LwM2MOverview.html#bootstrap","title":"Bootstrap","text":"<p>A Bootstrap is the process by which the Device retrieves the Server Accounts. The information can come from factory settings, a SmartCard, or a LwM2M Bootstrap Server.</p>"},{"location":"content/LwM2MOverview.html#registration","title":"Registration","text":"<p>A LwM2M Server can only manage Devices registered with it.</p> <p>When registering with the Bootstrap Server, the Device communicates only its unique endpoint name.</p> <p>When registering with the LwM2M Server, the Device can communicate:</p> <ul> <li>its unique endpoint name,</li> <li>its lifetime,</li> <li>the list of LwM2M Objects implemented on the Device,</li> <li>its MSISDN,</li> <li>whether the Device requires Queue Mode or not.</li> </ul>"},{"location":"content/LwM2MOverview.html#observation","title":"Observation","text":"<p>The LwM2M Server can subscribe to one or several readable Device resources. When the value of the resource changes, the Device sends a Notification message to the Server containing the new value of the resource.</p>"},{"location":"content/LwM2MOverview.html#lifetime","title":"Lifetime","text":"<p>The Lifetime is the validity period of a LwM2M Device registration to the LwM2M Server. When this lifetime expires, the Server should no longer try to manage the Device.</p> <p>The Device sends Registration Update messages to the Server to renew its registration validity period.</p>"},{"location":"content/LwM2MOverview.html#queue-mode","title":"Queue Mode","text":"<p>Devices may go in stand-by mode and thus not be reachable by the LwM2M Servers at any time. To cope with this, the Device requests the Server to operate in Queue Mode. In this mode, the Device will initiate the communication with the Server (when sending a Notification or a Registration Update message). In the meantime, the Server is expected to queue its requests (hence the name).</p>"},{"location":"content/LwM2MOverview.html#sms-trigger","title":"SMS Trigger","text":"<p>An SMS Trigger is a special SMS sent to the Device. Upon reception of this SMS, the Device will either register to the Server or send a Registration Update message.</p>"},{"location":"content/LwM2MOverview.html#lwm2m-operations-overview","title":"LwM2M Operations Overview","text":""},{"location":"content/LwM2MOverview.html#bootstrap_1","title":"Bootstrap","text":"<p>When an endpoint is registered to a LwM2M Bootstrap Server, it can be managed by performing LwM2M operations on the endpoint's resources. The LwM2M operations are:</p> <ul> <li>Bootstrap Finish,</li> <li>Bootstrap Read,</li> <li>Bootstrap Write,</li> <li>Bootstrap Delete,</li> <li>Bootstrap Discover.</li> </ul>"},{"location":"content/LwM2MOverview.html#bootstrap-request","title":"Bootstrap Request","text":"<p>The first action of LwM2M Client is to connect to the LwM2M Bootstrap Server and ask a Bootstrap Request. The Bootstrap Request message contains an endpoint\u2019s unique ID.</p>"},{"location":"content/LwM2MOverview.html#bootstrap-finish","title":"Bootstrap Finish","text":"<p>A Bootstrap Finish operation is sent by the LwM2M Bootstrap Server. Upon reception of this operation, the LwM2M Client will perform a Bootstrap Consistency check to verify the Bootstrap information received from the LwM2M Bootstrap Server is valid. This means at least one LwM2M server is configured on the LwM2M Client.</p>"},{"location":"content/LwM2MOverview.html#bootstrap-read","title":"Bootstrap Read","text":"<p>In LwM2M 1.1 or later, a Bootstrap Read operation can target the LwM2M Objects Access Control List or Server, or their LwM2M Object Instances. The endpoint returns data encoded in either TLV, JSON, SenML CBOR, or SenML JSON.</p>"},{"location":"content/LwM2MOverview.html#bootstrap-write","title":"Bootstrap Write","text":"<p>A Bootstrap Write operation targets a LwM2M Object Instance. It contains data encoded in either TLV or JSON. The payload does not need to contain values for all the Object's resources.</p> <p>In LwM2M 1.1 or in later version, it contains data encoded in either SenML CBOR or SenML JSON.</p>"},{"location":"content/LwM2MOverview.html#bootstrap-delete","title":"Bootstrap Delete","text":"<p>A Bootstrap Delete operation can target the root path, a LwM2M Object or a LwM2M Instance Object.</p>"},{"location":"content/LwM2MOverview.html#bootstrap-discover","title":"Bootstrap Discover","text":"<p>A Bootstrap Discover operation can target the root path or a LwM2M Object. The endpoint returns only the list of Objects and Object Instances with some attributes: LwM2M Enabler version (\"lwm2m=\"), Short Server ID (\"ssid=\"), and LwM2M Server URI (\"uri=\").</p>"},{"location":"content/LwM2MOverview.html#registration_1","title":"Registration","text":""},{"location":"content/LwM2MOverview.html#initial-registration","title":"Initial Registration","text":"<p>The first action of LwM2M Client is to register to the LwM2M Server. The registration message contains an endpoint name and information about its capabilities (in the form of LwM2M Objects). The registration message also contains a lifetime parameter. When this lifetime expires, the LwM2M Server cancels the LwM2M Client registration.</p> <p>The LwM2M Server replies with a \"location\". This location is a handle to the registration. The endpoint uses this handle to update or cancel its registration.</p>"},{"location":"content/LwM2MOverview.html#registration-update","title":"Registration Update","text":"<p>To keep its registration active or in case the list of LwM2M Objects is modified, the endpoint sends a Registration Update message.</p> <p>Upon reception of this message, the LwM2M Server resets its internal lifetime timer.</p>"},{"location":"content/LwM2MOverview.html#de-registration","title":"De-registration","text":"<p>To cancel its registration, the LwM2M Client sends a De-registration message. The LwM2M Server may also automatically cancel an endpoint's registration if the registration lifetime expires.</p>"},{"location":"content/LwM2MOverview.html#device-management-and-service-enablement","title":"Device Management and Service Enablement","text":"<p>When an endpoint is registered to a LwM2M Server, it can be managed by performing LwM2M operations on the endpoint's resources. The LwM2M operations are:</p> <ul> <li>Read,</li> <li>Write,</li> <li>Execute,</li> <li>Discover,</li> <li>Create,</li> <li>Delete,</li> <li>Read composite,</li> <li>Write composite.</li> </ul>"},{"location":"content/LwM2MOverview.html#read","title":"Read","text":"<p>A Read operation can target a LwM2M Object, a LwM2M Object Instance or a LwM2M Resource. The endpoint returns data encoded in either TLV or JSON. For a single resource, a text encoding is possible.</p> <p>In LwM2M 1.1 or later, the endpoint returns data encoded in either SenML CBOR or SenML JSON.</p>"},{"location":"content/LwM2MOverview.html#write","title":"Write","text":"<p>A Write operation targets a LwM2M Object Instance. It contains data encoded in either TLV or JSON. The payload does not need to contain values for all the Object's resources.</p> <p>In LwM2M 1.1 or in later version, it contains data encoded in either SenML CBOR or SenML JSON.</p>"},{"location":"content/LwM2MOverview.html#execute","title":"Execute","text":"<p>An Execute operation can only target a LwM2M Resource.</p>"},{"location":"content/LwM2MOverview.html#discover","title":"Discover","text":"<p>A Discover operation can target a LwM2M Object, a LwM2M Object Instance or a LwM2M Resource.</p>"},{"location":"content/LwM2MOverview.html#create","title":"Create","text":"<p>A Create operation can target a LwM2M Object. It creates a new Object Instance.</p>"},{"location":"content/LwM2MOverview.html#delete","title":"Delete","text":"<p>A Delete operation can target a LwM2M Object Instance. It deletes an Object Instance.</p>"},{"location":"content/LwM2MOverview.html#read-composite","title":"Read composite","text":"<p>In LwM2M 1.1 or in later version, a Read composite operation can selectively Read a number of Resources, and/or Resource Instances of different Objects in a single request. The endpoint returns data encoded in either SenML CBOR,  SenML JSON, or LwM2M CBOR.</p>"},{"location":"content/LwM2MOverview.html#write-composite","title":"Write composite","text":"<p>In LwM2M 1.1 or in later version, a Write composite operation can update values of a number of different Resources across different Instances of one or more Objects in a single request. It contains data encoded in either SenML CBOR , SenML JSON, or LwM2M CBOR.</p>"},{"location":"content/LwM2MOverview.html#information-reporting","title":"Information Reporting","text":"<p>When a LwM2M Client is registered to a LwM2M Server, its resources can be observed. Whenever the value of the resource changes, the LwM2M Client sends a notification to the LwM2M Server. Moreover, in LwM2M 1.1, the Client can send data to the LwM2M Server without initial solicitation. The LwM2M operations are:</p> <ul> <li>Observation,</li> <li>Observation composite,</li> <li>Cancel Observation,</li> <li>Write attributes,</li> <li>Send.</li> </ul>"},{"location":"content/LwM2MOverview.html#observation_1","title":"Observation","text":"<p>An observation can target a LwM2M Object, a LwM2M Object Instance or a LwM2M Resource.</p>"},{"location":"content/LwM2MOverview.html#observe-composite","title":"Observe composite","text":"<p>In LwM2M 1.1 or in later version, an Observe composite operation can initiate observations or selectively read a group of Object, Object Instance, Resources, and/or Resource Instances of different Objects in a single request. The endpoint returns data encoded in either SenML CBOR or SenML JSON.</p>"},{"location":"content/LwM2MOverview.html#notification","title":"Notification","text":"<p>When an observed resource's value changes, the endpoint sends a notification message to the LwM2M Server.</p>"},{"location":"content/LwM2MOverview.html#cancel-observation","title":"Cancel Observation","text":"<p>The LwM2M Server can cancel an ongoing observation.</p>"},{"location":"content/LwM2MOverview.html#write-attributes","title":"Write attributes","text":"<p>The LwM2M Server can set the parameters of an observation. The possible attributes are:</p> Name Level Description pmin Object, Object Instance, Resource The minimum period in seconds to wait between notifications. pmax Object, Object Instance, Resource The maximum period in seconds to wait between notifications. gt Numerical Resource An upper threshold. A notification is sent when the resource value crosses this threshold. lt Numerical Resource A lower threshold. A notification is sent when the resource value crosses this threshold. st Numerical Resource A minimum difference in a resource value for a notification to be sent. epmin Object, Object Instance, Resource The minimum sample time in seconds for the observed sensor in LwM2M 1.1 or in later version. epmax Object, Object Instance, Resource The maximum sample time in seconds for the observed sensor in LwM2M 1.1 or in later version. <p>Setting an attribute is in the form <code>Name \"=\" value</code> with some constraints:</p> <ul> <li><code>lt</code> value &lt; <code>gt</code> value</li> <li><code>lt</code> value + 2 * <code>st</code> value &lt; <code>gt</code> value</li> <li>If <code>pmax</code> &lt; <code>pmin</code>, <code>pmax</code> is ignored</li> <li><code>epmax</code> &gt; <code>epmin</code></li> </ul> <p>Clearing an attribute is in the form <code>Name</code>.</p>"},{"location":"content/LwM2MOverview.html#examples","title":"Examples","text":"<ul> <li> <p>Receiving a notification every minute at most even if the observed URI did not change: <code>\"pmax=60\"</code>.</p> </li> <li> <p>Receiving only one notification per hour even if the observed URI changed several times per minute: <code>\"pmin=3600\"</code>.</p> </li> <li> <p>Receiving exactly one notification every sixty seconds: <code>\"pmin=59&amp;pmax=60\"</code>.</p> </li> <li> <p>Receiving a notification when the resource value exceeds 95 or falls below 10, and when the resource value returns below 95 or above 10: <code>\"lt=10&amp;gt=95\"</code>.</p> </li> <li> <p>Clearing the previously set minimum period and setting a maximum period of five minutes: <code>\"pmin&amp;pmax=300\"</code>.</p> </li> </ul>"},{"location":"content/LwM2MOverview.html#send","title":"Send","text":"<p>In LwM2M 1.1 or in later version, a Send operation is used by the LwM2M Client to send data to the LwM2M Server without an explicit request from that Server. It contains data encoded in either SenML CBOR, SenML JSON, or LwM2M CBOR.</p> <p>Later in the documentation, the Send operation is called a Data Push.</p>"},{"location":"content/LwM2MOverview.html#standardized-lwm2m-objects","title":"Standardized LwM2M Objects","text":"<p>The list of publics LwM2M Objects is available at the OMNA Registry: http://www.openmobilealliance.org/wp/OMNA/LwM2M/LwM2MRegistry.html</p>"},{"location":"content/LwM2MOverview.html#security-object","title":"Security Object","text":"<p>LwM2M Registry for Object 0</p> <p>This object provides the keying material of a LwM2M Client appropriate to access a specified LwM2M Server. One Object Instance should address a LwM2M Bootstrap-Server.</p> ID Resource Name Access Type Mandatory Type Description 0 LwM2M Server URI Yes String Uniquely identifies the LwM2M Server or LwM2M Bootstrap-Server. The format of the CoAP URI is defined in Section 6 of RFC 7252. 1 Bootstrap-Server Yes Boolean Determines if the current instance concerns a LwM2M Bootstrap-Server (true) or a standard LwM2M Server (false). 2 Security Mode Yes Integer Determines which UDP payload security mode is used. 3 Public Key or Identity Yes Opaque Stores the LwM2M Client\u2019s Certificate (Certificate mode), public key (RPK mode) or PSK Identity (PSK mode). 4 Server Public Key Yes Opaque Stores the LwM2M Server\u2019s or LwM2M Bootstrap-Server\u2019s Certificate (Certificate mode), public key (RPK mode). 5 Secret Key Yes Opaque Stores the secret key or private key of the security mode. 6 SMS Security Mode No Integer Determines which SMS security mode is used. 7 SMS Binding Key Parameters No Opaque Stores the KIc, KID, SPI and TAR. 8 SMS Binding Secret Key(s) No Opaque Stores the values of the key(s) for the SMS binding. 9 LwM2M Server SMS Number No String MSISDN used by the LwM2M Client to send messages to the LwM2M Server via the SMS binding. 10 Short Server ID No Integer This identifier uniquely identifies each LwM2M Server configured for the LwM2M Client. 11 Client Hold Off Time No Integer Relevant information for a Bootstrap-Server only. 12 Bootstrap-Server Account Timeout No Integer The LwM2M Client MUST purge the LwM2M Bootstrap-Server Account after the timeout value given by this resource. The lowest timeout value is 1. 13 Matching Type No Unsigned Integer The Matching Type Resource specifies how the certificate or raw public key in in the Server Public Key is presented. 14 SNI No String This resource holds the value of the Server Name Indication (SNI) value to be used during the TLS handshake. 15 Certificate Usage No Unsigned Integer The Certificate Usage Resource specifies the semantic of the certificate. 16 DTLS/TLS Ciphersuite No Unsigned Integer It instructs the TLS/DTLS client to propose the indicated ciphersuite(s) in the ClientHello of the handshake 17 OSCORE Security Mode No Object link It provides a link to the OSCORE Object Instance."},{"location":"content/LwM2MOverview.html#server-object","title":"Server Object","text":"<p>LwM2M Registry for Object 1</p> <p>This object provides the data related to a LwM2M Server. A Bootstrap-Server has no such an Object Instance associated to it.</p> ID Resource Name Access Type Mandatory Type Description 0 Short Server ID R Yes Integer Used as link to associate server Object Instance. 1 Lifetime RW Yes Integer Specify the lifetime of the registration in seconds. 2 Default Minimum Period RW No Integer The default value the LwM2M Client should use for the Minimum Period of an Observation in the absence of this parameter being included in an Observation. 3 Default Maximum Period RW No Integer The default value the LwM2M Client should use for the Maximum Period of an Observation in the absence of this parameter being included in an Observation. 4 Disable E No If this Resource is executed, this LwM2M Server Object is disabled for a certain period defined in the Disabled Timeout Resource. 5 Disable Timeout RW No Integer A period to disable the Server. 6 Notification Storing When Disabled or Offline RW Yes Boolean If true, the LwM2M Client stores \"Notify\" operations to the LwM2M Server while the LwM2M Server account is disabled or the LwM2M Client is offline. 7 Binding RW Yes String This Resource defines the transport binding configured for the LwM2M Client. 8 Registration Update Trigger E Yes If this Resource is executed the LwM2M Client MUST perform an \"Update\" operation with this LwM2M Server using that transport for the Current Binding Mode. 9 Bootstrap-Request Trigger E No If this Resource is executed the LwM2M Client MUST initiate a \"Client Initiated Bootstrap\" procedure in using the LwM2M Bootstrap-Server Account. 10 APN Link RW No Object link It provides a link to the APN connection profile Object Instance (OMNA registered Object ID:11) to be used to communicate with this server. 11 TLS-DTLS Alert Code R No Unsigned Integer It contains the most recent TLS / DTLS alert message received from the LwM2M Server. 12 Last Bootstrapped R No Time It represents the last time that the bootstrap server updated this LwM2M Server Account. 13 Registration Priority Order No Unsigned Integer The LwM2M Client sequences the LwM2M Server registrations in increasing order of this value. 14 Initial Registration Delay Timer No Unsigned Integer The delay before registration is attempted for this LwM2M Server based upon the completion of registration of the previous LwM2M Server in the registration order. 15 Registration Failure Block No Boolean Prevent or not the registration on the next LwM2M Server when the registration fails to connect with this LwM2M server. 16 Bootstrap on Registration Failure No Boolean Initiate a Bootstrap Request or not when the registration fails to connect with this LwM2M server. 17 Communication Retry Count No Unsigned Integer The number of successive communication attempts before which a communication sequence is considered as failed. 18 Communication Retry Timer No Unsigned Integer The delay between successive communication attempts in a communication sequence. 19 Communication Sequence Delay Timer No Unsigned Integer The delay between successive communication sequences. 20 Communication Sequence Retry Count No Unsigned Integer The number of successive communication sequences before which a registration attempt is considered as failed. 21 Trigger RW No Boolean Using the Trigger Resource a LwM2M Client can indicate whether it is reachable over SMS (value set to 'true') or not (value set to 'false'). 22 Preferred Transport RW No String When the LwM2M client supports multiple transports, it MAY use this transport to initiate a connection. 23 Mute Send RW No Boolean De-activated the LwM2M Client Send command capability."},{"location":"content/LwM2MOverview.html#access-control-list-object","title":"Access Control List Object","text":"<p>LwM2M Registry for Object 2</p> <p>This object is used to check whether the LwM2M Server has access right for performing an operation.</p> ID Resource Name Access Type Mandatory Type Description 0 Object ID R Yes Integer Used as link to associate Object which the access right is applicable. 1 Object Instance ID R Yes Integer Used as link to associate Object Instance which the access right is applicable. 2 ACL RW No Integer Set the access right for the corresponding LwM2M Servers. 3 Access Control Owner RW Yes Integer Short Server ID of a LwM2M Server. Only this LwM2M Server can manage the Resources of this Object Instance."},{"location":"content/LwM2MOverview.html#device-object","title":"Device Object","text":"<p>LwM2M Registry for Object 3</p> <p>This object contains the device information: model, manufacturer, serial number, power source type, battery level, etc... It also contains a resource allowing the Server to reboot the Device.</p> ID Resource Name Access Type Mandatory Type Description 0 Manufacturer R No String Human readable manufacturer name 1 Model Number R No String A model identifier (manufacturer specified string) 2 Serial Number R No String Serial Number 3 Firmware Version R No String Current firmware version of the Device. 4 Reboot E Yes none Reboot the LwM2M Device. 5 Factory Reset E No none Perform factory reset of the LwM2M Device to make the LwM2M Device to go through initial deployment sequence where provisioning and bootstrap sequence is performed. 6 Available Power Sources R No Integer array Available power sources of the Device. 7 Power Source Voltage R No Integer array Present voltage for each Available Power Sources. 8 Power Source Current R No Integer array Present current for each Available Power Sources. 9 Battery Level R No Integer Contains the current battery level as a percentage. 10 Memory Free R No Integer Estimated current available amount of storage space in the Device (expressed in kilobytes). 11 Error Code R Yes Integer array List of errors experienced by the Device. 12 Reset Error Code E No none Delete all error codes in the previous resource. 13 Current Time R/W No Time Current UNIX time of the LwM2M Client. 14 UTC Offset R/W No String Indicates the UTC offset currently in effect for this LwM2M Device. 15 Timezone R/W No String Indicates in which time zone the LwM2M Device is located. 16 Supported Bindings R Yes String Indicates which transports are supported by the Device. 17 Device Type R No String Type of the device (manufacturer specified string). 18 Hardware Version R No String Current hardware version of the device. 19 Software Version R No String Current software version of the device. 20 Battery Status R No Integer Status of the Device battery (normal, charging, etc...) 21 Memory Total R No Integer Total amount of storage space in the Device (expressed in kilobytes). 22 ExtDevInfo R No Object link Reference to a vendor specific object containing device information."},{"location":"content/LwM2MOverview.html#connectivity-monitoring-object","title":"Connectivity Monitoring Object","text":"<p>LwM2M Registry for Object 4</p> <p>This object provides high-level information on the current network type, signal strength, IP address, etc\u2026</p> ID Resource Name Access Type Mandatory Type Description 0 Network Bearer R Yes Integer The network bearer used for the current LwM2M communication session. 1 Available Network Bearer R Yes Integer array List of current available network bearer. 2 Radio Signal Strength R Yes Integer The average value of the received signal strength. 3 Link Quality R No Integer The received link quality. 4 IP Addresses R Yes String array The IP addresses assigned to the connectivity interface. 5 Router IP Addresses R No String array The IP addresses of the next-hop IP routers. 6 Link Utilization R No Integer The average utilization of the link in %. 7 APN R No String array Access Point Names in case Network Bearer Resource is a Cellular Network. 8 Cell ID R No Integer Serving Cell ID in case Network Bearer Resource is a Cellular Network. 9 SMNC R No Integer Serving Mobile Network Code. 10 SMCC R No Integer Serving Mobile Country Code. 11 SignalSNR R No Integer Signal to Interference plus Noise Ratio SINR is the ratio of the strength of the received signal to the strength of the received interference signal. 12 LAC R No Integer Location Area Code in case Network Bearer Resource is a Cellular Network. 13 Coverage Enh Level R No Integer Coverage Enhancement Level of the UE in the serving cell."},{"location":"content/LwM2MOverview.html#firmware-update-object","title":"Firmware Update Object","text":"<p>LwM2M Registry for Object 5</p> <p>This object allows to update the firmware of the device. The firmware package can either be pushed by the Server to the Device or the Device can download it using the provided URI.</p> ID Resource Name Access Type Mandatory Type Description 0 Package W Yes Opaque The firmware package pushed by the Server. 1 Package URI R/W Yes String The URI from where the Device can download the firmware package. 2 Update E Yes none Updates the Device firmware by using the firmware package. 3 State R Yes Integer Indicates current state with respect to this firmware update. 5 Update Result R Yes Integer Contains the result of downloading or updating the firmware. 6 PkgName R No String The name of the Firmware Package. 7 PkgVersion R No String The version of the Firmware package. 8 Firmware Update Protocol Support R No Integer The download protocols the Device implements. 9 Firmware Update Delivery Method R Yes Integer The delivery methods the Device supports."},{"location":"content/LwM2MOverview.html#location-object","title":"Location Object","text":"<p>LwM2M Registry for Object 6</p> <p>This object contains information on the device position and speed.</p> ID Resource Name Access Type Mandatory Type Description 0 Latitude R Yes Float The decimal notation of latitude. 1 Longitude R Yes Float The decimal notation of longitude. 2 Altitude R No Float The decimal notation of altitude in meters above sea level. 3 Radius R No Float The size in meters of a circular area around a point of geometry. 4 Velocity R No Opaque The velocity in the Device. 5 Timestamp R No Time The timestamp of when the location measurement was performed. 6 Speed R No Float The speed of the Device in meters per second."},{"location":"content/LwM2MOverview.html#connectivity-statistics-object","title":"Connectivity Statistics Object","text":"<p>LwM2M Registry for Object 7</p> <p>This object collects statistics on the network usage.</p> ID Resource Name Access Type Mandatory Type Description 0 SMS Tx Counter R No Integer The total number of SMS successfully transmitted during the collection period. 1 SMS Rx Counter R No Integer The total number of SMS successfully received during the collection period. 2 Tx Data R No Integer The total amount of IP data transmitted during the collection period. 3 Rx Data R No Integer The total amount of IP data received during the collection period. 4 Max Message Size R No Integer The maximum IP message size that is used during the collection period. 5 Average Message Size R No Integer The average IP message size that is used during the collection period. 6 Start E Yes none Start to collect information. 7 Stop E Yes none Stop collecting information. 8 Collection Period R/W No Integer The default collection period in seconds."},{"location":"content/LwM2MOverview.html#software-management-object","title":"Software Management Object","text":"<p>LwM2M Registry for Object 9</p> <p>This object allows to update the software of the device. The software package can either be pushed by the Server to the Device or the Device can download it using the provided URI.</p> ID Resource Name Access Type Mandatory Type Description 0 PkgName R Yes String Name of the software package. 1 PkgVersion R Yes String Version of the software package. 2 Package W No Opaque The software package pushed by the Server. 3 Package URI W No String The URI from where the Device can download the software package. 4 Install E Yes none Install the software package. 5 Checkpoint R No Objlink Link to a Checkpoint object which allows to specify conditions/dependencies for a software update. 6 Uninstall E Yes none Uninstall the software package. 7 Update State R/W No Boolean Indicates current state with respect to this software update. 8 Update Supported Object R Yes Integer Indicates if the LwM2M Client MUST inform the registered LwM2M Servers of Objects and Object Instances parameter by sending an Update or Registration message after the software update operation. 9 Update Result R Yes Integer Contains the result of downloading or updating the software. 10 Activate E Yes none Activate the previously installed software package. 11 Deactivate E Yes none Deactivate the previously installed software package. 12 Activation State R Yes Boolean Indicate the current activation state of the software. 13 User Name W No String User name for access to software Update Package in pull mode. 14 Password W No String Password for access to software Update Package in pull mode. 15 Software Component Link R No Objlink Reference to SW Components downloaded and installed in scope of the present SW Update Package."},{"location":"content/LwM2MOverview.html#cellular-connectivity-object","title":"Cellular Connectivity Object","text":"<p>LwM2M Registry for Object 10</p> <p>This object is used to configure the cellular connectivity of the Device.</p> ID Resource Name Access Type Mandatory Type Description 11 Activated Profile Names R Yes String array Links to instances of the \"APN connection profile\" object. 0 SMSC address R/W No String E.164 address of SMSC. 1 Disable radio period R/W No Integer Time period for which the device shall disconnect from cellular radio. 2 Module activation code R/W No String AT command to activate the module. 3 Vendor specific extensions R No Object Link Link to a vendor specific object. 4 PSM Timer R/W No Integer Power saving mode timer. 5 Active Timer R/W No Integer Active timer = T3324 as defined in [3GPP-TS_24.008]. 6 Serving PLMN Rate control R No Integer Maximum the number of allowed uplink PDU transmissions per 6 minute interval. 7 eDRX parameters for Iu mode R/W No Opaque Extended DRX parameters (Paging Time Window and eDRX value) for Iu mode. 8 eDRX parameters for WB-S1 mode R/W No Opaque Extended DRX parameters (Paging Time Window and eDRX value) for WB-S1 mode. 9 eDRX parameters for NB-S1 mode R/W No Opaque Extended DRX parameters (Paging Time Window and eDRX value) for NB-S1 mode. 10 eDRX parameters for A/Gb mode R/W No Opaque Extended DRX parameters (Paging Time Window and eDRX value) for A/Gb mode."},{"location":"content/LwM2MOverview.html#apn-connection-profile-object","title":"APN Connection Profile Object","text":"<p>LwM2M Registry for Object 11</p> <p>This object specifies resources to enable a device to connect to an APN.</p> ID Resource Name Access Type Mandatory Type Description 0 Profile name R/W Yes String Human-readable identifier. 1 APN R/W No String Presented to network during connection to PDN. 2 Auto select APN by device R/W No Boolean Enables the device to choose an APN according to a device specific algorithm. 3 Enable status R/W No Boolean Connection is activated or not. 4 Authentication Type R/W Yes Integer . 5 User Name R/W No String . 6 Secret R/W No String . 7 Reconnect Schedule R/W No String Comma separated list of retry delay values in seconds. 8 Validity (MCC, MNC) R/W No String array Coma separated mobile country code, then mobile network code. 9 Connection establishment time R No Time array UTC time of connection request. 10 Connection establishment result R No Integer array . 11 Connection establishment reject cause R No Integer array Reject cause, see [3GPP-TS_24.008, 3GPP-TS_24.301]. 12 Connection end time R No Time array UTC time of connection end. 13 TotalBytesSent R No Integer array Rolling counter for total number of bytes sent via this interface since last device reset. 14 TotalBytesReceived R No Integer Rolling counter for total number of bytes received via this interface since last device reset. 15 IP address R/W No String array IP addresses. 16 Prefix length R/W No String array Associated with IPv6 addresses. 17 Subnet mask R/W No String array Subnet masks. 18 Gateway R/W No String array Gateways. 19 Primary DNS address R/W No String array Primary DNS addresses. 20 Secondary DNS address R/W No String array Secondary DNS addresses. 21 QCI R No Integer Quality of service Class Identifier. 22 Vendor specific extensions R No Objlnk Links to a vendor specific object. 23 TotalPacketsSent R No Integer Rolling counter for total number of packets sent via this interface since last device reset. 24 PDN Type R/W No Integer . 25 APN Rate Control R No Integer Determines the number of allowed uplink PDU transmissions per time interval per APN."},{"location":"content/LwM2MOverview.html#bearer-selection-object","title":"Bearer selection Object","text":"<p>LwM2M Registry for Object 13</p> <p>This object specifies resources to enable a device to choose a PLMN/network on which to attach/register and what type of bearer to then connect.</p> ID Resource Name Access Type Mandatory Type Description 0 Preferred Communications Bearer R/W No Integer array Used in network selection and, if applicable, in subsequent mobility management procedures. 1 Acceptable RSSI (GSM) R/W No Integer Provides guide to the application when performing manual network selection. 2 Acceptable RSCP (UMTS) R/W No Integer Provides guide to the application when performing manual network selection. 3 Acceptable RSRP (LTE) R/W No Integer Provides guide to the application when performing manual network selection. 4 Acceptable RSSI (1xEV-DO) R/W No Integer Provides guide to the application when performing manual network selection. 5 Cell lock list R/W No String Comma separated list of allowed Global Cell Identities. 6 Operator list R/W No String Comma separated list of MCC+MNC of operators, in priority order. 7 Operator list mode R/W No Boolean Indicates whether resource \"operator list\" represents the allowed operator list (white list), or, the preferred operator list. 8 List of available PLMNs R No String Allows server to see results of network scan. 9 Vendor specific extensions R No Object link Links to a vendor specific object. 10 Acceptable RSRP (NB-IoT) R/W No Integer Provides guide to the application when performing manual network selection. 11 Higher Priority PLMN Search Timer R/W No Integer Interval between periodic searches for higher priority PLMN. 12 Attach without PDN connection R/W No Boolean ."},{"location":"content/LwM2MOverview.html#software-component-object","title":"Software Component Object","text":"<p>LwM2M Registry for Object 14</p> <p>This object provides the resources needed to activate/deactivate software components on the device.</p> ID Resource Name Access Type Mandatory Type Description 0 Component Identity R No String Name or identifier of the software component. 1 Component Pack R No Opaque Software components is stored in this resource. 2 Component Version R No String Version of the software component. 3 Activate E No none Activate the installed software component. 4 Deactivate E No none Deactivate the installed software component. 5 Activation State R No Boolean Indicate the current activation state of the software."},{"location":"content/LwM2MOverview.html#lwm2m-oscore","title":"LwM2M OSCORE","text":"<p>LwM2M Registry for Object 21</p> <p>This object provides the resources needed to activate/deactivate software components on the device.</p> ID Resource Name Access Type Mandatory Type Description 0 OSCORE Master Secret Yes String Store the pre-shared key used in LwM2M Client and LwM2M Server/Bootstrap-Server, called the Master Secret. 1 OSCORE Sender ID Yes String Store an OSCORE identifier for the LwM2M Client called the Sender ID. 2 OSCORE Recipient ID Yes String Store an OSCORE identifier for the LwM2M Client called the Recipient ID. 3 OSCORE AEAD Algorithm No Integer Store the encoding of the AEAD Algorithm as defined in Table 10 of RFC 8152. The AEAD is used by OSCORE for encryption and integrity protection of CoAP message fields. 4 OSCORE HMAC Algorithm No Integer Store the encoding of the HMAC Algorithm used in the HKDF. The encoding of HMAC algorithms are defined in Table 7 of RFC 8152. The HKDF is used to derive the security context used by OSCORE. 5 OSCORE Master Salt No String Store a non-secret random value called the Master Salt. The Master Salt is used to derive the security context used by OSCORE."},{"location":"content/Multithread.html","title":"IOWA Multithread Environment","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/Network.html","title":"IOWA Network environment","text":""},{"location":"content/Network.html#network-reliability","title":"Network reliability","text":""},{"location":"content/Network.html#behind-the-transport","title":"Behind the transport","text":"<p>Network reliability is a real issue when a system is deployed in an environment. Some networks can be reliable, when others do not guarantee the transmission of a message from one side to another.</p> <p>IOWA supports the following transports:</p> <ul> <li>User Datagram Protocol (aka UDP)</li> <li>Transmission Control Protocol (aka TCP)</li> <li>LoRaWAN</li> <li>Short Message Service (aka SMS)</li> </ul> <p>For each transport, a set of constants is defined to maximize the chances that message is received. These constants can be simplified into two parts: a retransmission counter and an initial timeout. The retransmission counter is the number of attempts to send until the communication is considered as failed. The initial timeout is the number of second to wait for a response before resending the message.</p> <p>The algorithm is as follows: when the initial timeout is triggered and the retransmission counter is less than the maximum retransmission number, the message is retransmitted, the retransmission counter is incremented, and the timeout is doubled. If the retransmission counter reaches the maximum retransmission number on a timeout, then the attempt to transmit the message is canceled and the application process is notified of the failure. On the other hand, if the endpoint receives a response in time, transmission is considered successful.</p> <p>In IOWA, it means:</p> <ul> <li>On server side: when an operation is performed, such as for a LwM2M Server a Read operation, if the message is not received by the client, the callback <code>iowa_result_callback_t</code> will be called with status sets to IOWA_COAP_503_SERVICE_UNAVAILABLE.</li> <li>On client side: if a Confirmable message is not acknowledged by the LwM2M Server such as the registration message, the registration update message, or a confirmable notification, the connection is considered lost. In case of registration or registration update, the callback <code>iowa_event_callback_t</code> will be called with eventP-&gt;eventType sets to IOWA_EVENT_REG_FAILED and the function <code>iowa_step</code> will exit by returning IOWA_COAP_503_SERVICE_UNAVAILABLE. On the other hand, if a confirmable notification is not acknowledged, the LwM2M Client deactivates the Server Account until the connection is reestablished, that is, an Acknowledgment is received on a Confirmable message.</li> <li>On both side: if the Platform layer returns a negative value on <code>iowa_system_connection_send</code>, <code>iowa_system_connection_recv</code> or <code>iowa_system_connection_select</code>, the connection will be considered lost.</li> </ul>"},{"location":"content/Network.html#client-registration-in-lwm2m-11","title":"Client Registration in LwM2M 1.1","text":"<p>In LwM2M 1.0 the registration procedure is very simple: either the registration is successful or it failed.</p> <p>In LwM2M 1.1 a new registration procedure was introduced with multiple registration attempts and an increasing delay between attempts. For more details, see the section 6.2.1.1. \"Bootstrap and LwM2M Server Registration Mechanisms\" of the LwM2M 1.1 Core TS.</p> <p>The default number of attempts is set to 5. The default timer between attempts is set to 60 seconds and doubles after each failed registration.</p> <p>There are three different ways to configure it:</p> <ol> <li>at IOWA build time.</li> </ol> <p>You can completely remove this behavior by setting the compilation flags IOWA_SERVER_RSC_REGISTRATION_BEHAVIOUR_REMOVE and IOWA_SERVER_RSC_COMMUNICATION_ATTEMPTS_REMOVE.</p> <p>You can also change the default values IOWA_SERVER_ACCOUNT_DEFAULT_COMM_RETRY_COUNT_VALUE, IOWA_SERVER_ACCOUNT_DEFAULT_COMM_RETRY_TIMER_VALUE, IOWA_SERVER_ACCOUNT_DEFAULT_COMM_SEQUENCE_DELAY_VALUE, and IOWA_SERVER_ACCOUNT_DEFAULT_COMM_SEQUENCE_COUNT_VALUE defined in iowa_client.h</p> <ol> <li>from the application.</li> </ol> <p>The APIs <code>iowa_client_set_server_registration_behaviour()</code> and <code>iowa_client_set_server_communication_attempts()</code> are controlling the registration settings.</p> <ol> <li>by the LwM2M Server (or the LwM2M Bootstrap Server).</li> </ol> <p>The LwM2M Server can write in the LwM2M Server Object (ID: 1) the resources 14 to 20 detailed below:</p> ID Resource Name Access Type Mandatory Type Description 14 Initial Registration Delay Timer No Unsigned Integer The delay before registration is attempted for this LwM2M Server based upon the completion of registration of the previous LwM2M Server in the registration order. 15 Registration Failure Block No Boolean Prevent or not the registration on the next LwM2M Server when the registration fails to connect with this LwM2M server. 16 Bootstrap on Registration Failure No Boolean Initiate a Bootstrap Request or not when the registration fails to connect with this LwM2M server. 17 Communication Retry Count No Unsigned Integer The number of successive communication attempts before which a communication sequence is considered as failed. 18 Communication Retry Timer No Unsigned Integer The delay between successive communication attempts in a communication sequence. 19 Communication Sequence Delay Timer No Unsigned Integer The delay between successive communication sequences. 20 Communication Sequence Retry Count No Unsigned Integer The number of successive communication sequences before which a registration attempt is considered as failed."},{"location":"content/Network.html#sms-specific-behaviors","title":"SMS specific behaviors","text":""},{"location":"content/Network.html#msisdn-fallback","title":"MSISDN Fallback","text":"<p>There is a MSISDN fallback for the Client when the connection can't be established on a Registration message or a Registration Update message is not acknowledged.</p> <p>This fallback can be activated with the define <code>IOWA_SMS_SUPPORT</code> and by providing the LwM2M Server MSISDN number with <code>iowa_client_set_server_msisdn</code>. In that case, if the LwM2M Client cannot reach a LwM2M Server, IOWA will close the current connection before opening a new SMS connection to try to register with this transport. On this second attempt, if the LwM2M Client has again no response from the LwM2M Server, <code>iowa_step</code> will exit by returning IOWA_COAP_503_SERVICE_UNAVAILABLE.</p> <p></p>"},{"location":"content/Network.html#registration-update-trigger-message","title":"Registration Update Trigger message","text":"<p>On the LwM2M Server side when an operation is not acknowledged by the LwM2M Client, the Server can generate a Registration Update Trigger message with <code>iowa_server_create_registration_update_trigger_message</code>. This message has to be sent by SMS to the Client.</p> <p>For this purpose, the Client must at least on its Registration message give its MSISDN number. This MSISDN number can be provided to IOWA when calling <code>iowa_client_configure</code> and setting infoP-&gt;msisdn. Last but not least, the Client has to listen on incoming SMS messages. If a message is received out of bound, the Client has to call <code>iowa_client_new_incoming_connection</code>. If the message received is a Registration Update Trigger, IOWA will automatically send a Registration Update using the Client preferred binding.</p> <p></p>"},{"location":"content/Network.html#network-reachability","title":"Network reachability","text":"<p>The LwM2M Server should always be present. But this is not the case for the LwM2M Client. There are multiple reasons for a LwM2M Client not to be available.</p> <ol> <li> <p>A LwM2M Server can deactivate the connection with a LwM2M Client for a certain period. This mechanism can be triggered by executing the resource Disable (ID: 4) of the <code>Server Object</code>. The LwM2M Server Account will be disabled for a certain period defined in the Disabled Timeout Resource (ID: 5). After receiving the Execute operation, LwM2M Client must perform the deregistration process, and underlying network connection between the LwM2M Client and LwM2M Server must be disconnected to disable the LwM2M Server account. After the above process, the LwM2M Client must not send any message to the Server and ignore all the messages from the LwM2M Server for the period. Once the disabled timeout expires, the client restarts the registration process to reconnect to the LwM2M Server.</p> </li> <li> <p>In LwM2M, there is a mechanism called Queue Mode which offers functionality for a LwM2M Client to inform the LwM2M Server that it may be disconnected for an extended period and when it becomes reachable again. When the LwM2M Client is not reachable, the LwM2M Server does not immediately send downlink requests, but instead waits until the LwM2M Client becomes reachable again.</p> </li> </ol>"},{"location":"content/Network.html#flow","title":"Flow","text":"<p>A typical Queue Mode sequence follows the steps listed below:</p> <ul> <li>The LwM2M Client registers to the LwM2M Server and requests the LwM2M Server to run in Queue mode.</li> <li>The LwM2M Client should use the CoAP constant MAX_TRANSMIT_WAIT (93 seconds) to set a timer for how long it shall stay awake after sending a message to the LwM2M Server. After the timeout expires without any messages from the LwM2M Server, the LwM2M Client enters sleep mode.</li> <li>At some point in time the LwM2M Client wakes up again and transmits a registration update message. Note: During the time the LwM2M Client has been sleeping the IP address assigned to it may have been released and/or existing NAT bindings may have been released. If this is the case, then the client needs to re-run the TLS/DTLS handshake with the LwM2M Server since an IP address and/or port number change will destroy the existing security context.</li> <li>When the LwM2M Server receives a message from the Client, it determines if any messages need to be sent to the LwM2M Client, as instructed by the Application Server.</li> </ul>"},{"location":"content/Network.html#iowa-api","title":"IOWA API","text":"<p>IOWA introduces two APIs to handle the Queue Mode: <code>iowa_flush_before_pause</code> and <code>iowa_client_send_heartbeat</code>.</p> <p><code>iowa_flush_before_pause</code> is used to inform the LwM2M stack that the device will pause. <code>iowa_flush_before_pause()</code> performs all the pending and required operations of the LwM2M stack engine before returning. It means that if the registration lifetime expires during the device sleep, IOWA will send a registration update before returning from this function. When waking up, the LwM2M Client is connected again to the LwM2M Server. This function also returns a parameter delayP to indicate when the next scheduled IOWA operation is.</p> <p><code>iowa_client_send_heartbeat</code> is used to send a heartbeat message to a LwM2M Server. Depending on the transport, the heartbeat sent can be a CoAP Empty message on LoRaWAN, or a registration update message for others transports.</p> <p>Below an example in pseudocode to use these APIs:</p> <pre><code>#include \"iowa_client.h\"\n\nint main(int argc,\nchar *argv[])\n{\niowa_context_t iowaH;\niowa_status_t result;\n\n/******************\n     * Initialization\n     */\n\niowaH = iowa_init(NULL);\n\niowa_client_configure(iowaH, \"IOWA_Sample_QM_Client\", NULL, NULL);\n\niowa_client_add_server(iowaH,\n1234,\n\"coap://localhost:5683\",\n0,\n0,\nIOWA_SEC_NONE);\n\n/******************\n     * \"Main loop\"\n     */\n\ndo\n{\nuint32_t iowaDelay;\n\n// Run for 93 seconds\nresult = iowa_step(iowaH, 93);\n\n// Prepare to stand by for 60 minutes\nresult = iowa_flush_before_pause(iowaH, 3600, &amp;iowaDelay);\nif (iowaDelay &lt; 3600)\n{\nSTAND_BY(iowaDelay);\n}\nelse\n{\nSTAND_BY(3600);\niowa_client_send_heartbeat(iowaH, 1234);\n}\n} while (result == IOWA_COAP_NO_ERROR)\n\niowa_client_remove_server(iowaH, 1234);\niowa_close(iowaH);\n\nreturn 0;\n}\n</code></pre> <p>In the above example, after calling <code>iowa_flush_before_pause</code>, there are two possibilities:</p> <ul> <li>iowaDelay is inferior to the requested stand by time. It means that on next <code>iowa_step</code> call, IOWA will send to the Server a message such as notification, registration update, etc. So, the Server will notice the device wake up and send back any buffered requests.</li> <li>Or, iowaDelay is equal to the requested stand by time. In that case, IOWA has nothing to send on next iowa_step() turn. To inform the Server that the device is awake, <code>iowa_client_send_heartbeat</code> needs to be called.</li> </ul>"},{"location":"content/ObjectAPN.html","title":"LwM2M APN Connection Profile Object","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectAT.html","title":"AT Command Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectAccelerometer.html","title":"IPSO Accelerometer Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectBearerSelection.html","title":"LwM2M Bearer Selection Object","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectCellularConnectivity.html","title":"LwM2M Cellular Connectivity Object","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectConnectivityMonitoring.html","title":"Connectivity Monitoring Object","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectConnectivityStatistics.html","title":"Connectivity Statistics Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectDigitalOutput.html","title":"IPSO Digital Output Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectDimmer.html","title":"IPSO Dimmer Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectFirmwareUpdate.html","title":"Firmware Update Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectGPS.html","title":"IPSO Location Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectGyrometer.html","title":"IPSO Gyrometer Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectLightControl.html","title":"IPSO Light Control Object","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectLocation.html","title":"Location Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectMagnetometer.html","title":"IPSO Magnetometer Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectSoftwareComponent.html","title":"LwM2M Software Component Object","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/ObjectSoftwareManagement.html","title":"LwM2M Software Management Object API","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/Object_Skeleton_Generator.html","title":"Object Skeleton Generator","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/OpenSourceLicenses.html","title":"Open Source Licenses","text":"<p>IOWA reuses code from various open source projects.</p> <ul> <li>wakaama is copyrighted by Intel Corporation and others and reused under the Eclipse Distribution License 1.0.</li> </ul> <p>Copyright (c) 2013, 2014 Intel Corporation</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li> <li>Neither the name of Intel Corporation nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>Eclipse Distribution License - v 1.0</p> <p>Copyright (c) 2007, Eclipse Foundation, Inc. and its licensors.</p> <p>All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li> <li>Neither the name of the Eclipse Foundation, Inc. nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <ul> <li> <p>mbed TLS is copyrighted by ARM Limited under the Apache License, Version 2.0.</p> </li> <li> <p>tinydtls is copyrighted by Olaf Bergmann and others and reused under the Eclipse Distribution License 1.0.</p> </li> </ul> <p>Copyright (c) 2011, 2012, 2013, 2014, 2015, 2016 Olaf Bergmann (TZI) and others. All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 and Eclipse Distribution License v. 1.0 which accompanies this distribution. The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html and the Eclipse Distribution License is available at http://www.eclipse.org/org/documents/edl-v10.php.</p> <p>Contributors:   *    Olaf Bergmann  - initial API and implementation   *    Hauke Mehrtens - memory optimization, ECC integration </p> <ul> <li>OMA LwM2M objects are copyrighted by Open Mobile Alliance.</li> </ul> <p>Copyright 2017 Open Mobile Alliance All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ol> <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li> <li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li> </ol> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p> <p>The above license is used as a license under copyright only. Please reference the OMA IPR Policy for patent licensing terms: http://www.openmobilealliance.org/ipr.html</p> <ul> <li>AT Command LwM2M object is copyrighted by Cisco.</li> </ul> <p>BSD 3-Clause License</p> <p>Copyright (c) 2017, Cisco All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <ul> <li>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</li> <li>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</li> <li>Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.</li> </ul> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"content/Porting.html","title":"Porting IOWA","text":"<p>IOWA has been designed to be easily ported to a new platform. All functions contained in the <code>System Abstraction Layer</code> are specific to a platform:</p> <ul> <li>Allocating / Freeing memory,</li> <li>Getting the time,</li> <li>Rebooting,</li> <li>Sending / Receiving network messages,</li> <li>Storing and retrieving the security keys,</li> <li>And, so on.</li> </ul> <p>FreeRTOS will be used here to explain the porting of IOWA on a platform.</p>"},{"location":"content/Porting.html#freertos-configuration","title":"FreeRTOS configuration","text":"<p>FreeRTOS has multiple levels to handle the memory allocation:</p> <ul> <li>Heap 1: The basic memory allocation, does not permit a free,</li> <li>Heap 2: Permits memory to be freed, but without coalescence adjacent free blocks,</li> <li>Heap 3: Works in the same way as malloc and free and handles thread safety,</li> <li>Heap 4: Includes the coalescence adjacent free blocks,</li> <li>Heap 5: Adds the ability to span the heap across multiple non-adjacent memory areas.</li> </ul> <p>Since IOWA needs to allocate and deallocate memory, the heap 2 is the minimum requirement. But the recommended heap to use with IOWA is heap 4.</p> <p>Moreover, the recommended configuration of <code>FreeRTOSConfig.h</code> is (not all the defines are provided):</p> <pre><code>#define configUSE_16_BIT_TICKS           0\n#define configUSE_MUTEXES                1\n#define configSUPPORT_STATIC_ALLOCATION  0\n#define configSUPPORT_DYNAMIC_ALLOCATION 1\n#define configTOTAL_HEAP_SIZE            ((size_t)14000)\n#define configAPPLICATION_ALLOCATED_HEAP 0\n\n#define INCLUDE_vTaskDelay 1\n</code></pre>"},{"location":"content/Porting.html#first-step","title":"First step","text":"<p>To begin, create an empty FreeRTOS project with just the main task to start the scheduler:</p> <pre><code>#include \"FreeRTOS.h\"\n#include \"task.h\"\n#include \"semphr.h\"\n\n#define INFINITE_LOOP() while (1);\n\nint main(void)\n{\n// Start the scheduler\nvTaskStartScheduler();\n\n// We should never get here as control is now taken by the scheduler\nINFINITE_LOOP();\n}\n</code></pre> <p>Generally, IOWA needs two threads to have a working LwM2M Client, but depending on the use case, more threads can be added:</p> <ul> <li>The first thread is dedicated to run IOWA and let it handle the LwM2M / CoAP stacks,</li> <li>The other threads are dedicated for the system tasks: measurement, actuator, etc.</li> </ul> <p>You can refer to the part of the documentation <code>IOWA Multithread Environment</code> to have additional information about how IOWA behaves in a multithread environment.</p>"},{"location":"content/Porting.html#platform-abstraction","title":"Platform abstraction","text":"<p>Before continuing the IOWA platform functions have to be implemented:</p> <pre><code>typedef struct\n{\nSemaphoreHandle_t globalMutex;\n} platform_user_data_t;\n\nvoid initPlatform(platform_user_data_t *platformUserDataP)\n{\nplatformUserDataP-&gt;globalMutex = xSemaphoreCreateMutex();\nxSemaphoreGive(platformUserDataP-&gt;globalMutex);\n}\n\nvoid * iowa_system_malloc(size_t size)\n{\nreturn pvPortMalloc(size);\n}\n\nvoid iowa_system_free(void * pointer)\n{\nvPortFree(pointer);\n}\n\nint32_t iowa_system_gettime(void)\n{\n// Platform dependant\n}\n\nvoid iowa_system_reboot(void * userData)\n{\n// Platform dependant or can be a stub function\n}\n\nvoid iowa_system_trace(const char * format,\nva_list varArgs)\n{\n// Platform dependant or can be a stub function\n}\n\nvoid * iowa_system_connection_open(iowa_connection_type_t type,\nchar * hostname,\nchar * port,\nvoid * userData)\n{\n// Platform dependant\n}\n\nvoid iowa_system_connection_close(void * connP,\nvoid * userData)\n{\n// Platform dependant\n}\n\nint iowa_system_connection_send(void * connP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData )\n{\n// Platform dependant\n}\n\nint iowa_system_connection_recv(void * connP,\nuint8_t * buffer,\nsize_t length,\nvoid * userData )\n{\n// Platform dependant\n}\n\nint iowa_system_connection_select(void ** connArray,\nsize_t connCount,\nint32_t timeout,\nvoid * userData )\n{\n// Platform dependant\n}\n\nvoid iowa_system_connection_interrupt_select(void * userData)\n{\n// Platform dependant\n}\n\nvoid iowa_system_mutex_lock(void * userData)\n{\nplatform_user_data_t *platformUserDataP;\n\nplatformUserDataP = (platform_user_data_t *)userData;\n\nxSemaphoreTake(platformUserDataP-&gt;globalMutex, portMAX_DELAY);\n}\n\nvoid iowa_system_mutex_unlock(void * userData)\n{\nplatform_user_data_t *platformUserDataP;\n\nplatformUserDataP = (platform_user_data_t *)userData;\n\nxSemaphoreGive(platformUserDataP-&gt;globalMutex);\n}\n</code></pre>"},{"location":"content/Porting.html#tasks-management","title":"Tasks management","text":"<p>We can now update the main function to create our two tasks:</p> <pre><code>typedef struct\n{\nSemaphoreHandle_t initMutex;\niowa_context_t contextP;\niowa_sensor_t tempSensorId;\n} iowa_user_data_t;\n\nvoid iowa_task(void const* argument)\n{\n// Task dedicated for IOWA operations\niowa_user_data_t *iowaUserDataP;\nplatform_user_data_t platformUserData;\niowa_status_t result;\n\ninitPlatform(&amp;platformUserData);\n\niowaUserDataP = (iowa_user_data_t *)argument;\n\n// Initialize the IOWA context\niowaUserDataP-&gt;contextP = iowa_init(platformUserData);\nif (iowaUserDataP-&gt;contextP == NULL)\n{\nINFINITE_LOOP();\n}\n\n// Initialize the Client context\nresult = iowa_client_configure(iowaUserDataP-&gt;contextP, \"IOWA_Client_FreeRTOS\", NULL, NULL);\nif (result != IOWA_COAP_NO_ERROR)\n{\nINFINITE_LOOP();\n}\n\n// Add a server\nresult = iowa_client_add_server(iowaUserDataP-&gt;contextP, 1234, \"coap://127.0.0.1:5683\", 3600, 0, IOWA_SEC_NONE);\nif (result != IOWA_COAP_NO_ERROR)\n{\nINFINITE_LOOP();\n}\n\n// Add a sensor object\nresult = iowa_client_IPSO_add_sensor(iowaUserDataP-&gt;contextP, IOWA_IPSO_TEMPERATURE, 24, \"Cel\", NULL, -20.0, 50.0, &amp;(iowaUserDataP-&gt;tempSensorId));\nif (result != IOWA_COAP_NO_ERROR)\n{\nINFINITE_LOOP();\n}\n\nxSemaphoreGive(iowaUserData-&gt;initMutex); // Synchronization\n\n// Start the IOWA step\n(void)iowa_step(iowaUserDataP-&gt;contextP, -1);\n\n// We should never get here as control is now taken by IOWA\nINFINITE_LOOP();\n}\n\nvoid system_task(void const* argument)\n{\n// Task dedicated for system operations\niowa_user_data_t *iowaUserDataP;\n\niowaUserDataP = (iowa_user_data_t *)argument;\n\nxSemaphoreTake(iowaUserData-&gt;initMutex, portMAX_DELAY); // Synchronization\n\nwhile (1)\n{\nfloat newValue;\n\nnewValue = GET_TEMPERATURE_VALUE();\n\n(void)iowa_client_IPSO_update_value(iowaUserDataP-&gt;contextP, iowaUserDataP-&gt;tempSensorId, newValue);\n\nvTaskDelay(5000);\n}\n}\n\nint main(void)\n{\niowa_user_data_t iowaUserData;\n\n// Create the init semaphore\niowaUserData-&gt;initMutex = xSemaphoreCreateMutex();\n\n// Create the tasks for IOWA\nxTaskCreate((TaskFunction_t)iowa_task, \"iowa\", 512, &amp;iowaUserData, tskIDLE_PRIORITY+2, NULL);\nxTaskCreate((TaskFunction_t)system_task, \"system\", 256, &amp;iowaUserData, tskIDLE_PRIORITY+1, NULL);\n\n// Start the scheduler\nvTaskStartScheduler();\n\n// We should never get here as control is now taken by the scheduler\nwhile (1); // Infinite loop\n}\n</code></pre>"},{"location":"content/Porting.html#error-handling","title":"Error handling","text":"<p>Now everything is working, error handling have to put in place in case something went wrong:</p> <ul> <li>Failed to initialize the IOWA stack,</li> <li>Failed to connect to a LwM2M Server,</li> <li>And, so on.</li> </ul> <p>IOWA can report events to the Application to inform about internal states such as connection to a LwM2M, new observation started or removed, etc.</p> <p>These events are reported through the callback <code>iowa_event_callback_t</code>, this callback is given when calling the API <code>iowa_client_configure()</code>:</p> <pre><code>void eventCb(iowa_event_t* eventP,\nvoid * userData,\niowa_context_t contextP)\n{\nswitch (eventP-&gt;eventType)\n{\ncase IOWA_EVENT_REG_FAILED:\n// Remove then re-add the Server in case the Client wasn't able to reach it\niowa_client_remove_server(contextP, 1234);\niowa_client_add_server(contextP, 1234, \"coap://127.0.0.1:5683\", 3600, 0, IOWA_SEC_NONE);\nbreak;\n\ndefault:\n// Do nothing for the other events\nbreak;\n}\n}\n\nvoid iowa_task(void const* argument)\n{\n...\n\nresult = iowa_client_configure(iowaUserDataP-&gt;contextP, \"IOWA_Client_FreeRTOS\", NULL, eventCb);\n\n...\n}\n</code></pre>"},{"location":"content/Security.html","title":"Security","text":"<p>Please refer to Security Implementations API</p> <p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/SecurityAPI.html","title":"Security Implementation","text":""},{"location":"content/SecurityAPI.html#abstraction-functions","title":"Abstraction Functions","text":""},{"location":"content/SecurityAPI.html#iowa_user_security_create_client_session","title":"iowa_user_security_create_client_session","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_user_security_create_client_session(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_create_client_session()</code> initializes implementation internals data of a new client-side security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session to initialize. <p>Return Value</p> <p>IOWA_COAP_NO_ERROR in case of success or an error status.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_create_server_session","title":"iowa_user_security_create_server_session","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_user_security_create_server_session(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_create_server_session()</code> initializes implementation internals data of a new server-side security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session to initialize. <p>Return Value</p> <p>IOWA_COAP_NO_ERROR in case of success or an error status.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_delete_session","title":"iowa_user_security_delete_session","text":"<p>Prototype</p> <pre><code>void iowa_user_security_delete_session(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_delete_session()</code> deletes the implementation internals data of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session to delete data from. <p>Return Value</p> <p>None.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_handle_handshake_packet","title":"iowa_user_security_handle_handshake_packet","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_user_security_handle_handshake_packet(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_handle_handshake_packet()</code> is called by IOWA when there is incoming data to read while the security session is in the SECURITY_STATE_HANDSHAKING state.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session receiving data. <p>Return Value</p> <p>IOWA_COAP_NO_ERROR in case of success or an error status.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_step","title":"iowa_user_security_step","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_user_security_step(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_step()</code> performs the required operations on the security session: updating state, handling timeouts, etc...</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session to update. <p>Return Value</p> <p>IOWA_COAP_NO_ERROR in case of success or an error status.</p> <p>Notes</p> <p>This function should update the IOWA context global timeout. See <code>iowa_security_session_set_step_delay()</code>.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_send","title":"iowa_user_security_send","text":"<p>Prototype</p> <pre><code>int iowa_user_security_send(iowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_send()</code> encrypts and sends data on a connected security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session to send data on. buffer The data to send. length The length of the data in bytes. <p>Return Value</p> <p>The number of bytes sent or a negative number in case of error.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_recv","title":"iowa_user_security_recv","text":"<p>Prototype</p> <pre><code>int iowa_user_security_recv(iowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_recv()</code> reads and decrypts data received on a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session to receives data from. buffer A buffer to store the decrypted data. length The length of the buffer in bytes. <p>Return Value</p> <p>The number of received bytes or a negative number in case of error.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_disconnect","title":"iowa_user_security_disconnect","text":"<p>Prototype</p> <pre><code>void iowa_user_security_disconnect(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_disconnect()</code> disconnects a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session to disconnect. <p>Return Value</p> <p>None.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_hkdf","title":"iowa_user_security_HKDF","text":"<p>Prototype</p> <pre><code>iowa_status_t iowa_user_security_HKDF(iowa_security_hash_t hash,\nuint8_t *IKM, size_t IKMLength,\nuint8_t *salt, size_t saltLength,\nuint8_t *info, size_t infoLength,\nuint8_t *OKM, size_t OKMLength);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_HKDF()</code> derives a new security key using HMAC-based Extract-and-Expand Key Derivation Function from RFC 5869.</p> <p>Arguments</p> hash The hash algorithm to use. IKM The input keying material. IKMLength The length in bytes of IKM. salt The salt value. This may be nil. saltLength The length in bytes of salt. This may be 0. info The context and application specific information. This may be nil. infoLength The length in bytes of info. This may be 0. OKM The buffer to store the computed output keying material. OKMLength The length in bytes of OKM. <p>Return Value</p> <p>IOWA_COAP_NO_ERROR in case of success or an error status.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_aead_encrypt","title":"iowa_user_security_AEAD_encrypt","text":"<p>Prototype</p> <pre><code>iowa_status_t\niowa_user_security_AEAD_encrypt(iowa_security_aead_t aead,\nuint8_t *key, size_t keyLength,\nuint8_t *nonce, size_t nonceLength,\nuint8_t *aad, size_t aadLength,\nuint8_t *plainData,\nsize_t plainDataLength,\nuint8_t *encryptedData,\nsize_t *encryptedDataLengthP,\nuint8_t *tag,\nsize_t tagLength);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_AEAD_encrypt()</code> encrypts data.</p> <p>Arguments</p> aead The AEAD algorithm to use. key The key to use to encrypt. keyLength The length in bytes of key. nonce The nonce to use. This may be nil. nonceLength The length in bytes of nonce. This may be 0. aad The additional data to authenticate. This may be nil. aadLength The length in bytes of aad. This may be 0. plainData The data to encrypt. plainDataLength The length in bytes of plainData. encryptedData The buffer to store the encrypted data. encryptedDataLengthP IN/OUT. The length in bytes of encryptedData. This may be modified by <code>iowa_user_security_AEAD_encrypt()</code>. tag A buffer to store the authentication tag. This may be nil. tagLength The length in bytes of tag. This may be 0. <p>Return Value</p> <p>IOWA_COAP_NO_ERROR in case of success or an error status.</p>"},{"location":"content/SecurityAPI.html#iowa_user_security_aead_decrypt","title":"iowa_user_security_AEAD_decrypt","text":"<p>Prototype</p> <pre><code>iowa_status_t\niowa_user_security_AEAD_decrypt(iowa_security_aead_t aead,\nuint8_t *key, size_t keyLength,\nuint8_t *nonce, size_t nonceLength,\nuint8_t *aad, size_t aadLength,\nuint8_t *tag, size_t tagLength,\nuint8_t *encryptedData,\nsize_t encryptedDataLength,\nuint8_t *plainData,\nsize_t *plainDataLengthP);\n</code></pre> <p>Description</p> <p><code>iowa_user_security_AEAD_decrypt()</code> decrypts data.</p> <p>Arguments</p> aead The AEAD algorithm to use. key The key to use to encrypt. keyLength The length in bytes of key. nonce The nonce to use. This may be nil. nonceLength The length in bytes of nonce. This may be 0. aad The additional data to authenticate. This may be nil. aadLength The length in bytes of aad. This may be 0. tag The authentication tag. This may be nil. tagLength The length in bytes of tag. This may be 0. encryptedData The data to decrypt. encryptedDataLength The length in bytes of encryptedData. plainData The buffer to store the decrypted data. plainDataLengthP IN/OUT. The length in bytes of plainData. This may be modified by <code>iowa_user_security_AEAD_decrypt()</code>. <p>Return Value</p> <p>IOWA_COAP_NO_ERROR in case of success or an error status.</p>"},{"location":"content/SecurityAPI.html#data-types","title":"Data types","text":""},{"location":"content/SecurityAPI.html#iowa_security_session_t","title":"iowa_security_session_t","text":"<p>This type is used to store the session of the IOWA security stack engine. Multiple sessions can exist at the same time. This can be treated as an opaque type and be used through the helper functions below.</p>"},{"location":"content/SecurityAPI.html#iowa_security_mode_t","title":"iowa_security_mode_t","text":"<pre><code>typedef uint8_t iowa_security_mode_t;\n</code></pre> <p>This contains the possible security mode for the Security layer. The following values are defined:</p> IOWA_SEC_PRE_SHARED_KEY Use the Pre-Shared Key mode of the security layer. IOWA_SEC_RAW_PUBLIC_KEY Use the Private/Public Key mode of the security layer. IOWA_SEC_CERTIFICATE Use the X.509 Certificate mode of the security layer. IOWA_SEC_NONE The security layer is not involved in the communication with this peer. IOWA_SEC_CERTIFICATE_WITH_EST Use the X.509 Certificate with EST mode of the security layer. IOWA_SEC_OSCORE Use the OSCORE security of the CoAP layer. This value can be used as a flag to be combined with the other values, e.g. <code>IOWA_SEC_PRE_SHARED_KEY | IOWA_SEC_OSCORE</code>."},{"location":"content/SecurityAPI.html#iowa_cert_usage_mode_t","title":"iowa_cert_usage_mode_t","text":"<pre><code>typedef uint8_t iowa_cert_usage_mode_t;\n</code></pre> <p>This contains the possible semantic of the certificate or raw public key, which is used to match the certificate presented in the TLS/DTLS handshake. It is used by the Security layer when the security is IOWA_SEC_RAW_PUBLIC_KEY, IOWA_SEC_CERTIFICATE, or IOWA_SEC_CERTIFICATE_WITH_EST. The following values are defined:</p> IOWA_CERTIFICATE_USAGE_CA_CONSTRAINT CA constraint. IOWA_CERTIFICATE_USAGE_SERVICE_CERTIFICATE_CONSTRAINT Service certificate constraint. IOWA_CERTIFICATE_USAGE_TRUST_ANCHOR_ASSERTION Trust anchor assertion. IOWA_CERTIFICATE_USAGE_DOMAIN_ISSUED_CERTIFICATE Domain-issued certificate."},{"location":"content/SecurityAPI.html#iowa_security_state_t","title":"iowa_security_state_t","text":"<pre><code>typedef enum\n{\nSECURITY_STATE_DISCONNECTED = 0,\nSECURITY_STATE_DISCONNECTING,\nSECURITY_STATE_INIT_HANDSHAKE,\nSECURITY_STATE_HANDSHAKING,\nSECURITY_STATE_HANDSHAKE_DONE,\nSECURITY_STATE_CONNECTED,\nSECURITY_STATE_CONNECTION_FAILING,\nSECURITY_STATE_CONNECTION_FAILED,\n} iowa_security_state_t;\n</code></pre> <p>This reflects the state of the security session. It is an enumeration of the following values:</p> SECURITY_STATE_DISCONNECTED The security session is disconnected. SECURITY_STATE_DISCONNECTING The security session is currently disconnecting. SECURITY_STATE_INIT_HANDSHAKE The security session is starting the handshake with the peer. SECURITY_STATE_HANDSHAKING The security session is in the middle of the handshake with the peer. SECURITY_STATE_HANDSHAKE_DONE The handshake with the peer is done. SECURITY_STATE_CONNECTED The security session is connected to the peer. SECURITY_STATE_CONNECTION_FAILING An error occurred during the security session connection to the peer. SECURITY_STATE_CONNECTION_FAILED The security session failed to connect to the peer."},{"location":"content/SecurityAPI.html#iowa_security_event_type_t","title":"iowa_security_event_type_t","text":"<pre><code>typedef enum\n{\nSECURITY_EVENT_UNDEFINED = 0,\nSECURITY_EVENT_DISCONNECTED,\nSECURITY_EVENT_CONNECTED,\nSECURITY_EVENT_DATA_AVAILABLE,\n} iowa_security_event_type_t;\n</code></pre> <p>This contains the possible events to report to the upper layers. It is an enumeration of the following values:</p> SECURITY_EVENT_UNDEFINED No specific event. This should never be used and only serves as a non default event. SECURITY_EVENT_DISCONNECTED The security session disconnected. SECURITY_EVENT_CONNECTED The security session is now connected. SECURITY_EVENT_DATA_AVAILABLE Decrypted data are available to read on the security session."},{"location":"content/SecurityAPI.html#iowa_security_event_t","title":"iowa_security_event_t","text":"<pre><code>typedef struct\n{\niowa_security_event_type_t eventType;\nunion\n{\nsize_t MTU;\n} details;\n} iowa_security_event_t;\n</code></pre> <p>This contains the event to report to the upper layers.</p> <p>eventType: the event type.</p> <p>details::MTU for the SECURITY_EVENT_CONNECTED event. The maximum transmission unit of the security session.</p>"},{"location":"content/SecurityAPI.html#iowa_security_hash_t","title":"iowa_security_hash_t","text":"<pre><code>typedef enum\n{\nSECURITY_HMAC_UNDEFINED = 0,\nSECURITY_HMAC_SHA256_64 = 4,\nSECURITY_HMAC_SHA256    = 5,\nSECURITY_HMAC_SHA384    = 6,\nSECURITY_HMAC_SHA512    = 7\n} iowa_security_hash_t;\n</code></pre> <p>This contains the possible HMAC algorithms used by OSCORE. See table 7 of RFC 8152.</p> SECURITY_HMAC_UNDEFINED No specific algorithm. This should never be used and only serves as a non default value. SECURITY_HMAC_SHA256_64 HMAC with SHA-256 truncated to 64 bits. SECURITY_HMAC_SHA256 HMAC with SHA-256. SECURITY_HMAC_SHA384 HMAC with SHA-384. SECURITY_HMAC_SHA512 HMAC with SHA-512."},{"location":"content/SecurityAPI.html#iowa_security_aead_t","title":"iowa_security_aead_t","text":"<pre><code>typedef enum\n{\nSECURITY_AEAD_UNDEFINED          = 0,\nSECURITY_AEAD_AES_CCM_16_64_128  = 10,\nSECURITY_AEAD_AES_CCM_16_64_256  = 11,\nSECURITY_AEAD_AES_CCM_64_64_128  = 12,\nSECURITY_AEAD_AES_CCM_64_64_256  = 13,\nSECURITY_AEAD_AES_CCM_16_128_128 = 30,\nSECURITY_AEAD_AES_CCM_16_128_256 = 31,\nSECURITY_AEAD_AES_CCM_64_128_128 = 32,\nSECURITY_AEAD_AES_CCM_64_128_256 = 33\n} iowa_security_aead_t;\n</code></pre> <p>This contains the possible AEAD algorithms used by OSCORE. See table 10 of RFC 8152.</p> SECURITY_AEAD_UNDEFINED No specific algorithm. This should never be used and only serves as a non default value. SECURITY_AEAD_AES_CCM_16_64_128 AES-CCM mode 128-bit key, 64-bit tag, 13-byte nonce. SECURITY_AEAD_AES_CCM_16_64_256 AES-CCM mode 256-bit key, 64-bit tag, 13-byte nonce. SECURITY_AEAD_AES_CCM_64_64_128 AES-CCM mode 128-bit key, 64-bit tag, 7-byte nonce. SECURITY_AEAD_AES_CCM_64_64_256 AES-CCM mode 256-bit key, 64-bit tag, 7-byte nonce. SECURITY_AEAD_AES_CCM_16_128_128 AES-CCM mode 128-bit key, 128-bit tag, 13-byte nonce. SECURITY_AEAD_AES_CCM_16_128_256 AES-CCM mode 256-bit key, 128-bit tag, 13-byte nonce. SECURITY_AEAD_AES_CCM_64_128_128 AES-CCM mode 128-bit key, 128-bit tag, 7-byte nonce. SECURITY_AEAD_AES_CCM_64_128_256 AES-CCM mode 256-bit key, 128-bit tag, 7-byte nonce."},{"location":"content/SecurityAPI.html#helper-functions","title":"Helper Functions","text":""},{"location":"content/SecurityAPI.html#iowa_security_session_set_user_internals","title":"iowa_security_session_set_user_internals","text":"<p>Prototype</p> <pre><code>void iowa_security_session_set_user_internals(iowa_security_session_t securityS,\nvoid *internalsP);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_set_user_internals()</code> stores opaque data in a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session where to store the opaque data. internalsP A pointer to the opaque data to store. <p>Return Value</p> <p>None.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_get_user_internals","title":"iowa_security_session_get_user_internals","text":"<p>Prototype</p> <pre><code>void * iowa_security_session_get_user_internals(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_get_user_internals()</code> retrieves the opaque data stored in a security session with <code>iowa_security_session_set_user_internals()</code>.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to the security session where to store the opaque data. <p>Return Value</p> <p>A pointer to the stored opaque data.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_get_state","title":"iowa_security_session_get_state","text":"<p>Prototype</p> <pre><code>iowa_security_state_t\niowa_security_session_get_state(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_get_state()</code> retrieves the state of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. <p>Return Value</p> <p>The state of the security session.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_set_state","title":"iowa_security_session_set_state","text":"<p>Prototype</p> <pre><code>void iowa_security_session_set_state(iowa_security_session_t securityS,\niowa_security_state_t state);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_set_state()</code> sets the state of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. state The new state of the security session. <p>Return Value</p> <p>None.</p>"},{"location":"content/SecurityAPI.html#iowa_security_get_server_session","title":"iowa_security_get_server_session","text":"<p>Prototype</p> <pre><code>iowa_security_session_t iowa_security_get_server_session(iowa_context_t contextP,\nuint16_t shortServerId);\n</code></pre> <p>Description</p> <p><code>iowa_security_get_server_session()</code> retrieves the security session associated to a Server.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. shortServerId The Short ID assigned to the server. <p>Return Value</p> <p>The security session if found, otherwise NULL.</p>"},{"location":"content/SecurityAPI.html#iowa_security_get_client_session","title":"iowa_security_get_client_session","text":"<p>Prototype</p> <pre><code>iowa_security_session_t iowa_security_get_client_session(iowa_context_t contextP,\nuint32_t clientId);\n</code></pre> <p>Description</p> <p><code>iowa_security_get_client_session()</code> retrieves the security session associated to a Client.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. clientId The ID assigned to the Client. <p>Return Value</p> <p>The security session if found, otherwise NULL.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_generate_event","title":"iowa_security_session_generate_event","text":"<p>Prototype</p> <pre><code>void iowa_security_session_generate_event(iowa_security_session_t securityS,\niowa_security_event_t event);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_generate_event()</code> calls the event callback of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. event The event to be passed as parameter to the event callback. <p>Return Value</p> <p>None.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_get_connection_type","title":"iowa_security_session_get_connection_type","text":"<p>Prototype</p> <pre><code>iowa_connection_type_t\niowa_security_session_get_connection_type(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_get_connection_type()</code> retrieves the type of the underlying connection of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. <p>Return Value</p> <p>The type of the underlying connection as an <code>iowa_connection_type_t</code>.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_get_connection","title":"iowa_security_session_get_connection","text":"<p>Prototype</p> <pre><code>void * iowa_security_session_get_connection(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_get_connection()</code> retrieves the underlying connection of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. <p>Return Value</p> <p>The underlying connection as returned by <code>iowa_system_connection_open()</code>.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_get_security_mode","title":"iowa_security_session_get_security_mode","text":"<p>Prototype</p> <pre><code>iowa_security_mode_t\niowa_security_session_get_security_mode(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_get_security_mode()</code> retrieves the security mode of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. <p>Return Value</p> <p>The security mode as an <code>iowa_security_mode_t</code>.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_get_uri","title":"iowa_security_session_get_uri","text":"<p>Prototype</p> <pre><code>const char * iowa_security_session_get_uri(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_get_uri()</code> retrieves the URI of the peer of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. <p>Return Value</p> <p>The URI of the peer.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_set_step_delay","title":"iowa_security_session_set_step_delay","text":"<p>Prototype</p> <pre><code>void iowa_security_session_set_step_delay(iowa_security_session_t securityS,\nint32_t delay);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_set_step_delay()</code> sets the delay before the next scheduled operation on a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. securityS the time in seconds before <code>iowa_user_security_step()</code> needs to be call again for this security session. <p>Return Value</p> <p>None.</p> <p>Notes</p> <p>If delay is a negative number, it is ignored.</p> <p>As IOWA maintains only one global delay, <code>iowa_user_security_step()</code> may be called before the delay expires. The delay must be updated at each call.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_get_context","title":"iowa_security_session_get_context","text":"<p>Prototype</p> <pre><code>iowa_context_t iowa_security_session_get_context(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_get_context()</code> retrieves the IOWA context in which a security session exists.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. <p>Return Value</p> <p>The IOWA context.</p>"},{"location":"content/SecurityAPI.html#iowa_security_session_get_context_user_data","title":"iowa_security_session_get_context_user_data","text":"<p>Prototype</p> <pre><code>void * iowa_security_session_get_context_user_data(iowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>iowa_security_session_get_context_user_data()</code> retrieves the pointer to application-specific data of the IOWA context in which a security session exists.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. <p>Return Value</p> <p>The pointer to application-specific data as passed to <code>iowa_init()</code>.</p>"},{"location":"content/SecurityAPI.html#iowa_security_connection_send","title":"iowa_security_connection_send","text":"<p>Prototype</p> <pre><code>int iowa_security_connection_send(iowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n</code></pre> <p>Description</p> <p><code>iowa_security_connection_send()</code> sends data on the underlying connection of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. buffer The data to send. length The length of the data in bytes. <p>Return Value</p> <p>The number of bytes sent or a negative number in case of error.</p>"},{"location":"content/SecurityAPI.html#iowa_security_connection_recv","title":"iowa_security_connection_recv","text":"<p>Prototype</p> <pre><code>int iowa_security_connection_recv(iowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n</code></pre> <p>Description</p> <p><code>iowa_security_connection_recv()</code> reads data on the underlying connection of a security session.</p> <p>Arguments</p> securityS An iowa_security_session_t pointing to a security session. buffer A buffer to store the received data. length The number of bytes to read. <p>Return Value</p> <p>The number of bytes read or a negative number in case of error.</p>"},{"location":"content/SecurityComponent.html","title":"Security Component","text":"<p>The functions explained below are defined inside the file src/security/iowa_prv_security.h.</p> <pre><code>iowa_status_t securityInit(iowa_context_t contextP);\n\nvoid securityClose(iowa_context_t contextP);\n\niowa_status_t securityStep(iowa_context_t contextP);\n\niowa_security_session_t securityClientNewSession(iowa_context_t contextP,\nconst char *uri,\niowa_security_mode_t securityMode);\n\niowa_security_session_t securityServerNewSession(iowa_context_t contextP,\niowa_connection_type_t type,\nvoid *connP,\nbool isSecure);\n\nvoid securityDeleteSession(iowa_context_t contextP,\niowa_security_session_t securityS);\n\nvoid securitySetEventCallback(iowa_context_t contextP,\niowa_security_session_t securityS,\nsecurity_event_callback_t eventCb,\nvoid *userDataCb);\n\niowa_status_t securityConnect(iowa_context_t contextP,\niowa_security_session_t securityS);\n\nvoid securityDisconnect(iowa_context_t contextP,\niowa_security_session_t securityS);\n\nint securitySend(iowa_context_t contextP,\niowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n\nint securityRecv(iowa_context_t contextP,\niowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n\nbool securityGetIsSecure(iowa_context_t contextP,\niowa_security_session_t securityS);\n\nsize_t securityGetIdentity(iowa_context_t contextP,\niowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n\niowa_status_t securityAddKey(iowa_context_t contextP,\nconst char *uri,\niowa_security_data_t *securityDataP);\n\niowa_status_t securityRemoveKey(iowa_context_t contextP,\nconst char *uri);\n</code></pre>"},{"location":"content/SecurityComponent.html#data-types","title":"Data types","text":""},{"location":"content/SecurityComponent.html#iowa_security_context_t","title":"iowa_security_context_t","text":"<p>This type is used to store the context of the IOWA security stack engine. It is created by calling <code>securityInit()</code> and destroyed by calling <code>securityClose()</code>.</p>"},{"location":"content/SecurityComponent.html#iowa_security_session_t","title":"iowa_security_session_t","text":"<p>This type is used to store the session of the IOWA security stack engine. Multiple sessions can exist at the same time. It is created by calling <code>securityClientNewSession()</code> or <code>securityServerNewSession()</code> and destroyed by calling <code>securityDeleteSession()</code>.</p>"},{"location":"content/SecurityComponent.html#functions","title":"Functions","text":""},{"location":"content/SecurityComponent.html#securityinit","title":"securityInit","text":"<p>Prototype</p> <pre><code>iowa_status_t securityInit(iowa_context_t contextP);\n</code></pre> <p>Description</p> <p><code>securityInit()</code> initializes a security context.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securityclose","title":"securityClose","text":"<p>Prototype</p> <pre><code>void securityClose(iowa_context_t contextP);\n</code></pre> <p>Description</p> <p><code>securityClose()</code> closes a security context.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securitystep","title":"securityStep","text":"<p>Prototype</p> <pre><code>iowa_status_t securityStep(iowa_context_t contextP);\n</code></pre> <p>Description</p> <p><code>securityStep()</code> does a security step to handle the handshaking, the timeout, ... for all the security sessions.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_412_INTERNAL_SERVER_ERROR attempt to do handshake on a security session which doesn't need it. IOWA_COAP_500_INTERNAL_SERVER_ERROR error during the handshake of a security session. <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securityclientnewsession","title":"securityClientNewSession","text":"<p>Prototype</p> <pre><code>iowa_security_session_t securityClientNewSession(iowa_context_t contextP,\nconst char *uri,\niowa_security_mode_t securityMode);\n</code></pre> <p>Description</p> <p><code>securityClientNewSession()</code> initializes a security session for a client.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. uri URI of the server, used as identity. securityMode The security mode to use when connecting to this LwM2M Server. <p>Return Value</p> <p>An <code>iowa_security_session_t</code> in case of success or NULL in case of error.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securityservernewsession","title":"securityServerNewSession","text":"<p>Prototype</p> <pre><code>iowa_security_session_t securityServerNewSession(iowa_context_t contextP,\niowa_connection_type_t type,\nvoid *connP,\nbool isSecure);\n</code></pre> <p>Description</p> <p><code>securityServerNewSession()</code> initializes a security session for a server.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. type The connection type of the incoming connection. connP The connection as returned by <code>iowa_system_connection_open()</code>. isSecure Inform if the incoming connection is secure. <p>Return Value</p> <p>An <code>iowa_security_session_t</code> in case of success or NULL in case of error.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securitydeletesession","title":"securityDeleteSession","text":"<p>Prototype</p> <pre><code>void securityDeleteSession(iowa_context_t contextP,\niowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>securityDeleteSession()</code> closes a security session.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. securityS An <code>iowa_security_session_t</code> as returned by <code>securityClientNewSession()</code> or <code>securityServerNewSession()</code>. Should not be checked at runtime. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securityseteventcallback","title":"securitySetEventCallback","text":"<p>Prototype</p> <pre><code>void securitySetEventCallback(iowa_context_t contextP,\niowa_security_session_t securityS,\nsecurity_event_callback_t eventCb,\nvoid *userDataCb);\n</code></pre> <p>Description</p> <p><code>securitySetEventCallback()</code> sets the event callback for a security session.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. securityS An <code>iowa_security_session_t</code> as returned by <code>securityClientNewSession()</code> or <code>securityServerNewSession()</code>. Should not be checked at runtime. eventCb The event callback called when a new event occurs. userDataCb The user data pass to the event callback when called. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securityconnect","title":"securityConnect","text":"<p>Prototype</p> <pre><code>iowa_status_t securityConnect(iowa_context_t contextP,\niowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>securityConnect()</code> connects to a new connection.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. securityS An <code>iowa_security_session_t</code> as returned by <code>securityClientNewSession()</code> or <code>securityServerNewSession()</code>. Should not be checked at runtime. <p>Return Value</p> IOWA_COAP_NO_ERROR success. <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securitydisconnect","title":"securityDisconnect","text":"<p>Prototype</p> <pre><code>void securityDisconnect(iowa_context_t contextP,\niowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>securityDisconnect()</code> disconnects from a connection.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. securityS An <code>iowa_security_session_t</code> as returned by <code>securityClientNewSession()</code> or <code>securityServerNewSession()</code>. Should not be checked at runtime. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securitysend","title":"securitySend","text":"<p>Prototype</p> <pre><code>int securitySend(iowa_context_t contextP,\niowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n</code></pre> <p>Description</p> <p><code>securitySend()</code> sends a buffer on a connection. Must call the platform function <code>iowa_system_connection_send</code>.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. securityS An <code>iowa_security_session_t</code> as returned by <code>securityClientNewSession()</code> or <code>securityServerNewSession()</code>. Should not be checked at runtime. buffer The data to send. length The length of the data in bytes. <p>Return Value</p> <p>The number of bytes sent or a negative number in case of error.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securityrecv","title":"securityRecv","text":"<p>Prototype</p> <pre><code>int securityRecv(iowa_context_t contextP,\niowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n</code></pre> <p>Description</p> <p><code>securityRecv()</code> reads data from a connection. Must call the platform function <code>iowa_system_connection_recv</code>.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. securityS An <code>iowa_security_session_t</code> as returned by <code>securityClientNewSession()</code> or <code>securityServerNewSession()</code>. Should not be checked at runtime. buffer A buffer to store the received data. length The length of the buffer in bytes. <p>Return Value</p> <p>The number of received bytes or a negative number in case of error.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securitygetissecure","title":"securityGetIsSecure","text":"<p>Prototype</p> <pre><code>bool securityGetIsSecure(iowa_context_t contextP,\niowa_security_session_t securityS);\n</code></pre> <p>Description</p> <p><code>securityGetIsSecure()</code> returns if a security session is encrypted.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. securityS An <code>iowa_security_session_t</code> as returned by <code>securityClientNewSession()</code> or <code>securityServerNewSession()</code>. Should not be checked at runtime. <p>Return Value</p> <p>'true' if encrypted, 'false' otherwise.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securitygetidentity","title":"securityGetIdentity","text":"<p>Prototype</p> <pre><code>size_t securityGetIdentity(iowa_context_t contextP,\niowa_security_session_t securityS,\nuint8_t *buffer,\nsize_t length);\n</code></pre> <p>Description</p> <p><code>securityGetIdentity()</code> retrieves the identity of a secured peer. Must call the platform function <code>iowa_system_connection_get_peer_identifier</code>.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. securityS An <code>iowa_security_session_t</code> as returned by <code>securityClientNewSession()</code> or <code>securityServerNewSession()</code>. Should not be checked at runtime. buffer A buffer to store the identity. length The length of the buffer in bytes. <p>Return Value</p> <p>The length in bytes of the identity.</p> <p>Header File</p> <p>iowa_prv_security.h</p>"},{"location":"content/SecurityComponent.html#securityaddkey","title":"securityAddKey","text":"<p>Prototype</p> <pre><code>iowa_status_t securityAddKey(iowa_context_t contextP,\nconst char *uri,\niowa_security_data_t *securityDataP);\n</code></pre> <p>Description</p> <p><code>securityAddKey()</code> stores a key.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. uri The URI of the peer the key is associated to. securityDataP Data containing the key. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_500_INTERNAL_SERVER_ERROR a memory allocation failed. <p>Header File</p> <p>iowa_prv_security.h</p> <p>Notes</p> <ol> <li> <p>If IOWA is built with IOWA_SECURITY_LAYER_SUPPORT, <code>securityAddKey</code> will call the platform function <code>iowa_system_security_data</code>.</p> </li> <li> <p>If <code>iowa_system_security_data</code> has to be called, the argument securityOp must be set to IOWA_SEC_CREATE.</p> </li> </ol>"},{"location":"content/SecurityComponent.html#securityremovekey","title":"securityRemoveKey","text":"<p>Prototype</p> <pre><code>iowa_status_t securityRemoveKey(iowa_context_t contextP,\nconst char *uri);\n</code></pre> <p>Description</p> <p><code>securityRemoveKey()</code> removes the keys.</p> <p>Arguments</p> contextP An <code>iowa_context_t</code> as returned by <code>iowa_init()</code>. Not checked at runtime. uri The URI of the peer the keys are associated to. <p>Return Value</p> IOWA_COAP_NO_ERROR success. IOWA_COAP_404_NOT_FOUND the associated keys have not been found. <p>Header File</p> <p>iowa_prv_security.h</p> <p>Notes</p> <ol> <li> <p>If IOWA is built with IOWA_SECURITY_LAYER_SUPPORT, <code>securityRemoveKey</code> will call the platform function <code>iowa_system_security_data</code>.</p> </li> <li> <p>If <code>iowa_system_security_data</code> has to be called, the argument securityOp must be set to IOWA_SEC_DELETE.</p> </li> </ol>"},{"location":"content/ServerAPI.html","title":"Server Mode API Reference","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/Streamable.html","title":"Custom Object Streaming APIs","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/UtilsAPI.html","title":"Utils API Reference","text":"<p>The functions explained below are defined inside the file include/iowa_utils.h.</p>"},{"location":"content/UtilsAPI.html#data-types","title":"Data types","text":""},{"location":"content/UtilsAPI.html#iowa_list_t","title":"iowa_list_t","text":"<p>List structure used by the List APIs.</p> <pre><code>typedef struct _iowa_list_t\n{\nstruct _iowa_list_t *nextP;\n} iowa_list_t;\n</code></pre> nextP Pointer to the next element in the list."},{"location":"content/UtilsAPI.html#callbacks","title":"Callbacks","text":""},{"location":"content/UtilsAPI.html#iowa_list_node_free_callback_t","title":"iowa_list_node_free_callback_t","text":"<p>This is the list node free callback, called to free a node.</p> <pre><code>typedef void(*iowa_list_node_free_callback_t) (void *nodeP);\n</code></pre> nodeP The node to free."},{"location":"content/UtilsAPI.html#iowa_list_node_find_callback_t","title":"iowa_list_node_find_callback_t","text":"<p>This is the list node find callback, called to find a node.</p> <pre><code>typedef bool(*iowa_list_node_find_callback_t) (void *nodeP,\nvoid *criteria);\n</code></pre> nodeP The current node in the list. criteria The criteria to match."},{"location":"content/UtilsAPI.html#api","title":"API","text":""},{"location":"content/UtilsAPI.html#iowa_utils_base64_get_encoded_size","title":"iowa_utils_base64_get_encoded_size","text":"<p>Prototype</p> <p><pre><code>size_t iowa_utils_base64_get_encoded_size(size_t rawBufferLen);\n</code></pre> Description</p> <p><code>iowa_utils_base64_get_encoded_size()</code> calculates the length of a Base64 buffer based on a raw buffer represented by its length.</p> <p>Arguments</p> rawBufferLen The length of the raw buffer. <p>Return Value</p> <p>The length of the Base64 buffer.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_base64_get_decoded_size","title":"iowa_utils_base64_get_decoded_size","text":"<p>Prototype</p> <p><pre><code>size_t iowa_utils_base64_get_decoded_size(uint8_t *base64Buffer,\nsize_t base64BufferLen);\n</code></pre> Description</p> <p><code>iowa_utils_base64_get_decoded_size()</code> calculates the length of a raw buffer based on a Base64 buffer.</p> <p>Arguments</p> base64Buffer The Base64 buffer. base64BufferLen The length of the Base64 buffer. <p>Return Value</p> <p>The length of the raw buffer. If any error the length will be 0.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_base64_encode","title":"iowa_utils_base64_encode","text":"<p>Prototype</p> <pre><code>size_t iowa_utils_base64_encode(uint8_t * rawBuffer,\nsize_t rawBufferLen,\nuint8_t * base64Buffer,\nsize_t base64BufferLen);\n</code></pre> <p>Description</p> <p><code>iowa_utils_base64_encode()</code> encodes a raw buffer using Base64.</p> <p>Arguments</p> rawBuffer The raw buffer. rawBufferLen The length of the raw buffer. base64Buffer The preallocated Base64 buffer. base64BufferLen The length of the preallocated Base64 buffer. <p>Return Value</p> <p>The length of the encoded buffer. If any error the length will be 0.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_base64_decode","title":"iowa_utils_base64_decode","text":"<p>Prototype</p> <pre><code>size_t iowa_utils_base64_decode(uint8_t * base64Buffer,\nsize_t base64BufferLen,\nuint8_t * rawBuffer,\nsize_t rawBufferLen);\n</code></pre> <p>Description</p> <p><code>iowa_utils_base64_decode()</code> decodes a Base64 buffer into a raw buffer.</p> <p>Arguments</p> base64Buffer The Base64 buffer. base64BufferLen The length of the Base64 buffer. rawBuffer The preallocated raw buffer. rawBufferLen The length of the preallocated raw buffer. <p>Return Value</p> <p>The length of the decoded buffer. If any error the length will be 0.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_uri_to_sensor","title":"iowa_utils_uri_to_sensor","text":"<p>Prototype</p> <pre><code>iowa_sensor_t iowa_utils_uri_to_sensor(iowa_lwm2m_uri_t *uriP);\n</code></pre> <p>Description</p> <p><code>iowa_utils_uri_to_sensor()</code> converts an iowa_lwm2m_uri_t into an iowa_sensor_t.</p> <p>Arguments</p> uriP URI to convert. <p>Return Value</p> <p>The corresponding iowa_sensor_t or IOWA_INVALID_SENSOR_ID in case of error.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_sensor_to_uri","title":"iowa_utils_sensor_to_uri","text":"<p>Prototype</p> <pre><code>iowa_lwm2m_uri_t iowa_utils_sensor_to_uri(iowa_sensor_t id);\n</code></pre> <p>Description</p> <p><code>iowa_utils_sensor_to_uri()</code> converts an iowa_sensor_t into an iowa_lwm2m_uri_t.</p> <p>Arguments</p> <p>id :ID to convert.</p> <p>Return Value</p> <p>An iowa_lwm2m_uri_t.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_list_add","title":"iowa_utils_list_add","text":"<p>Prototype</p> <pre><code>iowa_list_t * iowa_utils_list_add(iowa_list_t *headP,\niowa_list_t *nodeP);\n</code></pre> <p>Description</p> <p><code>iowa_utils_list_add()</code> adds a node to a list.</p> <p>Arguments</p> headP Head of the current list. nodeP Node to add to the list. <p>Return Value</p> <p>The list with the new element.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_list_remove","title":"iowa_utils_list_remove","text":"<p>Prototype</p> <pre><code>iowa_list_t * iowa_utils_list_remove(iowa_list_t *headP,\niowa_list_t *nodeP);\n</code></pre> <p>Description</p> <p><code>iowa_utils_list_remove()</code> removes a node from a list.</p> <p>Arguments</p> headP Head of the current list. nodeP Node to remove from the list. <p>Return Value</p> <p>The updated list.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_list_free","title":"iowa_utils_list_free","text":"<p>Prototype</p> <pre><code>void iowa_utils_list_free(iowa_list_t *headP,\niowa_list_node_free_callback_t freeCb);\n</code></pre> <p>Description</p> <p><code>iowa_utils_list_free()</code> adds a node to a list.</p> <p>Arguments</p> headP List to free. freeCb Callback used to free the list. <p>Return Value</p> <p>None.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_list_find","title":"iowa_utils_list_find","text":"<p>Prototype</p> <pre><code>iowa_list_t * iowa_utils_list_find(iowa_list_t *headP,\niowa_list_node_find_callback_t findCb,\nvoid *criteriaP);\n</code></pre> <p>Description</p> <p><code>iowa_utils_list_find()</code> finds a node in a list.</p> <p>Arguments</p> headP List to search on. findCb Callback used to find the node in the list. criteriaP Criteria used to find the node in the list. <p>Return Value</p> <p>The node if found else NULL.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#iowa_utils_list_find_and_remove","title":"iowa_utils_list_find_and_remove","text":"<p>Prototype</p> <pre><code>iowa_list_t * iowa_utils_list_find_and_remove(iowa_list_t *headP,\niowa_list_node_find_callback_t findCb,\nvoid *criteriaP,\niowa_list_t **nodeP);\n</code></pre> <p>Description</p> <p><code>iowa_utils_list_find_and_remove()</code> finds a node in a list and removes it.</p> <p>Arguments</p> headP List to search on. findCb Callback used to find the node in the list. criteriaP Criteria used to find the node in the list. nodeP OUT. Node removed from the list. Can be nil. <p>Return Value</p> <p>The updated list.</p> <p>Header File</p> <p>iowa_utils.h</p>"},{"location":"content/UtilsAPI.html#example-linked-list-usage","title":"Example: Linked List usage","text":"<p>When declaring the linked list data structure, the first member must be a pointer. This pointer will contain the address of the next element of the list.</p> <p>Example: <pre><code>struct myData\n{\nstruct myData *nextP;   // Used by the linked list functions\nchar          *aString;\nint            anInt;\n};\n</code></pre></p> <p>The head of the list is a pointer to your data structure.</p> <p>Example: <pre><code>struct myData *listHead;\n</code></pre></p> <p>You can now add or remove elements to the list by using the functions <code>iowa_utils_list_add()</code> and <code>iowa_utils_list_remove()</code>.</p> <p>But to avoid compiler warnings or multiple cast making the code unreadable, the following macros can be used:</p> <ul> <li>IOWA_UTILS_LIST_ADD(H, N)</li> <li>IOWA_UTILS_LIST_REMOVE(H, N)</li> <li>IOWA_UTILS_LIST_FREE(H, F)</li> <li>IOWA_UTILS_LIST_FIND(H, F, C)</li> <li>IOWA_UTILS_LIST_FIND_AND_REMOVE(H, F, C, N)</li> </ul> <p>Instead of calling:</p> <pre><code>listHead = (struct myData *)iowa_utils_list_add((iowa_list_t *)listHead, (iowa_list_t *)newDataP);\n</code></pre> <p>You can use:</p> <pre><code>listHead = (struct myData *)IOWA_UTILS_LIST_ADD(listHead, newDataP);\n</code></pre>"},{"location":"content/baseline_client.html","title":"Baseline Client","text":"<p>This is a minimal LwM2M Client connecting to one LwM2M Server and featuring only the mandatory LwM2M Objects.</p> <p>The following API will be explained:</p> <ul> <li><code>iowa_init()</code></li> <li><code>iowa_close()</code></li> <li><code>iowa_client_configure()</code></li> <li><code>iowa_client_add_server()</code></li> <li><code>iowa_client_remove_server()</code></li> <li><code>iowa_step()</code></li> </ul>"},{"location":"content/baseline_client.html#usage","title":"Usage","text":"<p>To compile this sample, follow the instructions in the top-level README.</p> <p>baseline_client outputs traces in <code>stderr</code>.</p> <p>At launch, baseline_client displays the URI of the LwM2M Server it connects to, and the Endpoint Name it uses.</p> <pre><code>$ ./Evaluation_SDK_Samples/01-baseline_client/baseline_client\nThis a simple LwM2M Client.\n\nRegistering to the LwM2M server at \"coap://iowa-server.ioterop.com\" under the Endpoint name \"IOWA_sample_client_8323329\".\nUse Ctrl-C to stop.\n</code></pre> <p>It then registers to the LwM2M Server. You should see it in the \"Clients List\" of the Server:</p> <p></p> <p>We are using IoTerop's CONNECTicut testing server. The procedures are similar using other servers.</p> <p>Two LwM2M Objects are visible to the LwM2M Server: the Server Object (ID: 1) configuring parameters associated to the LwM2M Server, and the Device Object (ID: 3) describing the device.</p> <p>From here, you can perform Discover, Read, and Write-Attributes operations, or set Observations on the Objects, Object Instances, and Resources. You can perform Write operations on some of the Server Object's Resources.</p> <p>You can also perform an Execute operation on the Reboot Resource of the Device Object (URI: /3/0/4). Note that will make baseline_client exit.</p> <p>After two minutes, baseline_client unregisters from the LwM2M Server.</p>"},{"location":"content/baseline_client.html#breakdown","title":"Breakdown","text":""},{"location":"content/baseline_client.html#client-pseudocode","title":"Client Pseudocode","text":"<p>This is the pseudocode of Client main function:</p> <pre><code>main()\n{\n// Initialization\niowa_init();\n\n// LwM2M Client configuration\niowa_client_configure(CLIENT_NAME);\n\n// LwM2M Server declaration\niowa_client_add_server(SERVER_SHORT_ID, SERVER_URI, SERVER_LIFETIME);\n\n// \"Main loop\"\niowa_step(120);\n\n// Cleanup\niowa_client_remove_server(SERVER_SHORT_ID);\niowa_close();\n}\n</code></pre>"},{"location":"content/baseline_client.html#initialization","title":"Initialization","text":"<p>IOWA does not use any global variables. All its internal data are stored in a context. Thus, the first step of  the LwM2M Client application is to create a new IOWA context by calling the API <code>iowa_init()</code>.</p> <pre><code>iowa_context_t iowaH;\n\niowaH = iowa_init(NULL);\n</code></pre> <p>The argument to <code>iowa_init()</code> is a user defined pointer passed to the system abstraction function. For more information, look at the abstraction_layer folder.</p>"},{"location":"content/baseline_client.html#lwm2m-client-configuration","title":"LwM2M Client Configuration","text":"<p>The second step is to configure our LwM2M Client with <code>iowa_client_configure()</code>.</p> <pre><code>char endpoint_name[64];\niowa_device_info_t devInfo;\niowa_status_t result;\n\nprv_generate_unique_name(endpoint_name);\n\nmemset(&amp;devInfo, 0, sizeof(iowa_device_info_t));\ndevInfo.manufacturer = \"https://ioterop.com\";\ndevInfo.deviceType = \"IOWA sample from https://github.com/IOTEROP/IOWA\";\ndevInfo.modelNumber = \"1-simple_client\";\n\nresult = iowa_client_configure(iowaH, endpoint_name, &amp;devInfo, NULL);\n</code></pre> <p>The first argument is the IOWA context created in the previous step.</p> <p>The second argument is the LwM2M Client endpoint name. As this sample does not use security, the LwM2M Server relies only on this endpoint name to identify the LwM2M Client. In this sample, the function <code>prv_generate_unique_name()</code> generates such a unique name from the computer ID on Linux or from the \"C:\" volume serial number on Windows.</p> <p>The third argument may contain the values of the resources exposed by the Client in its LwM2M Device Object (ID: 3). This argument is optional. If this argument is not present or if some of its members are not set, the matching Resources will not be presented by the Client to the LwM2M Server.</p> <p>The last argument is an optional event callback explained in another sample.</p>"},{"location":"content/baseline_client.html#lwm2m-server-declaration","title":"LwM2M Server Declaration","text":"<p>Finally, to configure a LwM2M Server on the Client, the API <code>iowa_client_add_server()</code> has to be called.</p> <pre><code>#define SERVER_SHORT_ID 1234\n#define SERVER_LIFETIME   50\n#define SERVER_URI      \"coap://iowa-server.ioterop.com\"\n\nresult = iowa_client_add_server(iowaH, SERVER_SHORT_ID, SERVER_URI, SERVER_LIFETIME, 0, IOWA_SEC_NONE);\n</code></pre> <p>The first argument is the IOWA context created in the first step.</p> <p>The second argument is a numeric identifier of the LwM2M Server. This identifier is named \"Short Server ID\" in the LwM2M protocol. Other IOWA APIs use this identifier to reference the LwM2M Server.</p> <p>The third argument is the LwM2M Server URI. By default, the baseline Client has been configured to use IoTerop's CONNECTicut testing server. You can change the URI to point to other LwM2M Servers like the Eclipse's Leshan test server sandbox, or a locally deployed LwM2M Server.</p> <p>The fourth argument is the registration lifetime in seconds. The LwM2M lifetime is the validity period of a LwM2M Client registration to the LwM2M Server. When this lifetime expires, the Server considers the Client as unreachable. Regularly, the Client sends Registration Update messages to the Server to renew its registration validity period.</p> <p>The fifth argument is composed of flags enabling advanced features which are explained in other samples.</p> <p>The last argument is the security mode used to communicate with the LwM2M Server. See the security sample for more details.</p>"},{"location":"content/baseline_client.html#main-loop","title":"\"Main Loop\"","text":"<p>IOWA operates only when the function <code>iowa_step()</code> is called.</p> <p><code>iowa_step()</code> manages the Finite State Machine of the LwM2M and CoAP stacks.</p> <p>On first loop, IOWA will create a new socket and use it to transmit the registration message.</p> <pre><code>result = iowa_step(iowaH, 120);\n</code></pre> <p>As always, the first argument is the IOWA context created in the first step.</p> <p>The second argument is the time allowed to IOWA to run. Until this time expires, or an error occurs, the <code>iowa_step()</code> function does not return. Here we let IOWA run for two minutes before stopping the Client. The other samples have more realistic usage of this argument.</p>"},{"location":"content/baseline_client.html#cleanup","title":"Cleanup","text":"<p>When the Client has to be closed, the IOWA context must be freed to prevent memory leaks.</p> <pre><code>iowa_client_remove_server(iowaH, SERVER_SHORT_ID);\niowa_close(iowaH);\n</code></pre> <p>First, the Server can be removed with <code>iowa_client_remove_server()</code>. Calling this API will automatically send a deregistration message to the Server even if the IOWA step is not running. Here we use the LwM2M Server identifier passed in <code>iowa_client_add_server()</code>.</p> <p>Finally, the IOWA context can be closed with <code>iowa_close()</code>.</p>"},{"location":"content/baseline_client.html#next-steps","title":"Next Steps","text":"<p>To fulfill real-world needs, a LwM2M Client needs application LwM2M Objects. You can look at the IPSO_client sample to learn how to add IPSO sensors, or at the custom_object_baseline sample to learn how to add a custom LwM2M Object to your Client.</p>"},{"location":"content/baseline_server.html","title":"Baseline Server","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/bearer_selection_client.html","title":"Bearer Selection Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/bootstrap_client.html","title":"Bootstrap Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/context_storage_client.html","title":"Context Storage Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/custom_object_baseline.html","title":"Custom Object Baseline","text":"<p>This is the baseline_client featuring an additional LwM2M Object with the following definition:</p> <p>ID: 3200</p> <p>Single instance</p> <p>Resources:</p> ID Type Operations Multiple Description 5500 Boolean R Single A read-only boolean value 5750 String R/W Single A writable string 5503 Integer R/W Single A writable integer value <p>In the LightweightM2M protocol, the Objects and the Resources are only characterized by their ID and there is no metadata exchanges between the LwM2M Clients and the LwM2M Server. This means that the LwM2M Server must know the layout of the Object and the characteristics of their Resources. (Note that the LwM2M Server can perform a Discovery operation on the Object that will return the list of instantiated Resources in each Object Instance.)</p> <p>When designing a custom Object for your application, you must communicate your Object definition to the LwM2M Server out-of-band. One way to achieve this is by registering your Object to the OMNA LwM2M Repository.</p> <p>In this sample we reuse a registered Object: Digital Input (ID: 3200) to make sure it is known by the LwM2M Server we are testing with. In a real-world application needing this specific IPSO Object, you can use the <code>iowa_client_IPSO_add_sensor()</code> API.</p> <p>The following API will be explained:</p> <ul> <li><code>iowa_client_add_custom_object()</code></li> <li><code>iowa_client_remove_custom_object()</code></li> </ul>"},{"location":"content/custom_object_baseline.html#usage","title":"Usage","text":"<p>The usage is the same as the Baseline Client sample.</p> <p>When registered to the LwM2M Server, you will notice that the custom_object_baseline_client features the additional LwM2M Object described above:</p> <p></p> <p>The Resource names displayed by the LwM2M Server are the names registered for the Object with this specific ID at the OMNA LwM2M Repository. As explained, we are using this Object ID to make sure it is known by the LwM2M Server. Of course, the Resources do not reflect any real process.</p> <p>From here, you can test the LwM2M operations on the Resources. You will notice that you can not write the \"Digital Input State\" Resource (URI: /3200/0/5500).</p> <p>If you set an Observation on the Object or the Object Instance, when you write a new value for the \"Digital Input Debounce\" Resource (URI: /3200/0/5503) or the \"Application Type\" Resource (URI: /3200/0/5750), you will receive a notification.</p> <p>After two minutes, custom_object_baseline_client unregisters from the LwM2M Server.</p>"},{"location":"content/custom_object_baseline.html#breakdown","title":"Breakdown","text":""},{"location":"content/custom_object_baseline.html#client-pseudocode","title":"Client Pseudocode","text":"<p>This is the pseudocode of Client main function:</p> <pre><code>main()\n{\n// Initialization\niowa_init();\n\n// LwM2M Client configuration\niowa_client_configure(CLIENT_NAME);\n\n// Custom Object addition\niowa_client_add_custom_object(OBJECT_ID, resourceDescription, dataCallback);\n\n// LwM2M Server declaration\niowa_client_add_server(SERVER_SHORT_ID, SERVER_URI, SERVER_LIFETIME);\n\n// \"Main loop\"\niowa_step(120s)\n\n// Cleanup\niowa_client_remove_custom_object(OBJECT_ID);\niowa_client_IPSO_remove_sensor();\niowa_close();\n}\n</code></pre> <p>and the pseudocode of the Object data callback:</p> <pre><code>dataCallback(operation, targetedResources)\n{\nfor each targetedResources\nif operation is READ\nthen targetedResources.value = resource value\nif operation is WRITE\nthen resource value = targetedResources.value\n}\n</code></pre>"},{"location":"content/custom_object_baseline.html#data-structures","title":"Data Structures","text":"<p>This sample introduces two important data structures of IOWA.</p>"},{"location":"content/custom_object_baseline.html#iowa_lwm2m_resource_desc_t","title":"iowa_lwm2m_resource_desc_t","text":"<p>This data structure is used to describe an LwM2M Object Resource.</p> <pre><code>typedef struct\n{\nuint16_t               id;\niowa_lwm2m_data_type_t type;\nuint8_t                operations;\nuint8_t                flags;\n} iowa_lwm2m_resource_desc_t;\n</code></pre> <p><code>id</code> is the numerical ID of the Resource. This ID must be unique among the Object Resource IDs.</p> <p><code>type</code> is the data type of the Resource value.</p> <p><code>operations</code> is the list of LwM2M operations allowed on the resources. The only allowed combinations are: \"IOWA_DM_READ\", \"IOWA_DM_WRITE\", \"IOWA_DM_READ | IOWA_DM_WRITE\", and \"IOWA_DM_EXECUTE\".</p> <p><code>flags</code> will be explained in other samples.</p>"},{"location":"content/custom_object_baseline.html#iowa_lwm2m_data_t","title":"iowa_lwm2m_data_t","text":"<p>This data structure is used to convey the Resource values between IOWA and the Object implementation.</p> <pre><code>typedef struct\n{\nuint16_t objectID;\nuint16_t instanceID;\nuint16_t resourceID;\nuint16_t resInstanceID;\niowa_lwm2m_data_type_t type;\nunion\n{\nbool    asBoolean;\nint64_t asInteger;\ndouble  asFloat;\nstruct\n{\nsize_t   length;\nuint8_t *buffer;\n} asBuffer;\nstruct\n{\nsize_t   totalSize;\nuint32_t details;\nuint8_t *buffer;\n} asBlock;\niowa_lwm2m_object_link_t asObjLink;\n} value;\nint32_t timestamp;\n} iowa_lwm2m_data_t;\n</code></pre> <p><code>objectID</code>, <code>instanceID</code>, and <code>resourceID</code> contain the URI of the Resource. Some Resources may have multiple instances. In this case <code>resInstanceID</code> is used, otherwise (like in this sample), it is set to IOWA_LWM2M_ID_ALL.</p> <p><code>type</code> contains the data type of the Resource value.</p> <p><code>value</code> contains the value of the Resource. It is a union depending on <code>type</code>:</p> <ul> <li> <p><code>value.asBoolean</code> when <code>type</code> is IOWA_LWM2M_TYPE_BOOLEAN.</p> </li> <li> <p><code>value.asInteger</code> when <code>type</code> is IOWA_LWM2M_TYPE_INTEGER, IOWA_LWM2M_TYPE_TIME or IOWA_LWM2M_TYPE_UNSIGNED_INTEGER.</p> </li> <li> <p><code>value.asFloat</code> when <code>type</code> is IOWA_LWM2M_TYPE_FLOAT.</p> </li> <li> <p><code>value.asBuffer</code> when <code>type</code> is IOWA_LWM2M_TYPE_CORE_LINK, IOWA_LWM2M_TYPE_STRING, IOWA_LWM2M_TYPE_OPAQUE or IOWA_LWM2M_TYPE_UNDEFINED.</p> </li> <li> <p><code>value.asObjLink</code> when <code>type</code> is IOWA_LWM2M_TYPE_OBJECT_LINK.</p> </li> <li> <p><code>value.asBlock</code> is explained in another sample.</p> </li> </ul> <p><code>timestamp</code> is explained in another sample.</p>"},{"location":"content/custom_object_baseline.html#main-function","title":"Main Function","text":""},{"location":"content/custom_object_baseline.html#initialization","title":"Initialization","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_baseline.html#lwm2m-client-configuration","title":"LwM2M Client Configuration","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_baseline.html#custom-object-addition","title":"Custom Object Addition","text":"<p>Here we add a custom Object to the LwM2M Client.</p> <pre><code>sample_object_values_t objectValues;\niowa_lwm2m_resource_desc_t sample_object_resources[SAMPLE_RES_COUNT] =\n{\n{5500, IOWA_LWM2M_TYPE_BOOLEAN, IOWA_OPERATION_READ,                        IOWA_RESOURCE_FLAG_NONE},\n{5750, IOWA_LWM2M_TYPE_STRING,  IOWA_OPERATION_READ | IOWA_OPERATION_WRITE, IOWA_RESOURCE_FLAG_NONE},\n{5503, IOWA_LWM2M_TYPE_INTEGER, IOWA_OPERATION_READ | IOWA_OPERATION_WRITE, IOWA_RESOURCE_FLAG_NONE}\n}\n\nobjectValues.booleanValue = true;\nobjectValues.integerValue = 10;\nobjectValues.stringValue = NULL;\n\nresult = iowa_client_add_custom_object(iowaH,\nSAMPLE_OBJECT_ID,\n0, NULL,\nSAMPLE_RES_COUNT, sample_object_resources,\nsample_object_dataCallback,\nNULL,\nNULL,\n&amp;objectValues);\n</code></pre> <p>As always, the first argument is the IOWA context created in the Initialization step.</p> <p>The second argument is the Object numerical ID. This ID must be unique.</p> <p>The third argument is the number of Instances this Object has, the fourth argument is the list of the IDs of these Instances. This parameter is useful only for multiple-instance Objects. As we do not provide a list of Instances and the instance callback (the eighth parameter) is nil, IOWA consider this Object to be a single-instance one. See the sample custom_object_multiple_instances for more details.</p> <p>The fifth and sixth arguments are the Object's Resources definition. This is an array of <code>iowa_lwm2m_resource_desc_t</code>.</p> <p>The seventh argument is the callback IOWA will call when an operation is to be performed on the Object's Resources. It is explained in more details below.</p> <p>The eighth and ninth arguments are callbacks called by IOWA to manipulate the Object. There are explained in other samples.</p> <p>The last argument is a user defined pointer passed as argument to the Object callbacks. In this example, it is a structure holding the Object values.</p>"},{"location":"content/custom_object_baseline.html#lwm2m-server-declaration","title":"LwM2M Server Declaration","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_baseline.html#main-loop","title":"\"Main Loop\"","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_baseline.html#cleanup","title":"Cleanup","text":"<p>This step is the same as in the Baseline Client sample with one additional function call:</p> <pre><code>iowa_client_remove_custom_object(iowaH, SAMPLE_OBJECT_ID);\n</code></pre> <p>As always, the first argument is the IOWA context created in the Initialization step.</p> <p>The second argument is the same ID of the Object as in the call to <code>iowa_client_add_custom_object()</code>.</p>"},{"location":"content/custom_object_baseline.html#object-data-callback","title":"Object Data Callback","text":"<p>when a LwM2M Server perform an operation on our Object, IOWA takes care of all the necessary checks (Resource existence, operation rights, correct data types, etc...). The Data Callback deals only with the actual Resource values.</p> <pre><code>iowa_status_t sample_object_dataCallback(iowa_dm_operation_t operation,\niowa_lwm2m_data_t *dataP,\nsize_t numData,\nvoid *userData,\niowa_context_t iowaH)\n{\n</code></pre> <p>The parameters to the callback are the operation (IOWA_DM_READ, IOWA_DM_WRITE, IOWA_DM_EXECUTE, or IOWA_DM_FREE), an array of <code>iowa_lwm2m_data_t</code>, the user data passed as parameter to <code>iowa_client_add_custom_object()</code>, and the IOWA context.</p> <p>The first thing we do is retrieving the actual values we stored in the user data:</p> <pre><code>    sample_object_values_t *objectValuesP;\n\n// Retrieve our Object values\nobjectValuesP = (sample_object_values_t *)userData;\n</code></pre> <p>Then we iterate over all the targeted Resources:</p> <pre><code>    size_t i;\n\nfor (i = 0; i &lt; numData; i++)\n{\nswitch (dataP[i].resourceID)\n{\n</code></pre> <p>We do not check <code>dataP[i].objectID</code> and <code>dataP[i].instanceID</code> as the callback is used only by our Object. These need to be considered only when the Object has several instances or if the callback is shared among several custom Objects.</p> <pre><code>case 5503:\nif (operation == IOWA_DM_READ)\n{\ndataP[i].value.asInteger = objectValuesP-&gt;integerValue;\n}\nelse if (operation == IOWA_DM_WRITE)\n{\nobjectValuesP-&gt;integerValue = dataP[i].value.asInteger;\n}\nbreak;\n</code></pre> <p>For each Resource, if the operation is IOWA_DM_READ, we store the Resource value in the <code>iowa_lwm2m_data_t</code>. If the operation is IOWA_DM_WRITE, we update the Resource value with the value from the <code>iowa_lwm2m_data_t</code>.</p>"},{"location":"content/custom_object_baseline.html#the-iowa_dm_free-operation","title":"The IOWA_DM_FREE Operation","text":"<p>To handle the IOWA_DM_READ case, the callback may allocate memory. For instance the Resource could be the content of a log file. When IOWA has no longer the use of a resource value, it calls the callback with the operation IOWA_DM_FREE.</p> <p>This is illustrated in the sample by the Resource holding a string value (ID: 5750):</p> <pre><code>case 5750:\nif (operation == IOWA_DM_READ)\n{\nif (objectValuesP-&gt;stringValue != NULL)\n{\n// For the sake of the example, we return a copy of our string value.\ndataP[i].value.asBuffer.length = strlen(objectValuesP-&gt;stringValue);\ndataP[i].value.asBuffer.buffer = strdup(objectValuesP-&gt;stringValue);\nif (dataP[i].value.asBuffer.buffer == NULL)\n{\nreturn IOWA_COAP_500_INTERNAL_SERVER_ERROR;\n}\n}\nelse\n{\ndataP[i].value.asBuffer.length = 0;\ndataP[i].value.asBuffer.buffer = NULL;\n}\n}\nelse if (operation == IOWA_DM_WRITE)\n{\nfree(objectValuesP-&gt;stringValue);\nobjectValuesP-&gt;stringValue = (char *)malloc(dataP[i].value.asBuffer.length + 1);\nif (objectValuesP-&gt;stringValue == NULL)\n{\nreturn IOWA_COAP_500_INTERNAL_SERVER_ERROR;\n}\nmemcpy(objectValuesP-&gt;stringValue, dataP[i].value.asBuffer.buffer, dataP[i].value.asBuffer.length);\nobjectValuesP-&gt;stringValue[dataP[i].value.asBuffer.length] = 0;\n}\nelse if (operation == IOWA_DM_FREE)\n{\n// IOWA has no longer use of the string value. We can free it.\nfree(dataP[i].value.asBuffer.buffer);\n}\nbreak;\n</code></pre> <p>When the operation is IOWA_DM_READ (and there is a value to return), we allocate a new string and duplicate the value. We pass the pointer to this new string in the <code>iowa_lwm2m_data_t</code>.</p> <p>Then, when the callback is called with IOWA_DM_FREE, we can free the duplicate string as the <code>iowa_lwm2m_data_t</code> still holds the pointer to it.</p> <p>When handling the IOWA_DM_READ case, it is also possible for the callback to just return the pointer to our string value. IOWA will not modify it. In this case, there is nothing to do when the operation is IOWA_DM_FREE.</p>"},{"location":"content/custom_object_baseline.html#next-steps","title":"Next Steps","text":"<p>The sample illustrates only the baseline of the creation of a custom LwM2M Object. The other custom object samples dive into more useful concepts.</p>"},{"location":"content/custom_object_dynamic.html","title":"Dynamic Custom Object","text":"<p>This is the Custom Object Baseline Client with dynamic Resource values. The Client still features the same custom LwM2M Object:</p> <p>ID: 3200</p> <p>Single instance</p> <p>Resources:</p> ID Type Operations Multiple Description 5500 Boolean R Single A read-only boolean value 5750 String R/W Single A writable string 5503 Integer R/W Single A writable integer value <p>However, the values of the Boolean Resource (ID: 5500) and Integer Resource (ID: 5503) will change during the execution.</p> <p>The following API will be explained:</p> <ul> <li><code>iowa_client_notification_lock()</code></li> <li><code>iowa_client_object_resource_changed()</code></li> </ul>"},{"location":"content/custom_object_dynamic.html#usage","title":"Usage","text":"<p>The usage is the same as the Custom Object Baseline Client sample.</p> <p>If you set an Observation on the Object or the Object Instance, you will notice that the values of the Boolean Resource (ID: 5500) and Integer Resource (ID: 5503) are updated:</p> <p></p> <p>After two minutes, custom_object_dynamic_client unregisters from the LwM2M Server.</p>"},{"location":"content/custom_object_dynamic.html#breakdown","title":"Breakdown","text":""},{"location":"content/custom_object_dynamic.html#client-pseudocode","title":"Client Pseudocode","text":"<p>This is the pseudocode of Client main function:</p> <pre><code>main()\n{\n// Initialization\niowa_init();\n\n// LwM2M Client configuration\niowa_client_configure(CLIENT_NAME);\n\n// Custom Object addition\niowa_client_add_custom_object(OBJECT_ID, resourceDescription, dataCallback);\n\n// LwM2M Server declaration\niowa_client_add_server(SERVER_SHORT_ID, SERVER_URI, SERVER_LIFETIME);\n\n// \"Main loop\"\nfor (120s)\n{\niowa_step(3);\nInvert Boolean value\nIncrement Integer value\niowa_client_notification_lock(true);\niowa_client_object_resource_changed(BOOLEAN_RESOURCE_ID);\niowa_client_object_resource_changed(INTEGER_RESOURCE_ID);\niowa_client_notification_lock(false);\n}\n\n// Cleanup\niowa_client_remove_custom_object(OBJECT_ID);\niowa_client_IPSO_remove_sensor();\niowa_close();\n}\n</code></pre> <p>and the pseudocode of the Object data callback:</p> <pre><code>dataCallback(operation, targetedResources)\n{\nfor each targetedResources\nif operation is READ\nthen targetedResources.value = resource value\nif operation is WRITE\nthen resource value = targetedResources.value\n}\n</code></pre>"},{"location":"content/custom_object_dynamic.html#main-function","title":"Main Function","text":""},{"location":"content/custom_object_dynamic.html#initialization","title":"Initialization","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_dynamic.html#lwm2m-client-configuration","title":"LwM2M Client Configuration","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_dynamic.html#custom-object-addition","title":"Custom Object Addition","text":"<p>This step is the same as in the Custom Object Baseline Client sample.</p>"},{"location":"content/custom_object_dynamic.html#lwm2m-server-declaration","title":"LwM2M Server Declaration","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_dynamic.html#main-loop","title":"\"Main Loop\"","text":"<p>The Custom Object Baseline Client sample was letting IOWA run for two minutes before exiting. Here, during these two minutes, we let IOWA run for three seconds then we update the boolean and integer values.</p> <pre><code>int i;\n\nfor (i = 0; i &lt; 40 &amp;&amp; result == IOWA_COAP_NO_ERROR; i++)\n{\nresult = iowa_step(iowaH, 3);\n\nobjectValues.booleanValue = !objectValues.booleanValue;\nobjectValues.integerValue = objectValues.integerValue + 1;\n\niowa_client_notification_lock(iowaH, true);\n\niowa_client_object_resource_changed(iowaH, SAMPLE_OBJECT_ID, 0, SAMPLE_OBJECT_BOOLEAN_RES_ID);\niowa_client_object_resource_changed(iowaH, SAMPLE_OBJECT_ID, 0, SAMPLE_OBJECT_INTEGER_RES_ID);\n\niowa_client_notification_lock(iowaH, false);\n}\n</code></pre> <p>The call to <code>iowa_step()</code> is the same as in the Baseline Client sample with a different time value.</p> <p>We invert the boolean and increase the integer in our structure holding the Object values.</p> <p>The calls to <code>iowa_client_object_resource_changed()</code> inform IOWA that some resource values have changed. As always, the first argument is the IOWA context created in the Initialization step. The second, third, and fourth arguments are the Object ID, Instance ID, and Resource ID of the resource which value has changed. Here we inform IOWA that the values of Resources \"/3200/5500\" and \"/3200/0/5503\" has changed.</p> <p>If these Resources are under observation, either directly or because the Object or Object Instance are under observation, IOWA will first call the Object data callback to retrieve the values. Then IOWA will send a notification.</p> <p>Here we are calling <code>iowa_client_object_resource_changed()</code> twice. To prevent the generation of two separate notifications in the case the Object or Object Instance are under observation, we call <code>iowa_client_notification_lock()</code>.</p> <p>When <code>iowa_client_notification_lock()</code> is called with the second argument set to <code>true</code>, IOWA stops sending notifications (or Registration Update messages) until <code>iowa_client_notification_lock()</code> is called with the second argument set to <code>false</code>.</p>"},{"location":"content/custom_object_dynamic.html#cleanup","title":"Cleanup","text":"<p>This step is the same as in the Custom Object Baseline Client sample.</p>"},{"location":"content/custom_object_dynamic.html#object-data-callback","title":"Object Data Callback","text":"<p>The Object data callback is the same as in the Custom Object Baseline Client sample.</p>"},{"location":"content/custom_object_dynamic.html#next-steps","title":"Next Steps","text":"<p>The sample illustrates how to handle changes of the values of a custom LwM2M Object. The other custom object samples explain how to manage multiple instances of the custom LwM2M Object, or Resources with multiple Resource Instances.</p>"},{"location":"content/custom_object_multiple_instances.html","title":"Multiple Instances Custom Object","text":"<p>This is the Custom Object Baseline Client featuring multiple instances of the same custom LwM2M Object:</p> <p>ID: 3200</p> <p>Multiple instances</p> <p>Resources:</p> ID Type Operations Multiple Description 5500 Boolean R Single A read-only boolean value 5750 String R/W Single A writable string 5503 Integer R/W Single A writable integer value <p>The following API will be explained:</p> <ul> <li><code>iowa_client_object_instance_changed()</code></li> </ul>"},{"location":"content/custom_object_multiple_instances.html#usage","title":"Usage","text":"<p>The usage is the same as the Custom Object Baseline Client sample.</p> <p>When registered to the LwM2M Server, you will notice that the custom_object_multiple_instances features two instances of the additional LwM2M Object described above:</p> <p></p> <p>After one minute, a third instance will appear:</p> <p></p> <p>Then, after thirty seconds, the first instance will disappear.</p> <p>After two minutes, custom_object_multiple_instances unregisters from the LwM2M Server.</p>"},{"location":"content/custom_object_multiple_instances.html#breakdown","title":"Breakdown","text":""},{"location":"content/custom_object_multiple_instances.html#client-pseudocode","title":"Client Pseudocode","text":"<p>This is the pseudocode of Client main function:</p> <pre><code>main()\n{\n// Initialization\niowa_init();\n\n// LwM2M Client configuration\niowa_client_configure(CLIENT_NAME);\n\n// Custom Object addition\niowa_client_add_custom_object(OBJECT_ID, resourceDescription, instanceIDs, dataCallback);\n\n// LwM2M Server declaration\niowa_client_add_server(SERVER_SHORT_ID, SERVER_URI, SERVER_LIFETIME);\n\n// \"Main loop\"\niowa_step(60s)\n\n// Declare third instance\niowa_client_object_instance_changed(OBJECT_ID, 5, CREATE);\n\niowa_step(30s)\n\n// Declare third instance\niowa_client_object_instance_changed(OBJECT_ID, 0, DELETE);\n\niowa_step(30s)\n\n// Cleanup\niowa_client_remove_custom_object(OBJECT_ID);\niowa_client_IPSO_remove_sensor();\niowa_close();\n}\n</code></pre> <p>and the pseudocode of the Object data callback:</p> <pre><code>dataCallback(operation, targetedResources)\n{\nfor each targetedResources\nfind matching instance\nif operation is READ\nthen targetedResources.value = instance/resource value\nif operation is WRITE\nthen instance/resource value = targetedResources.value\n}\n</code></pre>"},{"location":"content/custom_object_multiple_instances.html#main-function","title":"Main Function","text":""},{"location":"content/custom_object_multiple_instances.html#initialization","title":"Initialization","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_multiple_instances.html#lwm2m-client-configuration","title":"LwM2M Client Configuration","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_multiple_instances.html#custom-object-addition","title":"Custom Object Addition","text":"<p>Here we add a custom Object to the LwM2M Client.</p> <pre><code>sample_object_values_t objectValues;\niowa_lwm2m_resource_desc_t sample_object_resources[SAMPLE_RES_COUNT] =\n{\n{5500, IOWA_LWM2M_TYPE_BOOLEAN, IOWA_OPERATION_READ,                        IOWA_RESOURCE_FLAG_NONE},\n{5750, IOWA_LWM2M_TYPE_STRING,  IOWA_OPERATION_READ | IOWA_OPERATION_WRITE, IOWA_RESOURCE_FLAG_NONE},\n{5503, IOWA_LWM2M_TYPE_INTEGER, IOWA_OPERATION_READ | IOWA_OPERATION_WRITE, IOWA_RESOURCE_FLAG_NONE}\n}\nsample_instance_values_t instanceValues[3];\nuint16_t instanceIds[2];\n\ninstanceValues[0].id = 0;   // ID of the first instance\ninstanceValues[0].booleanValue = true;\ninstanceValues[0].integerValue = 10;\ninstanceValues[0].stringValue = strdup(\"First instance\");\n\ninstanceValues[1].id = 3;   // ID of the first instance\ninstanceValues[1].booleanValue = false;\ninstanceValues[1].integerValue = 34;\ninstanceValues[1].stringValue = strdup(\"Second instance\");\n\ninstanceValues[2].id = 5;   // ID of the first instance\ninstanceValues[2].booleanValue = true;\ninstanceValues[2].integerValue = 256;\ninstanceValues[2].stringValue = strdup(\"Third instance\");\n\n\ninstanceIds[0] = instanceValues[0].id;\ninstanceIds[1] = instanceValues[1].id;\n\nresult = iowa_client_add_custom_object(iowaH,\nSAMPLE_OBJECT_ID,\n2, instanceIds,\nSAMPLE_RES_COUNT, sample_object_resources,\nsample_object_dataCallback,\nNULL,\nNULL,\n&amp;instanceValues);\n</code></pre> <p>The arguments to <code>iowa_client_add_custom_object()</code> are the same as in the Custom Object Baseline Client sample, except for the third and fourth ones.</p> <p>The third argument is the number of Instances this Object has, the fourth argument is the list of the IDs of these Instances. Note that the instance IDs do not need to match their index. This is why we have an <code>id</code> field in the sample_instance_values_t holding our values:</p> <pre><code>typedef struct\n{\nuint16_t id;\nbool  booleanValue;\nint   integerValue;\nchar *stringValue;\n} sample_instance_values_t;\n</code></pre>"},{"location":"content/custom_object_multiple_instances.html#lwm2m-server-declaration","title":"LwM2M Server Declaration","text":"<p>This step is the same as in the Baseline Client sample.</p>"},{"location":"content/custom_object_multiple_instances.html#main-loop","title":"\"Main Loop\"","text":"<p>Here after one minute we declare the presence of a third instance of the custom object:</p> <pre><code>// Declare the third instance.\nresult = iowa_client_object_instance_changed(iowaH, SAMPLE_OBJECT_ID, instanceValues[2].id, IOWA_DM_CREATE);\n</code></pre> <p>then we remove the first instance:</p> <pre><code>// Remove the first instance.\nresult = iowa_client_object_instance_changed(iowaH, SAMPLE_OBJECT_ID, instanceValues[0].id, IOWA_DM_DELETE);\n</code></pre> <p>As always, the first argument to <code>iowa_client_object_instance_changed()</code> is the IOWA context created in the Initialization step.</p> <p>The second argument is the same ID of the Object as in the call to <code>iowa_client_add_custom_object()</code>.</p> <p>The fourth argument is the ID of the instance that is modified.</p> <p>The last argument is the nature of the modification:</p> <ul> <li>IOWA_DM_CREATE if the instance was created.</li> <li>IOWA_DM_DELETE if the instance was deleted.</li> </ul> <p>Note that this API only inform IOWA of the addition or removal of an instance. It does not invoke any callback of the custom object. It is the caller responsibility to ensure that the necessary data are created or freed. In this sample, we created in advance an array of three <code>sample_instance_values_t</code> to hold the data.</p>"},{"location":"content/custom_object_multiple_instances.html#cleanup","title":"Cleanup","text":"<p>This step is the same as in the Custom Object Baseline Client.</p>"},{"location":"content/custom_object_multiple_instances.html#object-data-callback","title":"Object Data Callback","text":"<p>This callback is very similar to the one in the Custom Object Baseline Client. The only difference is that we check  <code>dataP[i].instanceID</code> to find the matching <code>sample_instance_values_t</code> :</p> <pre><code>if (i == 0\n|| dataP[i].instanceID != dataP[i - 1].instanceID)\n{\ninstanceIndex = 0;\n\nwhile (instanceValues[instanceIndex].id != dataP[i].instanceID)\n{\ninstanceIndex++;\n// We only declared three instances so this should not happen\nif (instanceIndex &gt;= 3)\n{\nreturn IOWA_COAP_404_NOT_FOUND;\n}\n}\n}\n</code></pre>"},{"location":"content/custom_object_multiple_resource_instances.html","title":"Multiple Resource Custom Object","text":"<p>This is a very simple LwM2M Client featuring a custom LwM2M Object with a multiple Resource.</p>"},{"location":"content/device_info_client.html","title":"Device Info Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/fw_coap_block_client.html","title":"Firmware Update Client with CoAP Block-Wise Transfer","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/fw_coap_download_client.html","title":"Firmware Update Client with CoAP Download","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/fw_update_pull_client.html","title":"Firmware Update Client \"Pull\" Method","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/fw_update_push_client.html","title":"Firmware Update Client \"Push\" Method","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/legacy.html","title":"Legacy Samples","text":"<p>These are more complex sample applications that came with previous versions of the IOWA SDK:</p> client A sample LwM2M Client using IOWA. This client features two IPSO Objects. client_1_1 A sample LwM2M 1.1 Client using IOWA that communicates over TCP. This client features two IPSO Objects. When values are updated, the client performs a data push operation with the IPSO Voltage Object values. server A sample LwM2M Server using IOWA. This server listens for client registrations on UDP ports 5683 and 5684 (for DTLS connections). When a LwM2M Client registers, the Server reads the Device Object of the Client and, if possible, sets observations on the IPSO Temperature Object Instances. server_1_1 A sample LwM2M 1.1 Server using IOWA. This server listens for client registrations on TCP ports 5683 and 5684 (for TLS connections). When a LwM2M Client registers, the Server makes a Read-Composite on the Device and Server Objects of the Client and, if possible, sets observations on the IPSO Temperature Object Instances. custom_object_client A sample LwM2M Client using IOWA. This client implements a custom LwM2M Object. fw_update_client A sample LwM2M Client using IOWA with (simulated) Firmware Update capability. bootstrap_client A sample LwM2M Client using IOWA. This client is configured with only a LwM2M Bootstrap Server. bootstrap_server A sample LwM2M Bootstrap Server using IOWA. This bootstrap server listens for client bootstrap requests on UDP ports 5783 and 5784 (for DTLS connections). When receiving a Bootstrap Request from a LwM2M Client, it provisions a LwM2M Server Account with URL \\\"coap://127.0.0.1:5683\\\"."},{"location":"content/legacy.html#testing","title":"Testing","text":""},{"location":"content/legacy.html#without-security","title":"Without Security","text":"<ul> <li>Launch the previously built 'server'.</li> <li>Launch the previously built 'client' on the same computer.</li> </ul>"},{"location":"content/legacy.html#with-psk-security","title":"With PSK security","text":"<ul> <li>Launch the 'server' previously built.</li> <li>Edit the samples/client/main.c file to go from: <pre><code>    // Add the information of a LwM2M Server to connect to\nresult = iowa_client_add_server(iowaH, SERVER_SHORT_ID, SERVER_URI, 300, 0, IOWA_SEC_NONE);\n// or if you want to use a secure connection\n// result = iowa_client_add_server(iowaH, SERVER_SHORT_ID, SERVER_SECURE_URI, 300, 0, IOWA_SEC_PRE_SHARED_KEY);\n</code></pre> to: <pre><code>    // Add the information of a LwM2M Server to connect to\n// result = iowa_client_add_server(iowaH, SERVER_SHORT_ID, SERVER_URI, 300, 0, IOWA_SEC_NONE);\n// or if you want to use a secure connection\nresult = iowa_client_add_server(iowaH, SERVER_SHORT_ID, SERVER_SECURE_URI, 300, 0, IOWA_SEC_PRE_SHARED_KEY);\n</code></pre></li> <li>Rebuild and launch 'client'.</li> </ul>"},{"location":"content/mqtt_objects_client.html","title":"MQTT Objects Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/multithread_IPSO_client.html","title":"Multithreaded IPSO Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/oscore_client_mbedtls.html","title":"OSCORE Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/oscore_server_mbedtls.html","title":"OSCORE Server","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/secure_client_mbedtls2.html","title":"Secure Client with Mbed TLS 2","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/secure_client_mbedtls3.html","title":"Secure Client with Mbed TLS 3","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/secure_client_tinydtls.html","title":"Secure Client with tinydtls","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/streamable_resource_client.html","title":"Streamable Resource Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/virtual_observe_client.html","title":"Virtual Observe Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"},{"location":"content/websockets_client.html","title":"WebSocket Client","text":"<p>This feature is present only in the IOWA Full SDK.</p> <p>Please Contact us</p>"}]}